
MC_Lab6_Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b20  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08007ca8  08007ca8  00017ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ccc  08007ccc  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08007ccc  08007ccc  00017ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cd4  08007cd4  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cd4  08007cd4  00017cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cd8  08007cd8  00017cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08007cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000887c  20000094  08007d70  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008910  08007d70  00028910  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000198bf  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003888  00000000  00000000  00039983  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011f8  00000000  00000000  0003d210  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001080  00000000  00000000  0003e408  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023a71  00000000  00000000  0003f488  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011ab0  00000000  00000000  00062ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000caa60  00000000  00000000  000749a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013f409  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bb4  00000000  00000000  0013f484  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007c90 	.word	0x08007c90

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	08007c90 	.word	0x08007c90

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <writecommand>:
short size = 8;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void writecommand(uint8_t command) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
    //cs = 0;
    //ao = 0;
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004d8:	4806      	ldr	r0, [pc, #24]	; (80004f4 <writecommand+0x2c>)
 80004da:	f001 fdad 	bl	8002038 <HAL_GPIO_WritePin>
    //HAL_SPI_Transmit(&hspi2, &command, );
    HAL_SPI_Transmit(&hspi2, &command, 1, 100);
 80004de:	1df9      	adds	r1, r7, #7
 80004e0:	2364      	movs	r3, #100	; 0x64
 80004e2:	2201      	movs	r2, #1
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <writecommand+0x30>)
 80004e6:	f004 fdd3 	bl	8005090 <HAL_SPI_Transmit>
    //cs = 1;
}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40020400 	.word	0x40020400
 80004f8:	200080cc 	.word	0x200080cc

080004fc <writedata>:

void writedata(uint8_t data) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]
    //cs = 0;
    //ao = 1;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000506:	2201      	movs	r2, #1
 8000508:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800050c:	4806      	ldr	r0, [pc, #24]	; (8000528 <writedata+0x2c>)
 800050e:	f001 fd93 	bl	8002038 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000512:	1df9      	adds	r1, r7, #7
 8000514:	2364      	movs	r3, #100	; 0x64
 8000516:	2201      	movs	r2, #1
 8000518:	4804      	ldr	r0, [pc, #16]	; (800052c <writedata+0x30>)
 800051a:	f004 fdb9 	bl	8005090 <HAL_SPI_Transmit>
    //cs = 1;
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40020400 	.word	0x40020400
 800052c:	200080cc 	.word	0x200080cc

08000530 <init>:

void init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  writecommand(0x01);
 8000534:	2001      	movs	r0, #1
 8000536:	f7ff ffc7 	bl	80004c8 <writecommand>
  HAL_Delay(20);
 800053a:	2014      	movs	r0, #20
 800053c:	f000 ffa4 	bl	8001488 <HAL_Delay>
  writecommand(0x11);
 8000540:	2011      	movs	r0, #17
 8000542:	f7ff ffc1 	bl	80004c8 <writecommand>
  HAL_Delay(20);
 8000546:	2014      	movs	r0, #20
 8000548:	f000 ff9e 	bl	8001488 <HAL_Delay>

  writecommand(0x3a);
 800054c:	203a      	movs	r0, #58	; 0x3a
 800054e:	f7ff ffbb 	bl	80004c8 <writecommand>
  writedata(0x05);
 8000552:	2005      	movs	r0, #5
 8000554:	f7ff ffd2 	bl	80004fc <writedata>

  writecommand(0x26);
 8000558:	2026      	movs	r0, #38	; 0x26
 800055a:	f7ff ffb5 	bl	80004c8 <writecommand>
  writedata(0x04);
 800055e:	2004      	movs	r0, #4
 8000560:	f7ff ffcc 	bl	80004fc <writedata>

  writecommand(0xf2);
 8000564:	20f2      	movs	r0, #242	; 0xf2
 8000566:	f7ff ffaf 	bl	80004c8 <writecommand>
  writedata(0x01);
 800056a:	2001      	movs	r0, #1
 800056c:	f7ff ffc6 	bl	80004fc <writedata>

  writecommand(0xE0);
 8000570:	20e0      	movs	r0, #224	; 0xe0
 8000572:	f7ff ffa9 	bl	80004c8 <writecommand>
  writedata(0x3f);
 8000576:	203f      	movs	r0, #63	; 0x3f
 8000578:	f7ff ffc0 	bl	80004fc <writedata>
  writedata(0x25);
 800057c:	2025      	movs	r0, #37	; 0x25
 800057e:	f7ff ffbd 	bl	80004fc <writedata>
  writedata(0x1c);
 8000582:	201c      	movs	r0, #28
 8000584:	f7ff ffba 	bl	80004fc <writedata>
  writedata(0x1e);
 8000588:	201e      	movs	r0, #30
 800058a:	f7ff ffb7 	bl	80004fc <writedata>
  writedata(0x20);
 800058e:	2020      	movs	r0, #32
 8000590:	f7ff ffb4 	bl	80004fc <writedata>
  writedata(0x12);
 8000594:	2012      	movs	r0, #18
 8000596:	f7ff ffb1 	bl	80004fc <writedata>
  writedata(0x2a);
 800059a:	202a      	movs	r0, #42	; 0x2a
 800059c:	f7ff ffae 	bl	80004fc <writedata>
  writedata(0x90);
 80005a0:	2090      	movs	r0, #144	; 0x90
 80005a2:	f7ff ffab 	bl	80004fc <writedata>
  writedata(0x24);
 80005a6:	2024      	movs	r0, #36	; 0x24
 80005a8:	f7ff ffa8 	bl	80004fc <writedata>
  writedata(0x11);
 80005ac:	2011      	movs	r0, #17
 80005ae:	f7ff ffa5 	bl	80004fc <writedata>
  writedata(0x00);
 80005b2:	2000      	movs	r0, #0
 80005b4:	f7ff ffa2 	bl	80004fc <writedata>
  writedata(0x00);
 80005b8:	2000      	movs	r0, #0
 80005ba:	f7ff ff9f 	bl	80004fc <writedata>
  writedata(0x00);
 80005be:	2000      	movs	r0, #0
 80005c0:	f7ff ff9c 	bl	80004fc <writedata>
  writedata(0x00);
 80005c4:	2000      	movs	r0, #0
 80005c6:	f7ff ff99 	bl	80004fc <writedata>
  writedata(0x00);
 80005ca:	2000      	movs	r0, #0
 80005cc:	f7ff ff96 	bl	80004fc <writedata>

  writecommand(0xE1);
 80005d0:	20e1      	movs	r0, #225	; 0xe1
 80005d2:	f7ff ff79 	bl	80004c8 <writecommand>
  writedata(0x20);
 80005d6:	2020      	movs	r0, #32
 80005d8:	f7ff ff90 	bl	80004fc <writedata>
  writedata(0x20);
 80005dc:	2020      	movs	r0, #32
 80005de:	f7ff ff8d 	bl	80004fc <writedata>
  writedata(0x20);
 80005e2:	2020      	movs	r0, #32
 80005e4:	f7ff ff8a 	bl	80004fc <writedata>
  writedata(0x20);
 80005e8:	2020      	movs	r0, #32
 80005ea:	f7ff ff87 	bl	80004fc <writedata>
  writedata(0x05);
 80005ee:	2005      	movs	r0, #5
 80005f0:	f7ff ff84 	bl	80004fc <writedata>
  writedata(0x00);
 80005f4:	2000      	movs	r0, #0
 80005f6:	f7ff ff81 	bl	80004fc <writedata>
  writedata(0x15);
 80005fa:	2015      	movs	r0, #21
 80005fc:	f7ff ff7e 	bl	80004fc <writedata>
  writedata(0xa7);
 8000600:	20a7      	movs	r0, #167	; 0xa7
 8000602:	f7ff ff7b 	bl	80004fc <writedata>
  writedata(0x3d);
 8000606:	203d      	movs	r0, #61	; 0x3d
 8000608:	f7ff ff78 	bl	80004fc <writedata>
  writedata(0x18);
 800060c:	2018      	movs	r0, #24
 800060e:	f7ff ff75 	bl	80004fc <writedata>
  writedata(0x25);
 8000612:	2025      	movs	r0, #37	; 0x25
 8000614:	f7ff ff72 	bl	80004fc <writedata>
  writedata(0x2a);
 8000618:	202a      	movs	r0, #42	; 0x2a
 800061a:	f7ff ff6f 	bl	80004fc <writedata>
  writedata(0x2b);
 800061e:	202b      	movs	r0, #43	; 0x2b
 8000620:	f7ff ff6c 	bl	80004fc <writedata>
  writedata(0x2b);
 8000624:	202b      	movs	r0, #43	; 0x2b
 8000626:	f7ff ff69 	bl	80004fc <writedata>
  writedata(0x3a);
 800062a:	203a      	movs	r0, #58	; 0x3a
 800062c:	f7ff ff66 	bl	80004fc <writedata>

  writecommand(0xb1);
 8000630:	20b1      	movs	r0, #177	; 0xb1
 8000632:	f7ff ff49 	bl	80004c8 <writecommand>
  writedata(0x08);
 8000636:	2008      	movs	r0, #8
 8000638:	f7ff ff60 	bl	80004fc <writedata>
  writedata(0x08);
 800063c:	2008      	movs	r0, #8
 800063e:	f7ff ff5d 	bl	80004fc <writedata>

  writecommand(0xb4);
 8000642:	20b4      	movs	r0, #180	; 0xb4
 8000644:	f7ff ff40 	bl	80004c8 <writecommand>
  writedata(0x07);
 8000648:	2007      	movs	r0, #7
 800064a:	f7ff ff57 	bl	80004fc <writedata>

  writecommand(0xc0);
 800064e:	20c0      	movs	r0, #192	; 0xc0
 8000650:	f7ff ff3a 	bl	80004c8 <writecommand>
  writedata(0x0a);
 8000654:	200a      	movs	r0, #10
 8000656:	f7ff ff51 	bl	80004fc <writedata>
  writedata(0x02);
 800065a:	2002      	movs	r0, #2
 800065c:	f7ff ff4e 	bl	80004fc <writedata>

  writecommand(0xc1);
 8000660:	20c1      	movs	r0, #193	; 0xc1
 8000662:	f7ff ff31 	bl	80004c8 <writecommand>
  writedata(0x02);
 8000666:	2002      	movs	r0, #2
 8000668:	f7ff ff48 	bl	80004fc <writedata>

  writecommand(0xc5);
 800066c:	20c5      	movs	r0, #197	; 0xc5
 800066e:	f7ff ff2b 	bl	80004c8 <writecommand>
  writedata(0x50);
 8000672:	2050      	movs	r0, #80	; 0x50
 8000674:	f7ff ff42 	bl	80004fc <writedata>
  writedata(0x5b);
 8000678:	205b      	movs	r0, #91	; 0x5b
 800067a:	f7ff ff3f 	bl	80004fc <writedata>

  writecommand(0xc7);
 800067e:	20c7      	movs	r0, #199	; 0xc7
 8000680:	f7ff ff22 	bl	80004c8 <writecommand>
  writedata(0x40);
 8000684:	2040      	movs	r0, #64	; 0x40
 8000686:	f7ff ff39 	bl	80004fc <writedata>

  writecommand(0x2a);
 800068a:	202a      	movs	r0, #42	; 0x2a
 800068c:	f7ff ff1c 	bl	80004c8 <writecommand>
  writedata(0x00);
 8000690:	2000      	movs	r0, #0
 8000692:	f7ff ff33 	bl	80004fc <writedata>
  writedata(0x00);
 8000696:	2000      	movs	r0, #0
 8000698:	f7ff ff30 	bl	80004fc <writedata>
  writedata(0x00);
 800069c:	2000      	movs	r0, #0
 800069e:	f7ff ff2d 	bl	80004fc <writedata>
  writedata(0x7f);
 80006a2:	207f      	movs	r0, #127	; 0x7f
 80006a4:	f7ff ff2a 	bl	80004fc <writedata>

  writecommand(0x2a);
 80006a8:	202a      	movs	r0, #42	; 0x2a
 80006aa:	f7ff ff0d 	bl	80004c8 <writecommand>
  writedata(0x00);
 80006ae:	2000      	movs	r0, #0
 80006b0:	f7ff ff24 	bl	80004fc <writedata>
  writedata(0x00);
 80006b4:	2000      	movs	r0, #0
 80006b6:	f7ff ff21 	bl	80004fc <writedata>
  writedata(0x00);
 80006ba:	2000      	movs	r0, #0
 80006bc:	f7ff ff1e 	bl	80004fc <writedata>
  writedata(0x9f);
 80006c0:	209f      	movs	r0, #159	; 0x9f
 80006c2:	f7ff ff1b 	bl	80004fc <writedata>
  writedata(250);
 80006c6:	20fa      	movs	r0, #250	; 0xfa
 80006c8:	f7ff ff18 	bl	80004fc <writedata>

  writecommand(0x36);
 80006cc:	2036      	movs	r0, #54	; 0x36
 80006ce:	f7ff fefb 	bl	80004c8 <writecommand>
  writedata(0xc8);
 80006d2:	20c8      	movs	r0, #200	; 0xc8
 80006d4:	f7ff ff12 	bl	80004fc <writedata>

  writecommand(0x29);
 80006d8:	2029      	movs	r0, #41	; 0x29
 80006da:	f7ff fef5 	bl	80004c8 <writecommand>
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <setAddress>:

void setAddress(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 80006e2:	b590      	push	{r4, r7, lr}
 80006e4:	b083      	sub	sp, #12
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	4604      	mov	r4, r0
 80006ea:	4608      	mov	r0, r1
 80006ec:	4611      	mov	r1, r2
 80006ee:	461a      	mov	r2, r3
 80006f0:	4623      	mov	r3, r4
 80006f2:	71fb      	strb	r3, [r7, #7]
 80006f4:	4603      	mov	r3, r0
 80006f6:	71bb      	strb	r3, [r7, #6]
 80006f8:	460b      	mov	r3, r1
 80006fa:	717b      	strb	r3, [r7, #5]
 80006fc:	4613      	mov	r3, r2
 80006fe:	713b      	strb	r3, [r7, #4]
    writecommand(0x2a);
 8000700:	202a      	movs	r0, #42	; 0x2a
 8000702:	f7ff fee1 	bl	80004c8 <writecommand>
    writedata(0x00);
 8000706:	2000      	movs	r0, #0
 8000708:	f7ff fef8 	bl	80004fc <writedata>
    writedata(x1);
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff fef4 	bl	80004fc <writedata>
    writedata(0x00);
 8000714:	2000      	movs	r0, #0
 8000716:	f7ff fef1 	bl	80004fc <writedata>
    writedata(x2);
 800071a:	797b      	ldrb	r3, [r7, #5]
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff feed 	bl	80004fc <writedata>
    writecommand(0x2b);
 8000722:	202b      	movs	r0, #43	; 0x2b
 8000724:	f7ff fed0 	bl	80004c8 <writecommand>
    writedata(0x00);
 8000728:	2000      	movs	r0, #0
 800072a:	f7ff fee7 	bl	80004fc <writedata>
    writedata(y1);
 800072e:	79bb      	ldrb	r3, [r7, #6]
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fee3 	bl	80004fc <writedata>
    writedata(0x00);
 8000736:	2000      	movs	r0, #0
 8000738:	f7ff fee0 	bl	80004fc <writedata>
    writedata(y2);
 800073c:	793b      	ldrb	r3, [r7, #4]
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff fedc 	bl	80004fc <writedata>
    writecommand(0x2c);
 8000744:	202c      	movs	r0, #44	; 0x2c
 8000746:	f7ff febf 	bl	80004c8 <writecommand>
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	bd90      	pop	{r4, r7, pc}
	...

08000754 <writeColorData>:

void writeColorData(uint8_t * arr, int length) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
    //cs = 0;
    //ao = 1;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800075e:	2201      	movs	r2, #1
 8000760:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000764:	4806      	ldr	r0, [pc, #24]	; (8000780 <writeColorData+0x2c>)
 8000766:	f001 fc67 	bl	8002038 <HAL_GPIO_WritePin>
    //spi_dev.write((char*)arr, length, NULL, length);
    HAL_SPI_Transmit(&hspi2, arr, length, 100);
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	b29a      	uxth	r2, r3
 800076e:	2364      	movs	r3, #100	; 0x64
 8000770:	6879      	ldr	r1, [r7, #4]
 8000772:	4804      	ldr	r0, [pc, #16]	; (8000784 <writeColorData+0x30>)
 8000774:	f004 fc8c 	bl	8005090 <HAL_SPI_Transmit>
    //cs = 1;
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40020400 	.word	0x40020400
 8000784:	200080cc 	.word	0x200080cc

08000788 <draw>:
void fillColor(uint8_t * arr, int length) {
	setAddress(0, 0, 127, 127);
	writeColorData(arr, length);
}

void draw(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint16_t color) {
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	4604      	mov	r4, r0
 8000790:	4608      	mov	r0, r1
 8000792:	4611      	mov	r1, r2
 8000794:	461a      	mov	r2, r3
 8000796:	4623      	mov	r3, r4
 8000798:	71fb      	strb	r3, [r7, #7]
 800079a:	4603      	mov	r3, r0
 800079c:	71bb      	strb	r3, [r7, #6]
 800079e:	460b      	mov	r3, r1
 80007a0:	717b      	strb	r3, [r7, #5]
 80007a2:	4613      	mov	r3, r2
 80007a4:	713b      	strb	r3, [r7, #4]
	setAddress(x1, y1, x2, y2);
 80007a6:	793b      	ldrb	r3, [r7, #4]
 80007a8:	797a      	ldrb	r2, [r7, #5]
 80007aa:	79b9      	ldrb	r1, [r7, #6]
 80007ac:	79f8      	ldrb	r0, [r7, #7]
 80007ae:	f7ff ff98 	bl	80006e2 <setAddress>
	int length = (x2 - x1 + 1) * (y2 - y1 + 1) * 2;
 80007b2:	797a      	ldrb	r2, [r7, #5]
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	3301      	adds	r3, #1
 80007ba:	7939      	ldrb	r1, [r7, #4]
 80007bc:	79ba      	ldrb	r2, [r7, #6]
 80007be:	1a8a      	subs	r2, r1, r2
 80007c0:	3201      	adds	r2, #1
 80007c2:	fb02 f303 	mul.w	r3, r2, r3
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < length; ++i) {
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	e018      	b.n	8000802 <draw+0x7a>
		if (i % 2 == 0) {
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d109      	bne.n	80007ee <draw+0x66>
			arr[i] = (color >> 8);
 80007da:	8c3b      	ldrh	r3, [r7, #32]
 80007dc:	0a1b      	lsrs	r3, r3, #8
 80007de:	b29b      	uxth	r3, r3
 80007e0:	b2d9      	uxtb	r1, r3
 80007e2:	4a0e      	ldr	r2, [pc, #56]	; (800081c <draw+0x94>)
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	4413      	add	r3, r2
 80007e8:	460a      	mov	r2, r1
 80007ea:	701a      	strb	r2, [r3, #0]
 80007ec:	e006      	b.n	80007fc <draw+0x74>
		} else {
			arr[i] = (color & 0xff);
 80007ee:	8c3b      	ldrh	r3, [r7, #32]
 80007f0:	b2d9      	uxtb	r1, r3
 80007f2:	4a0a      	ldr	r2, [pc, #40]	; (800081c <draw+0x94>)
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	4413      	add	r3, r2
 80007f8:	460a      	mov	r2, r1
 80007fa:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < length; ++i) {
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	3301      	adds	r3, #1
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fa      	ldr	r2, [r7, #12]
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	429a      	cmp	r2, r3
 8000808:	dbe2      	blt.n	80007d0 <draw+0x48>
		}
	}
	writeColorData(arr, length);
 800080a:	68b9      	ldr	r1, [r7, #8]
 800080c:	4803      	ldr	r0, [pc, #12]	; (800081c <draw+0x94>)
 800080e:	f7ff ffa1 	bl	8000754 <writeColorData>
}
 8000812:	bf00      	nop
 8000814:	3714      	adds	r7, #20
 8000816:	46bd      	mov	sp, r7
 8000818:	bd90      	pop	{r4, r7, pc}
 800081a:	bf00      	nop
 800081c:	200000cc 	.word	0x200000cc

08000820 <drawSnake>:

void drawSnake() {
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b085      	sub	sp, #20
 8000824:	af02      	add	r7, sp, #8
  for (int i = 0; i < 3; i++) {
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	e043      	b.n	80008b4 <drawSnake+0x94>
    draw(x + size, y + size, x + size * 2, y + size * 2, 0xffff);
 800082c:	4b25      	ldr	r3, [pc, #148]	; (80008c4 <drawSnake+0xa4>)
 800082e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000832:	b2da      	uxtb	r2, r3
 8000834:	4b24      	ldr	r3, [pc, #144]	; (80008c8 <drawSnake+0xa8>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4413      	add	r3, r2
 800083c:	b2d8      	uxtb	r0, r3
 800083e:	4b21      	ldr	r3, [pc, #132]	; (80008c4 <drawSnake+0xa4>)
 8000840:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4b21      	ldr	r3, [pc, #132]	; (80008cc <drawSnake+0xac>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	4413      	add	r3, r2
 800084e:	b2d9      	uxtb	r1, r3
 8000850:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <drawSnake+0xa4>)
 8000852:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000856:	b2db      	uxtb	r3, r3
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	b2da      	uxtb	r2, r3
 800085c:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <drawSnake+0xa8>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	4413      	add	r3, r2
 8000864:	b2dc      	uxtb	r4, r3
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <drawSnake+0xa4>)
 8000868:	f9b3 3000 	ldrsh.w	r3, [r3]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4b16      	ldr	r3, [pc, #88]	; (80008cc <drawSnake+0xac>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	b2db      	uxtb	r3, r3
 8000878:	4413      	add	r3, r2
 800087a:	b2da      	uxtb	r2, r3
 800087c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	4613      	mov	r3, r2
 8000884:	4622      	mov	r2, r4
 8000886:	f7ff ff7f 	bl	8000788 <draw>
    x += size; y += size;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <drawSnake+0xa4>)
 800088c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000890:	461a      	mov	r2, r3
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <drawSnake+0xa8>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4413      	add	r3, r2
 8000898:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <drawSnake+0xa8>)
 800089a:	6013      	str	r3, [r2, #0]
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <drawSnake+0xa4>)
 800089e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008a2:	461a      	mov	r2, r3
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <drawSnake+0xac>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4413      	add	r3, r2
 80008aa:	4a08      	ldr	r2, [pc, #32]	; (80008cc <drawSnake+0xac>)
 80008ac:	6013      	str	r3, [r2, #0]
  for (int i = 0; i < 3; i++) {
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3301      	adds	r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	ddb8      	ble.n	800082c <drawSnake+0xc>
  }
  //x -= size; y -= size;
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd90      	pop	{r4, r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000000 	.word	0x20000000
 80008c8:	200000b0 	.word	0x200000b0
 80008cc:	200000b4 	.word	0x200000b4

080008d0 <clearTail>:

void clearTail() {
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af02      	add	r7, sp, #8
  x -= size * 2;
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <clearTail+0x5c>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <clearTail+0x60>)
 80008dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	1ad3      	subs	r3, r2, r3
 80008e4:	4a11      	ldr	r2, [pc, #68]	; (800092c <clearTail+0x5c>)
 80008e6:	6013      	str	r3, [r2, #0]
  y -= size * 2;
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <clearTail+0x64>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b10      	ldr	r3, [pc, #64]	; (8000930 <clearTail+0x60>)
 80008ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	4a0f      	ldr	r2, [pc, #60]	; (8000934 <clearTail+0x64>)
 80008f8:	6013      	str	r3, [r2, #0]
  draw(x, y, x * 2, y * 2, 0x0000);
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <clearTail+0x5c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	b2d8      	uxtb	r0, r3
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <clearTail+0x64>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	b2d9      	uxtb	r1, r3
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <clearTail+0x5c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	b2db      	uxtb	r3, r3
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	b2da      	uxtb	r2, r3
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <clearTail+0x64>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	b2db      	uxtb	r3, r3
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	b2dc      	uxtb	r4, r3
 800091a:	2300      	movs	r3, #0
 800091c:	9300      	str	r3, [sp, #0]
 800091e:	4623      	mov	r3, r4
 8000920:	f7ff ff32 	bl	8000788 <draw>
}
 8000924:	bf00      	nop
 8000926:	3704      	adds	r7, #4
 8000928:	46bd      	mov	sp, r7
 800092a:	bd90      	pop	{r4, r7, pc}
 800092c:	200000b0 	.word	0x200000b0
 8000930:	20000000 	.word	0x20000000
 8000934:	200000b4 	.word	0x200000b4

08000938 <diagonalMove>:

void diagonalMove() {
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
  for (int j = 0; j < 7; j++) {
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	e00e      	b.n	8000962 <diagonalMove+0x2a>
    drawSnake();
 8000944:	f7ff ff6c 	bl	8000820 <drawSnake>
    HAL_Delay(500);
 8000948:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800094c:	f000 fd9c 	bl	8001488 <HAL_Delay>
    clearTail();
 8000950:	f7ff ffbe 	bl	80008d0 <clearTail>
    HAL_Delay(500);
 8000954:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000958:	f000 fd96 	bl	8001488 <HAL_Delay>
  for (int j = 0; j < 7; j++) {
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3301      	adds	r3, #1
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b06      	cmp	r3, #6
 8000966:	dded      	ble.n	8000944 <diagonalMove+0xc>
    //x += size; y += size;
  }
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000976:	f000 fd15 	bl	80013a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097a:	f000 f81b 	bl	80009b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097e:	f000 f985 	bl	8000c8c <MX_GPIO_Init>
  MX_DMA_Init();
 8000982:	f000 f963 	bl	8000c4c <MX_DMA_Init>
  MX_I2C1_Init();
 8000986:	f000 f897 	bl	8000ab8 <MX_I2C1_Init>
  MX_I2S3_Init();
 800098a:	f000 f8c3 	bl	8000b14 <MX_I2S3_Init>
  MX_SPI1_Init();
 800098e:	f000 f8f1 	bl	8000b74 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000992:	f006 fdcd 	bl	8007530 <MX_USB_HOST_Init>
  MX_SPI2_Init();
 8000996:	f000 f923 	bl	8000be0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  init();
 800099a:	f7ff fdc9 	bl	8000530 <init>
  draw(0, 0, 127, 127, 0x0000);
 800099e:	2300      	movs	r3, #0
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	237f      	movs	r3, #127	; 0x7f
 80009a4:	227f      	movs	r2, #127	; 0x7f
 80009a6:	2100      	movs	r1, #0
 80009a8:	2000      	movs	r0, #0
 80009aa:	f7ff feed 	bl	8000788 <draw>
  //draw (1, 1, 10, 10, 0xffff);
  //draw (12, 12, 20, 20, 0xffff);
  //drawSnake();
  diagonalMove();
 80009ae:	f7ff ffc3 	bl	8000938 <diagonalMove>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <main+0x42>

080009b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b098      	sub	sp, #96	; 0x60
 80009b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009be:	2230      	movs	r2, #48	; 0x30
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f007 f8a2 	bl	8007b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	4b31      	ldr	r3, [pc, #196]	; (8000ab0 <SystemClock_Config+0xfc>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	4a30      	ldr	r2, [pc, #192]	; (8000ab0 <SystemClock_Config+0xfc>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f4:	6413      	str	r3, [r2, #64]	; 0x40
 80009f6:	4b2e      	ldr	r3, [pc, #184]	; (8000ab0 <SystemClock_Config+0xfc>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b2b      	ldr	r3, [pc, #172]	; (8000ab4 <SystemClock_Config+0x100>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a2a      	ldr	r2, [pc, #168]	; (8000ab4 <SystemClock_Config+0x100>)
 8000a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a10:	6013      	str	r3, [r2, #0]
 8000a12:	4b28      	ldr	r3, [pc, #160]	; (8000ab4 <SystemClock_Config+0x100>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a26:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a30:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a32:	2308      	movs	r3, #8
 8000a34:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a36:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a3a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a40:	2307      	movs	r3, #7
 8000a42:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f003 fd31 	bl	80044b0 <HAL_RCC_OscConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000a54:	f000 fa2c 	bl	8000eb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a58:	230f      	movs	r3, #15
 8000a5a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a64:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	2105      	movs	r1, #5
 8000a76:	4618      	mov	r0, r3
 8000a78:	f003 ff8a 	bl	8004990 <HAL_RCC_ClockConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000a82:	f000 fa15 	bl	8000eb0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a86:	2301      	movs	r3, #1
 8000a88:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a8a:	23c0      	movs	r3, #192	; 0xc0
 8000a8c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	4618      	mov	r0, r3
 8000a98:	f004 f958 	bl	8004d4c <HAL_RCCEx_PeriphCLKConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000aa2:	f000 fa05 	bl	8000eb0 <Error_Handler>
  }
}
 8000aa6:	bf00      	nop
 8000aa8:	3760      	adds	r7, #96	; 0x60
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40007000 	.word	0x40007000

08000ab8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_I2C1_Init+0x50>)
 8000abe:	4a13      	ldr	r2, [pc, #76]	; (8000b0c <MX_I2C1_Init+0x54>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_I2C1_Init+0x50>)
 8000ac4:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <MX_I2C1_Init+0x58>)
 8000ac6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_I2C1_Init+0x50>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_I2C1_Init+0x50>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_I2C1_Init+0x50>)
 8000ad6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ada:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <MX_I2C1_Init+0x50>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_I2C1_Init+0x50>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae8:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <MX_I2C1_Init+0x50>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_I2C1_Init+0x50>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af4:	4804      	ldr	r0, [pc, #16]	; (8000b08 <MX_I2C1_Init+0x50>)
 8000af6:	f002 ff03 	bl	8003900 <HAL_I2C_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b00:	f000 f9d6 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20008124 	.word	0x20008124
 8000b0c:	40005400 	.word	0x40005400
 8000b10:	000186a0 	.word	0x000186a0

08000b14 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <MX_I2S3_Init+0x54>)
 8000b1a:	4a14      	ldr	r2, [pc, #80]	; (8000b6c <MX_I2S3_Init+0x58>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000b1e:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <MX_I2S3_Init+0x54>)
 8000b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b24:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <MX_I2S3_Init+0x54>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_I2S3_Init+0x54>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <MX_I2S3_Init+0x54>)
 8000b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b38:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <MX_I2S3_Init+0x54>)
 8000b3c:	4a0c      	ldr	r2, [pc, #48]	; (8000b70 <MX_I2S3_Init+0x5c>)
 8000b3e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_I2S3_Init+0x54>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <MX_I2S3_Init+0x54>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_I2S3_Init+0x54>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_I2S3_Init+0x54>)
 8000b54:	f003 f80c 	bl	8003b70 <HAL_I2S_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000b5e:	f000 f9a7 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20008230 	.word	0x20008230
 8000b6c:	40003c00 	.word	0x40003c00
 8000b70:	00017700 	.word	0x00017700

08000b74 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b78:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000b7a:	4a18      	ldr	r2, [pc, #96]	; (8000bdc <MX_SPI1_Init+0x68>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b7e:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000b80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b98:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ba4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000bc0:	220a      	movs	r2, #10
 8000bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bc4:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000bc6:	f004 f9ff 	bl	8004fc8 <HAL_SPI_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bd0:	f000 f96e 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20008178 	.word	0x20008178
 8000bdc:	40013000 	.word	0x40013000

08000be0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000be4:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <MX_SPI2_Init+0x64>)
 8000be6:	4a18      	ldr	r2, [pc, #96]	; (8000c48 <MX_SPI2_Init+0x68>)
 8000be8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000bea:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <MX_SPI2_Init+0x64>)
 8000bec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bf0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <MX_SPI2_Init+0x64>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <MX_SPI2_Init+0x64>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_SPI2_Init+0x64>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <MX_SPI2_Init+0x64>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <MX_SPI2_Init+0x64>)
 8000c0c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c10:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <MX_SPI2_Init+0x64>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c18:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <MX_SPI2_Init+0x64>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_SPI2_Init+0x64>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c24:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <MX_SPI2_Init+0x64>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <MX_SPI2_Init+0x64>)
 8000c2c:	220a      	movs	r2, #10
 8000c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c30:	4804      	ldr	r0, [pc, #16]	; (8000c44 <MX_SPI2_Init+0x64>)
 8000c32:	f004 f9c9 	bl	8004fc8 <HAL_SPI_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000c3c:	f000 f938 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	200080cc 	.word	0x200080cc
 8000c48:	40003800 	.word	0x40003800

08000c4c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_DMA_Init+0x3c>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a0b      	ldr	r2, [pc, #44]	; (8000c88 <MX_DMA_Init+0x3c>)
 8000c5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_DMA_Init+0x3c>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2100      	movs	r1, #0
 8000c72:	200f      	movs	r0, #15
 8000c74:	f000 fd05 	bl	8001682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000c78:	200f      	movs	r0, #15
 8000c7a:	f000 fd1e 	bl	80016ba <HAL_NVIC_EnableIRQ>

}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800

08000c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08c      	sub	sp, #48	; 0x30
 8000c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61bb      	str	r3, [r7, #24]
 8000ca6:	4b7b      	ldr	r3, [pc, #492]	; (8000e94 <MX_GPIO_Init+0x208>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a7a      	ldr	r2, [pc, #488]	; (8000e94 <MX_GPIO_Init+0x208>)
 8000cac:	f043 0310 	orr.w	r3, r3, #16
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b78      	ldr	r3, [pc, #480]	; (8000e94 <MX_GPIO_Init+0x208>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0310 	and.w	r3, r3, #16
 8000cba:	61bb      	str	r3, [r7, #24]
 8000cbc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
 8000cc2:	4b74      	ldr	r3, [pc, #464]	; (8000e94 <MX_GPIO_Init+0x208>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a73      	ldr	r2, [pc, #460]	; (8000e94 <MX_GPIO_Init+0x208>)
 8000cc8:	f043 0304 	orr.w	r3, r3, #4
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b71      	ldr	r3, [pc, #452]	; (8000e94 <MX_GPIO_Init+0x208>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0304 	and.w	r3, r3, #4
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	4b6d      	ldr	r3, [pc, #436]	; (8000e94 <MX_GPIO_Init+0x208>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a6c      	ldr	r2, [pc, #432]	; (8000e94 <MX_GPIO_Init+0x208>)
 8000ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b6a      	ldr	r3, [pc, #424]	; (8000e94 <MX_GPIO_Init+0x208>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	4b66      	ldr	r3, [pc, #408]	; (8000e94 <MX_GPIO_Init+0x208>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a65      	ldr	r2, [pc, #404]	; (8000e94 <MX_GPIO_Init+0x208>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b63      	ldr	r3, [pc, #396]	; (8000e94 <MX_GPIO_Init+0x208>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	4b5f      	ldr	r3, [pc, #380]	; (8000e94 <MX_GPIO_Init+0x208>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a5e      	ldr	r2, [pc, #376]	; (8000e94 <MX_GPIO_Init+0x208>)
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b5c      	ldr	r3, [pc, #368]	; (8000e94 <MX_GPIO_Init+0x208>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	4b58      	ldr	r3, [pc, #352]	; (8000e94 <MX_GPIO_Init+0x208>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a57      	ldr	r2, [pc, #348]	; (8000e94 <MX_GPIO_Init+0x208>)
 8000d38:	f043 0308 	orr.w	r3, r3, #8
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b55      	ldr	r3, [pc, #340]	; (8000e94 <MX_GPIO_Init+0x208>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0308 	and.w	r3, r3, #8
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2108      	movs	r1, #8
 8000d4e:	4852      	ldr	r0, [pc, #328]	; (8000e98 <MX_GPIO_Init+0x20c>)
 8000d50:	f001 f972 	bl	8002038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	2101      	movs	r1, #1
 8000d58:	4850      	ldr	r0, [pc, #320]	; (8000e9c <MX_GPIO_Init+0x210>)
 8000d5a:	f001 f96d 	bl	8002038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d64:	484e      	ldr	r0, [pc, #312]	; (8000ea0 <MX_GPIO_Init+0x214>)
 8000d66:	f001 f967 	bl	8002038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000d70:	484c      	ldr	r0, [pc, #304]	; (8000ea4 <MX_GPIO_Init+0x218>)
 8000d72:	f001 f961 	bl	8002038 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000d76:	2308      	movs	r3, #8
 8000d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4842      	ldr	r0, [pc, #264]	; (8000e98 <MX_GPIO_Init+0x20c>)
 8000d8e:	f000 ffb9 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000d92:	2301      	movs	r3, #1
 8000d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	4619      	mov	r1, r3
 8000da8:	483c      	ldr	r0, [pc, #240]	; (8000e9c <MX_GPIO_Init+0x210>)
 8000daa:	f000 ffab 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000dae:	2308      	movs	r3, #8
 8000db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dbe:	2305      	movs	r3, #5
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4834      	ldr	r0, [pc, #208]	; (8000e9c <MX_GPIO_Init+0x210>)
 8000dca:	f000 ff9b 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dd2:	4b35      	ldr	r3, [pc, #212]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000dd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 031c 	add.w	r3, r7, #28
 8000dde:	4619      	mov	r1, r3
 8000de0:	4832      	ldr	r0, [pc, #200]	; (8000eac <MX_GPIO_Init+0x220>)
 8000de2:	f000 ff8f 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000de6:	2304      	movs	r3, #4
 8000de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	4829      	ldr	r0, [pc, #164]	; (8000ea0 <MX_GPIO_Init+0x214>)
 8000dfa:	f000 ff83 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e10:	2305      	movs	r3, #5
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4821      	ldr	r0, [pc, #132]	; (8000ea0 <MX_GPIO_Init+0x214>)
 8000e1c:	f000 ff72 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000e20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e26:	2301      	movs	r3, #1
 8000e28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e32:	f107 031c 	add.w	r3, r7, #28
 8000e36:	4619      	mov	r1, r3
 8000e38:	4819      	ldr	r0, [pc, #100]	; (8000ea0 <MX_GPIO_Init+0x214>)
 8000e3a:	f000 ff63 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000e3e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000e42:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e50:	f107 031c 	add.w	r3, r7, #28
 8000e54:	4619      	mov	r1, r3
 8000e56:	4813      	ldr	r0, [pc, #76]	; (8000ea4 <MX_GPIO_Init+0x218>)
 8000e58:	f000 ff54 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e5c:	2320      	movs	r3, #32
 8000e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <MX_GPIO_Init+0x218>)
 8000e70:	f000 ff48 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e74:	2302      	movs	r3, #2
 8000e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e78:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <MX_GPIO_Init+0x21c>)
 8000e7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	4619      	mov	r1, r3
 8000e86:	4804      	ldr	r0, [pc, #16]	; (8000e98 <MX_GPIO_Init+0x20c>)
 8000e88:	f000 ff3c 	bl	8001d04 <HAL_GPIO_Init>

}
 8000e8c:	bf00      	nop
 8000e8e:	3730      	adds	r7, #48	; 0x30
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	40020800 	.word	0x40020800
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	40020c00 	.word	0x40020c00
 8000ea8:	10120000 	.word	0x10120000
 8000eac:	40020000 	.word	0x40020000

08000eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
	...

08000ec0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	4a0f      	ldr	r2, [pc, #60]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	603b      	str	r3, [r7, #0]
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	4a08      	ldr	r2, [pc, #32]	; (8000f0c <HAL_MspInit+0x4c>)
 8000eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	603b      	str	r3, [r7, #0]
 8000efc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000efe:	2007      	movs	r0, #7
 8000f00:	f000 fbb4 	bl	800166c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40023800 	.word	0x40023800

08000f10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a19      	ldr	r2, [pc, #100]	; (8000f94 <HAL_I2C_MspInit+0x84>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d12c      	bne.n	8000f8c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <HAL_I2C_MspInit+0x88>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a17      	ldr	r2, [pc, #92]	; (8000f98 <HAL_I2C_MspInit+0x88>)
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <HAL_I2C_MspInit+0x88>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000f4e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f54:	2312      	movs	r3, #18
 8000f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f60:	2304      	movs	r3, #4
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4619      	mov	r1, r3
 8000f6a:	480c      	ldr	r0, [pc, #48]	; (8000f9c <HAL_I2C_MspInit+0x8c>)
 8000f6c:	f000 feca 	bl	8001d04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f70:	2300      	movs	r3, #0
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <HAL_I2C_MspInit+0x88>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	4a07      	ldr	r2, [pc, #28]	; (8000f98 <HAL_I2C_MspInit+0x88>)
 8000f7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <HAL_I2C_MspInit+0x88>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f8c:	bf00      	nop
 8000f8e:	3728      	adds	r7, #40	; 0x28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40005400 	.word	0x40005400
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40020400 	.word	0x40020400

08000fa0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a28      	ldr	r2, [pc, #160]	; (8001060 <HAL_I2S_MspInit+0xc0>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d14a      	bne.n	8001058 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	4b27      	ldr	r3, [pc, #156]	; (8001064 <HAL_I2S_MspInit+0xc4>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	4a26      	ldr	r2, [pc, #152]	; (8001064 <HAL_I2S_MspInit+0xc4>)
 8000fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd2:	4b24      	ldr	r3, [pc, #144]	; (8001064 <HAL_I2S_MspInit+0xc4>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	4b20      	ldr	r3, [pc, #128]	; (8001064 <HAL_I2S_MspInit+0xc4>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a1f      	ldr	r2, [pc, #124]	; (8001064 <HAL_I2S_MspInit+0xc4>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <HAL_I2S_MspInit+0xc4>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	4b19      	ldr	r3, [pc, #100]	; (8001064 <HAL_I2S_MspInit+0xc4>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a18      	ldr	r2, [pc, #96]	; (8001064 <HAL_I2S_MspInit+0xc4>)
 8001004:	f043 0304 	orr.w	r3, r3, #4
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b16      	ldr	r3, [pc, #88]	; (8001064 <HAL_I2S_MspInit+0xc4>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0304 	and.w	r3, r3, #4
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001016:	2310      	movs	r3, #16
 8001018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001026:	2306      	movs	r3, #6
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4619      	mov	r1, r3
 8001030:	480d      	ldr	r0, [pc, #52]	; (8001068 <HAL_I2S_MspInit+0xc8>)
 8001032:	f000 fe67 	bl	8001d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001036:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800103a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001048:	2306      	movs	r3, #6
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	4806      	ldr	r0, [pc, #24]	; (800106c <HAL_I2S_MspInit+0xcc>)
 8001054:	f000 fe56 	bl	8001d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001058:	bf00      	nop
 800105a:	3728      	adds	r7, #40	; 0x28
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40003c00 	.word	0x40003c00
 8001064:	40023800 	.word	0x40023800
 8001068:	40020000 	.word	0x40020000
 800106c:	40020800 	.word	0x40020800

08001070 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08c      	sub	sp, #48	; 0x30
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 031c 	add.w	r3, r7, #28
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a61      	ldr	r2, [pc, #388]	; (8001214 <HAL_SPI_MspInit+0x1a4>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d12c      	bne.n	80010ec <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
 8001096:	4b60      	ldr	r3, [pc, #384]	; (8001218 <HAL_SPI_MspInit+0x1a8>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	4a5f      	ldr	r2, [pc, #380]	; (8001218 <HAL_SPI_MspInit+0x1a8>)
 800109c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010a0:	6453      	str	r3, [r2, #68]	; 0x44
 80010a2:	4b5d      	ldr	r3, [pc, #372]	; (8001218 <HAL_SPI_MspInit+0x1a8>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010aa:	61bb      	str	r3, [r7, #24]
 80010ac:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	4b59      	ldr	r3, [pc, #356]	; (8001218 <HAL_SPI_MspInit+0x1a8>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a58      	ldr	r2, [pc, #352]	; (8001218 <HAL_SPI_MspInit+0x1a8>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b56      	ldr	r3, [pc, #344]	; (8001218 <HAL_SPI_MspInit+0x1a8>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80010ca:	23e0      	movs	r3, #224	; 0xe0
 80010cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010da:	2305      	movs	r3, #5
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	f107 031c 	add.w	r3, r7, #28
 80010e2:	4619      	mov	r1, r3
 80010e4:	484d      	ldr	r0, [pc, #308]	; (800121c <HAL_SPI_MspInit+0x1ac>)
 80010e6:	f000 fe0d 	bl	8001d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80010ea:	e08e      	b.n	800120a <HAL_SPI_MspInit+0x19a>
  else if(hspi->Instance==SPI2)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a4b      	ldr	r2, [pc, #300]	; (8001220 <HAL_SPI_MspInit+0x1b0>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	f040 8089 	bne.w	800120a <HAL_SPI_MspInit+0x19a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010f8:	2300      	movs	r3, #0
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	4b46      	ldr	r3, [pc, #280]	; (8001218 <HAL_SPI_MspInit+0x1a8>)
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	4a45      	ldr	r2, [pc, #276]	; (8001218 <HAL_SPI_MspInit+0x1a8>)
 8001102:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001106:	6413      	str	r3, [r2, #64]	; 0x40
 8001108:	4b43      	ldr	r3, [pc, #268]	; (8001218 <HAL_SPI_MspInit+0x1a8>)
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	4b3f      	ldr	r3, [pc, #252]	; (8001218 <HAL_SPI_MspInit+0x1a8>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111c:	4a3e      	ldr	r2, [pc, #248]	; (8001218 <HAL_SPI_MspInit+0x1a8>)
 800111e:	f043 0304 	orr.w	r3, r3, #4
 8001122:	6313      	str	r3, [r2, #48]	; 0x30
 8001124:	4b3c      	ldr	r3, [pc, #240]	; (8001218 <HAL_SPI_MspInit+0x1a8>)
 8001126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001130:	2300      	movs	r3, #0
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	4b38      	ldr	r3, [pc, #224]	; (8001218 <HAL_SPI_MspInit+0x1a8>)
 8001136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001138:	4a37      	ldr	r2, [pc, #220]	; (8001218 <HAL_SPI_MspInit+0x1a8>)
 800113a:	f043 0302 	orr.w	r3, r3, #2
 800113e:	6313      	str	r3, [r2, #48]	; 0x30
 8001140:	4b35      	ldr	r3, [pc, #212]	; (8001218 <HAL_SPI_MspInit+0x1a8>)
 8001142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800114c:	2304      	movs	r3, #4
 800114e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800115c:	2305      	movs	r3, #5
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001160:	f107 031c 	add.w	r3, r7, #28
 8001164:	4619      	mov	r1, r3
 8001166:	482f      	ldr	r0, [pc, #188]	; (8001224 <HAL_SPI_MspInit+0x1b4>)
 8001168:	f000 fdcc 	bl	8001d04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800116c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117a:	2303      	movs	r3, #3
 800117c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800117e:	2305      	movs	r3, #5
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	4619      	mov	r1, r3
 8001188:	4827      	ldr	r0, [pc, #156]	; (8001228 <HAL_SPI_MspInit+0x1b8>)
 800118a:	f000 fdbb 	bl	8001d04 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800118e:	4b27      	ldr	r3, [pc, #156]	; (800122c <HAL_SPI_MspInit+0x1bc>)
 8001190:	4a27      	ldr	r2, [pc, #156]	; (8001230 <HAL_SPI_MspInit+0x1c0>)
 8001192:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001194:	4b25      	ldr	r3, [pc, #148]	; (800122c <HAL_SPI_MspInit+0x1bc>)
 8001196:	2200      	movs	r2, #0
 8001198:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800119a:	4b24      	ldr	r3, [pc, #144]	; (800122c <HAL_SPI_MspInit+0x1bc>)
 800119c:	2240      	movs	r2, #64	; 0x40
 800119e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011a0:	4b22      	ldr	r3, [pc, #136]	; (800122c <HAL_SPI_MspInit+0x1bc>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011a6:	4b21      	ldr	r3, [pc, #132]	; (800122c <HAL_SPI_MspInit+0x1bc>)
 80011a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ac:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011ae:	4b1f      	ldr	r3, [pc, #124]	; (800122c <HAL_SPI_MspInit+0x1bc>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011b4:	4b1d      	ldr	r3, [pc, #116]	; (800122c <HAL_SPI_MspInit+0x1bc>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80011ba:	4b1c      	ldr	r3, [pc, #112]	; (800122c <HAL_SPI_MspInit+0x1bc>)
 80011bc:	2200      	movs	r2, #0
 80011be:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011c0:	4b1a      	ldr	r3, [pc, #104]	; (800122c <HAL_SPI_MspInit+0x1bc>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011c6:	4b19      	ldr	r3, [pc, #100]	; (800122c <HAL_SPI_MspInit+0x1bc>)
 80011c8:	2204      	movs	r2, #4
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011cc:	4b17      	ldr	r3, [pc, #92]	; (800122c <HAL_SPI_MspInit+0x1bc>)
 80011ce:	2203      	movs	r2, #3
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <HAL_SPI_MspInit+0x1bc>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <HAL_SPI_MspInit+0x1bc>)
 80011da:	2200      	movs	r2, #0
 80011dc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80011de:	4813      	ldr	r0, [pc, #76]	; (800122c <HAL_SPI_MspInit+0x1bc>)
 80011e0:	f000 fa86 	bl	80016f0 <HAL_DMA_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <HAL_SPI_MspInit+0x17e>
      Error_Handler();
 80011ea:	f7ff fe61 	bl	8000eb0 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a0e      	ldr	r2, [pc, #56]	; (800122c <HAL_SPI_MspInit+0x1bc>)
 80011f2:	649a      	str	r2, [r3, #72]	; 0x48
 80011f4:	4a0d      	ldr	r2, [pc, #52]	; (800122c <HAL_SPI_MspInit+0x1bc>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	2024      	movs	r0, #36	; 0x24
 8001200:	f000 fa3f 	bl	8001682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001204:	2024      	movs	r0, #36	; 0x24
 8001206:	f000 fa58 	bl	80016ba <HAL_NVIC_EnableIRQ>
}
 800120a:	bf00      	nop
 800120c:	3730      	adds	r7, #48	; 0x30
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40013000 	.word	0x40013000
 8001218:	40023800 	.word	0x40023800
 800121c:	40020000 	.word	0x40020000
 8001220:	40003800 	.word	0x40003800
 8001224:	40020800 	.word	0x40020800
 8001228:	40020400 	.word	0x40020400
 800122c:	200081d0 	.word	0x200081d0
 8001230:	40026070 	.word	0x40026070

08001234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <HardFault_Handler+0x4>

08001248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <MemManage_Handler+0x4>

0800124e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <BusFault_Handler+0x4>

08001254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <UsageFault_Handler+0x4>

0800125a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001288:	f000 f8de 	bl	8001448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}

08001290 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <DMA1_Stream4_IRQHandler+0x10>)
 8001296:	f000 fafb 	bl	8001890 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200081d0 	.word	0x200081d0

080012a4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80012a8:	4802      	ldr	r0, [pc, #8]	; (80012b4 <SPI2_IRQHandler+0x10>)
 80012aa:	f004 f825 	bl	80052f8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200080cc 	.word	0x200080cc

080012b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80012bc:	4802      	ldr	r0, [pc, #8]	; (80012c8 <OTG_FS_IRQHandler+0x10>)
 80012be:	f001 f959 	bl	8002574 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20008648 	.word	0x20008648

080012cc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <_sbrk+0x50>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d102      	bne.n	80012e2 <_sbrk+0x16>
		heap_end = &end;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <_sbrk+0x50>)
 80012de:	4a10      	ldr	r2, [pc, #64]	; (8001320 <_sbrk+0x54>)
 80012e0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <_sbrk+0x50>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <_sbrk+0x50>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4413      	add	r3, r2
 80012f0:	466a      	mov	r2, sp
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d907      	bls.n	8001306 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80012f6:	f006 fbcf 	bl	8007a98 <__errno>
 80012fa:	4602      	mov	r2, r0
 80012fc:	230c      	movs	r3, #12
 80012fe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001300:	f04f 33ff 	mov.w	r3, #4294967295
 8001304:	e006      	b.n	8001314 <_sbrk+0x48>
	}

	heap_end += incr;
 8001306:	4b05      	ldr	r3, [pc, #20]	; (800131c <_sbrk+0x50>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	4a03      	ldr	r2, [pc, #12]	; (800131c <_sbrk+0x50>)
 8001310:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001312:	68fb      	ldr	r3, [r7, #12]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	200000b8 	.word	0x200000b8
 8001320:	20008910 	.word	0x20008910

08001324 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <SystemInit+0x28>)
 800132a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800132e:	4a07      	ldr	r2, [pc, #28]	; (800134c <SystemInit+0x28>)
 8001330:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001334:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <SystemInit+0x28>)
 800133a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800133e:	609a      	str	r2, [r3, #8]
#endif
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001350:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001388 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001354:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001356:	e003      	b.n	8001360 <LoopCopyDataInit>

08001358 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800135a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800135c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800135e:	3104      	adds	r1, #4

08001360 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001360:	480b      	ldr	r0, [pc, #44]	; (8001390 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001364:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001366:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001368:	d3f6      	bcc.n	8001358 <CopyDataInit>
  ldr  r2, =_sbss
 800136a:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800136c:	e002      	b.n	8001374 <LoopFillZerobss>

0800136e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800136e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001370:	f842 3b04 	str.w	r3, [r2], #4

08001374 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001376:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001378:	d3f9      	bcc.n	800136e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800137a:	f7ff ffd3 	bl	8001324 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800137e:	f006 fb91 	bl	8007aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001382:	f7ff faf5 	bl	8000970 <main>
  bx  lr    
 8001386:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001388:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800138c:	08007cdc 	.word	0x08007cdc
  ldr  r0, =_sdata
 8001390:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001394:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8001398:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 800139c:	20008910 	.word	0x20008910

080013a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013a0:	e7fe      	b.n	80013a0 <ADC_IRQHandler>
	...

080013a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013a8:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <HAL_Init+0x40>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0d      	ldr	r2, [pc, #52]	; (80013e4 <HAL_Init+0x40>)
 80013ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013b4:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <HAL_Init+0x40>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <HAL_Init+0x40>)
 80013ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <HAL_Init+0x40>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a07      	ldr	r2, [pc, #28]	; (80013e4 <HAL_Init+0x40>)
 80013c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013cc:	2003      	movs	r0, #3
 80013ce:	f000 f94d 	bl	800166c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013d2:	2000      	movs	r0, #0
 80013d4:	f000 f808 	bl	80013e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d8:	f7ff fd72 	bl	8000ec0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40023c00 	.word	0x40023c00

080013e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_InitTick+0x54>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_InitTick+0x58>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4619      	mov	r1, r3
 80013fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001402:	fbb2 f3f3 	udiv	r3, r2, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f000 f965 	bl	80016d6 <HAL_SYSTICK_Config>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e00e      	b.n	8001434 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b0f      	cmp	r3, #15
 800141a:	d80a      	bhi.n	8001432 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800141c:	2200      	movs	r2, #0
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	f04f 30ff 	mov.w	r0, #4294967295
 8001424:	f000 f92d 	bl	8001682 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001428:	4a06      	ldr	r2, [pc, #24]	; (8001444 <HAL_InitTick+0x5c>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	e000      	b.n	8001434 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000004 	.word	0x20000004
 8001440:	2000000c 	.word	0x2000000c
 8001444:	20000008 	.word	0x20000008

08001448 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_IncTick+0x20>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_IncTick+0x24>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4413      	add	r3, r2
 8001458:	4a04      	ldr	r2, [pc, #16]	; (800146c <HAL_IncTick+0x24>)
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	2000000c 	.word	0x2000000c
 800146c:	20008278 	.word	0x20008278

08001470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return uwTick;
 8001474:	4b03      	ldr	r3, [pc, #12]	; (8001484 <HAL_GetTick+0x14>)
 8001476:	681b      	ldr	r3, [r3, #0]
}
 8001478:	4618      	mov	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	20008278 	.word	0x20008278

08001488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001490:	f7ff ffee 	bl	8001470 <HAL_GetTick>
 8001494:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a0:	d005      	beq.n	80014ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <HAL_Delay+0x40>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4413      	add	r3, r2
 80014ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014ae:	bf00      	nop
 80014b0:	f7ff ffde 	bl	8001470 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d8f7      	bhi.n	80014b0 <HAL_Delay+0x28>
  {
  }
}
 80014c0:	bf00      	nop
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	2000000c 	.word	0x2000000c

080014cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <__NVIC_SetPriorityGrouping+0x44>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014e8:	4013      	ands	r3, r2
 80014ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014fe:	4a04      	ldr	r2, [pc, #16]	; (8001510 <__NVIC_SetPriorityGrouping+0x44>)
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	60d3      	str	r3, [r2, #12]
}
 8001504:	bf00      	nop
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001518:	4b04      	ldr	r3, [pc, #16]	; (800152c <__NVIC_GetPriorityGrouping+0x18>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	0a1b      	lsrs	r3, r3, #8
 800151e:	f003 0307 	and.w	r3, r3, #7
}
 8001522:	4618      	mov	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	2b00      	cmp	r3, #0
 8001540:	db0b      	blt.n	800155a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	f003 021f 	and.w	r2, r3, #31
 8001548:	4907      	ldr	r1, [pc, #28]	; (8001568 <__NVIC_EnableIRQ+0x38>)
 800154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154e:	095b      	lsrs	r3, r3, #5
 8001550:	2001      	movs	r0, #1
 8001552:	fa00 f202 	lsl.w	r2, r0, r2
 8001556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	e000e100 	.word	0xe000e100

0800156c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	6039      	str	r1, [r7, #0]
 8001576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157c:	2b00      	cmp	r3, #0
 800157e:	db0a      	blt.n	8001596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	b2da      	uxtb	r2, r3
 8001584:	490c      	ldr	r1, [pc, #48]	; (80015b8 <__NVIC_SetPriority+0x4c>)
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	0112      	lsls	r2, r2, #4
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	440b      	add	r3, r1
 8001590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001594:	e00a      	b.n	80015ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	b2da      	uxtb	r2, r3
 800159a:	4908      	ldr	r1, [pc, #32]	; (80015bc <__NVIC_SetPriority+0x50>)
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	3b04      	subs	r3, #4
 80015a4:	0112      	lsls	r2, r2, #4
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	440b      	add	r3, r1
 80015aa:	761a      	strb	r2, [r3, #24]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000e100 	.word	0xe000e100
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b089      	sub	sp, #36	; 0x24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f1c3 0307 	rsb	r3, r3, #7
 80015da:	2b04      	cmp	r3, #4
 80015dc:	bf28      	it	cs
 80015de:	2304      	movcs	r3, #4
 80015e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3304      	adds	r3, #4
 80015e6:	2b06      	cmp	r3, #6
 80015e8:	d902      	bls.n	80015f0 <NVIC_EncodePriority+0x30>
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3b03      	subs	r3, #3
 80015ee:	e000      	b.n	80015f2 <NVIC_EncodePriority+0x32>
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	f04f 32ff 	mov.w	r2, #4294967295
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43da      	mvns	r2, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	401a      	ands	r2, r3
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001608:	f04f 31ff 	mov.w	r1, #4294967295
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	fa01 f303 	lsl.w	r3, r1, r3
 8001612:	43d9      	mvns	r1, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	4313      	orrs	r3, r2
         );
}
 800161a:	4618      	mov	r0, r3
 800161c:	3724      	adds	r7, #36	; 0x24
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3b01      	subs	r3, #1
 8001634:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001638:	d301      	bcc.n	800163e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800163a:	2301      	movs	r3, #1
 800163c:	e00f      	b.n	800165e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800163e:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <SysTick_Config+0x40>)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3b01      	subs	r3, #1
 8001644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001646:	210f      	movs	r1, #15
 8001648:	f04f 30ff 	mov.w	r0, #4294967295
 800164c:	f7ff ff8e 	bl	800156c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001650:	4b05      	ldr	r3, [pc, #20]	; (8001668 <SysTick_Config+0x40>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001656:	4b04      	ldr	r3, [pc, #16]	; (8001668 <SysTick_Config+0x40>)
 8001658:	2207      	movs	r2, #7
 800165a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	e000e010 	.word	0xe000e010

0800166c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff ff29 	bl	80014cc <__NVIC_SetPriorityGrouping>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001682:	b580      	push	{r7, lr}
 8001684:	b086      	sub	sp, #24
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	60b9      	str	r1, [r7, #8]
 800168c:	607a      	str	r2, [r7, #4]
 800168e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001694:	f7ff ff3e 	bl	8001514 <__NVIC_GetPriorityGrouping>
 8001698:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	68b9      	ldr	r1, [r7, #8]
 800169e:	6978      	ldr	r0, [r7, #20]
 80016a0:	f7ff ff8e 	bl	80015c0 <NVIC_EncodePriority>
 80016a4:	4602      	mov	r2, r0
 80016a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff5d 	bl	800156c <__NVIC_SetPriority>
}
 80016b2:	bf00      	nop
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	4603      	mov	r3, r0
 80016c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff31 	bl	8001530 <__NVIC_EnableIRQ>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff ffa2 	bl	8001628 <SysTick_Config>
 80016e4:	4603      	mov	r3, r0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016fc:	f7ff feb8 	bl	8001470 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e099      	b.n	8001840 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2202      	movs	r2, #2
 8001718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 0201 	bic.w	r2, r2, #1
 800172a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800172c:	e00f      	b.n	800174e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800172e:	f7ff fe9f 	bl	8001470 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b05      	cmp	r3, #5
 800173a:	d908      	bls.n	800174e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2220      	movs	r2, #32
 8001740:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2203      	movs	r2, #3
 8001746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e078      	b.n	8001840 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1e8      	bne.n	800172e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	4b38      	ldr	r3, [pc, #224]	; (8001848 <HAL_DMA_Init+0x158>)
 8001768:	4013      	ands	r3, r2
 800176a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800177a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001786:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001792:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	4313      	orrs	r3, r2
 800179e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	d107      	bne.n	80017b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b0:	4313      	orrs	r3, r2
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	f023 0307 	bic.w	r3, r3, #7
 80017ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	2b04      	cmp	r3, #4
 80017e0:	d117      	bne.n	8001812 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d00e      	beq.n	8001812 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 fa0b 	bl	8001c10 <DMA_CheckFifoParam>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d008      	beq.n	8001812 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2240      	movs	r2, #64	; 0x40
 8001804:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800180e:	2301      	movs	r3, #1
 8001810:	e016      	b.n	8001840 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 f9c2 	bl	8001ba4 <DMA_CalcBaseAndBitshift>
 8001820:	4603      	mov	r3, r0
 8001822:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001828:	223f      	movs	r2, #63	; 0x3f
 800182a:	409a      	lsls	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2201      	movs	r2, #1
 800183a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	f010803f 	.word	0xf010803f

0800184c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d004      	beq.n	800186a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2280      	movs	r2, #128	; 0x80
 8001864:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e00c      	b.n	8001884 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2205      	movs	r2, #5
 800186e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 0201 	bic.w	r2, r2, #1
 8001880:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001898:	2300      	movs	r3, #0
 800189a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800189c:	4b92      	ldr	r3, [pc, #584]	; (8001ae8 <HAL_DMA_IRQHandler+0x258>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a92      	ldr	r2, [pc, #584]	; (8001aec <HAL_DMA_IRQHandler+0x25c>)
 80018a2:	fba2 2303 	umull	r2, r3, r2, r3
 80018a6:	0a9b      	lsrs	r3, r3, #10
 80018a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ba:	2208      	movs	r2, #8
 80018bc:	409a      	lsls	r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4013      	ands	r3, r2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d01a      	beq.n	80018fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d013      	beq.n	80018fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 0204 	bic.w	r2, r2, #4
 80018e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e8:	2208      	movs	r2, #8
 80018ea:	409a      	lsls	r2, r3
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f4:	f043 0201 	orr.w	r2, r3, #1
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001900:	2201      	movs	r2, #1
 8001902:	409a      	lsls	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4013      	ands	r3, r2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d012      	beq.n	8001932 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00b      	beq.n	8001932 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800191e:	2201      	movs	r2, #1
 8001920:	409a      	lsls	r2, r3
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192a:	f043 0202 	orr.w	r2, r3, #2
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001936:	2204      	movs	r2, #4
 8001938:	409a      	lsls	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4013      	ands	r3, r2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d012      	beq.n	8001968 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d00b      	beq.n	8001968 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001954:	2204      	movs	r2, #4
 8001956:	409a      	lsls	r2, r3
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001960:	f043 0204 	orr.w	r2, r3, #4
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800196c:	2210      	movs	r2, #16
 800196e:	409a      	lsls	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4013      	ands	r3, r2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d043      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	2b00      	cmp	r3, #0
 8001984:	d03c      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198a:	2210      	movs	r2, #16
 800198c:	409a      	lsls	r2, r3
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d018      	beq.n	80019d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d108      	bne.n	80019c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d024      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	4798      	blx	r3
 80019be:	e01f      	b.n	8001a00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d01b      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	4798      	blx	r3
 80019d0:	e016      	b.n	8001a00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d107      	bne.n	80019f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0208 	bic.w	r2, r2, #8
 80019ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a04:	2220      	movs	r2, #32
 8001a06:	409a      	lsls	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 808e 	beq.w	8001b2e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0310 	and.w	r3, r3, #16
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 8086 	beq.w	8001b2e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a26:	2220      	movs	r2, #32
 8001a28:	409a      	lsls	r2, r3
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b05      	cmp	r3, #5
 8001a38:	d136      	bne.n	8001aa8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 0216 	bic.w	r2, r2, #22
 8001a48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	695a      	ldr	r2, [r3, #20]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d103      	bne.n	8001a6a <HAL_DMA_IRQHandler+0x1da>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d007      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 0208 	bic.w	r2, r2, #8
 8001a78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7e:	223f      	movs	r2, #63	; 0x3f
 8001a80:	409a      	lsls	r2, r3
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d07d      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	4798      	blx	r3
        }
        return;
 8001aa6:	e078      	b.n	8001b9a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d01c      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d108      	bne.n	8001ad6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d030      	beq.n	8001b2e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	4798      	blx	r3
 8001ad4:	e02b      	b.n	8001b2e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d027      	beq.n	8001b2e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	4798      	blx	r3
 8001ae6:	e022      	b.n	8001b2e <HAL_DMA_IRQHandler+0x29e>
 8001ae8:	20000004 	.word	0x20000004
 8001aec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d10f      	bne.n	8001b1e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 0210 	bic.w	r2, r2, #16
 8001b0c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d032      	beq.n	8001b9c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d022      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2205      	movs	r2, #5
 8001b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0201 	bic.w	r2, r2, #1
 8001b58:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d307      	bcc.n	8001b76 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f2      	bne.n	8001b5a <HAL_DMA_IRQHandler+0x2ca>
 8001b74:	e000      	b.n	8001b78 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001b76:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	4798      	blx	r3
 8001b98:	e000      	b.n	8001b9c <HAL_DMA_IRQHandler+0x30c>
        return;
 8001b9a:	bf00      	nop
    }
  }
}
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop

08001ba4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	3b10      	subs	r3, #16
 8001bb4:	4a14      	ldr	r2, [pc, #80]	; (8001c08 <DMA_CalcBaseAndBitshift+0x64>)
 8001bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bba:	091b      	lsrs	r3, r3, #4
 8001bbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001bbe:	4a13      	ldr	r2, [pc, #76]	; (8001c0c <DMA_CalcBaseAndBitshift+0x68>)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	d909      	bls.n	8001be6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bda:	f023 0303 	bic.w	r3, r3, #3
 8001bde:	1d1a      	adds	r2, r3, #4
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	659a      	str	r2, [r3, #88]	; 0x58
 8001be4:	e007      	b.n	8001bf6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bee:	f023 0303 	bic.w	r3, r3, #3
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	aaaaaaab 	.word	0xaaaaaaab
 8001c0c:	08007cc4 	.word	0x08007cc4

08001c10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d11f      	bne.n	8001c6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	2b03      	cmp	r3, #3
 8001c2e:	d855      	bhi.n	8001cdc <DMA_CheckFifoParam+0xcc>
 8001c30:	a201      	add	r2, pc, #4	; (adr r2, 8001c38 <DMA_CheckFifoParam+0x28>)
 8001c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c36:	bf00      	nop
 8001c38:	08001c49 	.word	0x08001c49
 8001c3c:	08001c5b 	.word	0x08001c5b
 8001c40:	08001c49 	.word	0x08001c49
 8001c44:	08001cdd 	.word	0x08001cdd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d045      	beq.n	8001ce0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c58:	e042      	b.n	8001ce0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c62:	d13f      	bne.n	8001ce4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c68:	e03c      	b.n	8001ce4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c72:	d121      	bne.n	8001cb8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	2b03      	cmp	r3, #3
 8001c78:	d836      	bhi.n	8001ce8 <DMA_CheckFifoParam+0xd8>
 8001c7a:	a201      	add	r2, pc, #4	; (adr r2, 8001c80 <DMA_CheckFifoParam+0x70>)
 8001c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c80:	08001c91 	.word	0x08001c91
 8001c84:	08001c97 	.word	0x08001c97
 8001c88:	08001c91 	.word	0x08001c91
 8001c8c:	08001ca9 	.word	0x08001ca9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	73fb      	strb	r3, [r7, #15]
      break;
 8001c94:	e02f      	b.n	8001cf6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d024      	beq.n	8001cec <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ca6:	e021      	b.n	8001cec <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cb0:	d11e      	bne.n	8001cf0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001cb6:	e01b      	b.n	8001cf0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d902      	bls.n	8001cc4 <DMA_CheckFifoParam+0xb4>
 8001cbe:	2b03      	cmp	r3, #3
 8001cc0:	d003      	beq.n	8001cca <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001cc2:	e018      	b.n	8001cf6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8001cc8:	e015      	b.n	8001cf6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00e      	beq.n	8001cf4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	73fb      	strb	r3, [r7, #15]
      break;
 8001cda:	e00b      	b.n	8001cf4 <DMA_CheckFifoParam+0xe4>
      break;
 8001cdc:	bf00      	nop
 8001cde:	e00a      	b.n	8001cf6 <DMA_CheckFifoParam+0xe6>
      break;
 8001ce0:	bf00      	nop
 8001ce2:	e008      	b.n	8001cf6 <DMA_CheckFifoParam+0xe6>
      break;
 8001ce4:	bf00      	nop
 8001ce6:	e006      	b.n	8001cf6 <DMA_CheckFifoParam+0xe6>
      break;
 8001ce8:	bf00      	nop
 8001cea:	e004      	b.n	8001cf6 <DMA_CheckFifoParam+0xe6>
      break;
 8001cec:	bf00      	nop
 8001cee:	e002      	b.n	8001cf6 <DMA_CheckFifoParam+0xe6>
      break;   
 8001cf0:	bf00      	nop
 8001cf2:	e000      	b.n	8001cf6 <DMA_CheckFifoParam+0xe6>
      break;
 8001cf4:	bf00      	nop
    }
  } 
  
  return status; 
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b089      	sub	sp, #36	; 0x24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
 8001d1e:	e16b      	b.n	8001ff8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d20:	2201      	movs	r2, #1
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	4013      	ands	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	f040 815a 	bne.w	8001ff2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d00b      	beq.n	8001d5e <HAL_GPIO_Init+0x5a>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d007      	beq.n	8001d5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d52:	2b11      	cmp	r3, #17
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b12      	cmp	r3, #18
 8001d5c:	d130      	bne.n	8001dc0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	2203      	movs	r2, #3
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4013      	ands	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	68da      	ldr	r2, [r3, #12]
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d94:	2201      	movs	r2, #1
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	091b      	lsrs	r3, r3, #4
 8001daa:	f003 0201 	and.w	r2, r3, #1
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	2203      	movs	r2, #3
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d003      	beq.n	8001e00 <HAL_GPIO_Init+0xfc>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b12      	cmp	r3, #18
 8001dfe:	d123      	bne.n	8001e48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	08da      	lsrs	r2, r3, #3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3208      	adds	r2, #8
 8001e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	220f      	movs	r2, #15
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	691a      	ldr	r2, [r3, #16]
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	08da      	lsrs	r2, r3, #3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3208      	adds	r2, #8
 8001e42:	69b9      	ldr	r1, [r7, #24]
 8001e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	2203      	movs	r2, #3
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 0203 	and.w	r2, r3, #3
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 80b4 	beq.w	8001ff2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	4b5f      	ldr	r3, [pc, #380]	; (800200c <HAL_GPIO_Init+0x308>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	4a5e      	ldr	r2, [pc, #376]	; (800200c <HAL_GPIO_Init+0x308>)
 8001e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e98:	6453      	str	r3, [r2, #68]	; 0x44
 8001e9a:	4b5c      	ldr	r3, [pc, #368]	; (800200c <HAL_GPIO_Init+0x308>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ea6:	4a5a      	ldr	r2, [pc, #360]	; (8002010 <HAL_GPIO_Init+0x30c>)
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	089b      	lsrs	r3, r3, #2
 8001eac:	3302      	adds	r3, #2
 8001eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	220f      	movs	r2, #15
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a51      	ldr	r2, [pc, #324]	; (8002014 <HAL_GPIO_Init+0x310>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d02b      	beq.n	8001f2a <HAL_GPIO_Init+0x226>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a50      	ldr	r2, [pc, #320]	; (8002018 <HAL_GPIO_Init+0x314>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d025      	beq.n	8001f26 <HAL_GPIO_Init+0x222>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a4f      	ldr	r2, [pc, #316]	; (800201c <HAL_GPIO_Init+0x318>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d01f      	beq.n	8001f22 <HAL_GPIO_Init+0x21e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a4e      	ldr	r2, [pc, #312]	; (8002020 <HAL_GPIO_Init+0x31c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d019      	beq.n	8001f1e <HAL_GPIO_Init+0x21a>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a4d      	ldr	r2, [pc, #308]	; (8002024 <HAL_GPIO_Init+0x320>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d013      	beq.n	8001f1a <HAL_GPIO_Init+0x216>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a4c      	ldr	r2, [pc, #304]	; (8002028 <HAL_GPIO_Init+0x324>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d00d      	beq.n	8001f16 <HAL_GPIO_Init+0x212>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a4b      	ldr	r2, [pc, #300]	; (800202c <HAL_GPIO_Init+0x328>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d007      	beq.n	8001f12 <HAL_GPIO_Init+0x20e>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a4a      	ldr	r2, [pc, #296]	; (8002030 <HAL_GPIO_Init+0x32c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d101      	bne.n	8001f0e <HAL_GPIO_Init+0x20a>
 8001f0a:	2307      	movs	r3, #7
 8001f0c:	e00e      	b.n	8001f2c <HAL_GPIO_Init+0x228>
 8001f0e:	2308      	movs	r3, #8
 8001f10:	e00c      	b.n	8001f2c <HAL_GPIO_Init+0x228>
 8001f12:	2306      	movs	r3, #6
 8001f14:	e00a      	b.n	8001f2c <HAL_GPIO_Init+0x228>
 8001f16:	2305      	movs	r3, #5
 8001f18:	e008      	b.n	8001f2c <HAL_GPIO_Init+0x228>
 8001f1a:	2304      	movs	r3, #4
 8001f1c:	e006      	b.n	8001f2c <HAL_GPIO_Init+0x228>
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e004      	b.n	8001f2c <HAL_GPIO_Init+0x228>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e002      	b.n	8001f2c <HAL_GPIO_Init+0x228>
 8001f26:	2301      	movs	r3, #1
 8001f28:	e000      	b.n	8001f2c <HAL_GPIO_Init+0x228>
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	69fa      	ldr	r2, [r7, #28]
 8001f2e:	f002 0203 	and.w	r2, r2, #3
 8001f32:	0092      	lsls	r2, r2, #2
 8001f34:	4093      	lsls	r3, r2
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f3c:	4934      	ldr	r1, [pc, #208]	; (8002010 <HAL_GPIO_Init+0x30c>)
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	089b      	lsrs	r3, r3, #2
 8001f42:	3302      	adds	r3, #2
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f4a:	4b3a      	ldr	r3, [pc, #232]	; (8002034 <HAL_GPIO_Init+0x330>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4013      	ands	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f6e:	4a31      	ldr	r2, [pc, #196]	; (8002034 <HAL_GPIO_Init+0x330>)
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f74:	4b2f      	ldr	r3, [pc, #188]	; (8002034 <HAL_GPIO_Init+0x330>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f98:	4a26      	ldr	r2, [pc, #152]	; (8002034 <HAL_GPIO_Init+0x330>)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f9e:	4b25      	ldr	r3, [pc, #148]	; (8002034 <HAL_GPIO_Init+0x330>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fc2:	4a1c      	ldr	r2, [pc, #112]	; (8002034 <HAL_GPIO_Init+0x330>)
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <HAL_GPIO_Init+0x330>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fec:	4a11      	ldr	r2, [pc, #68]	; (8002034 <HAL_GPIO_Init+0x330>)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	61fb      	str	r3, [r7, #28]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	2b0f      	cmp	r3, #15
 8001ffc:	f67f ae90 	bls.w	8001d20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002000:	bf00      	nop
 8002002:	3724      	adds	r7, #36	; 0x24
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	40023800 	.word	0x40023800
 8002010:	40013800 	.word	0x40013800
 8002014:	40020000 	.word	0x40020000
 8002018:	40020400 	.word	0x40020400
 800201c:	40020800 	.word	0x40020800
 8002020:	40020c00 	.word	0x40020c00
 8002024:	40021000 	.word	0x40021000
 8002028:	40021400 	.word	0x40021400
 800202c:	40021800 	.word	0x40021800
 8002030:	40021c00 	.word	0x40021c00
 8002034:	40013c00 	.word	0x40013c00

08002038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	807b      	strh	r3, [r7, #2]
 8002044:	4613      	mov	r3, r2
 8002046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002048:	787b      	ldrb	r3, [r7, #1]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800204e:	887a      	ldrh	r2, [r7, #2]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002054:	e003      	b.n	800205e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002056:	887b      	ldrh	r3, [r7, #2]
 8002058:	041a      	lsls	r2, r3, #16
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	619a      	str	r2, [r3, #24]
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800206a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800206c:	b08f      	sub	sp, #60	; 0x3c
 800206e:	af0a      	add	r7, sp, #40	; 0x28
 8002070:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e054      	b.n	8002126 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d106      	bne.n	800209c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f005 fa9e 	bl	80075d8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2203      	movs	r2, #3
 80020a0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d102      	bne.n	80020b6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f003 fb58 	bl	8005770 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	603b      	str	r3, [r7, #0]
 80020c6:	687e      	ldr	r6, [r7, #4]
 80020c8:	466d      	mov	r5, sp
 80020ca:	f106 0410 	add.w	r4, r6, #16
 80020ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020da:	e885 0003 	stmia.w	r5, {r0, r1}
 80020de:	1d33      	adds	r3, r6, #4
 80020e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020e2:	6838      	ldr	r0, [r7, #0]
 80020e4:	f003 fad2 	bl	800568c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2101      	movs	r1, #1
 80020ee:	4618      	mov	r0, r3
 80020f0:	f003 fb4f 	bl	8005792 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	603b      	str	r3, [r7, #0]
 80020fa:	687e      	ldr	r6, [r7, #4]
 80020fc:	466d      	mov	r5, sp
 80020fe:	f106 0410 	add.w	r4, r6, #16
 8002102:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002104:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002106:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002108:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800210a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800210e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002112:	1d33      	adds	r3, r6, #4
 8002114:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002116:	6838      	ldr	r0, [r7, #0]
 8002118:	f003 fc62 	bl	80059e0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800212e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800212e:	b590      	push	{r4, r7, lr}
 8002130:	b089      	sub	sp, #36	; 0x24
 8002132:	af04      	add	r7, sp, #16
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	4608      	mov	r0, r1
 8002138:	4611      	mov	r1, r2
 800213a:	461a      	mov	r2, r3
 800213c:	4603      	mov	r3, r0
 800213e:	70fb      	strb	r3, [r7, #3]
 8002140:	460b      	mov	r3, r1
 8002142:	70bb      	strb	r3, [r7, #2]
 8002144:	4613      	mov	r3, r2
 8002146:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800214e:	2b01      	cmp	r3, #1
 8002150:	d101      	bne.n	8002156 <HAL_HCD_HC_Init+0x28>
 8002152:	2302      	movs	r3, #2
 8002154:	e07f      	b.n	8002256 <HAL_HCD_HC_Init+0x128>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800215e:	78fa      	ldrb	r2, [r7, #3]
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	440b      	add	r3, r1
 800216c:	333d      	adds	r3, #61	; 0x3d
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002172:	78fa      	ldrb	r2, [r7, #3]
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	440b      	add	r3, r1
 8002180:	3338      	adds	r3, #56	; 0x38
 8002182:	787a      	ldrb	r2, [r7, #1]
 8002184:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002186:	78fa      	ldrb	r2, [r7, #3]
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	440b      	add	r3, r1
 8002194:	3340      	adds	r3, #64	; 0x40
 8002196:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002198:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800219a:	78fa      	ldrb	r2, [r7, #3]
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	440b      	add	r3, r1
 80021a8:	3339      	adds	r3, #57	; 0x39
 80021aa:	78fa      	ldrb	r2, [r7, #3]
 80021ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80021ae:	78fa      	ldrb	r2, [r7, #3]
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	440b      	add	r3, r1
 80021bc:	333f      	adds	r3, #63	; 0x3f
 80021be:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80021c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80021c4:	78fa      	ldrb	r2, [r7, #3]
 80021c6:	78bb      	ldrb	r3, [r7, #2]
 80021c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021cc:	b2d8      	uxtb	r0, r3
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	440b      	add	r3, r1
 80021da:	333a      	adds	r3, #58	; 0x3a
 80021dc:	4602      	mov	r2, r0
 80021de:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80021e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	da0a      	bge.n	80021fe <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80021e8:	78fa      	ldrb	r2, [r7, #3]
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	440b      	add	r3, r1
 80021f6:	333b      	adds	r3, #59	; 0x3b
 80021f8:	2201      	movs	r2, #1
 80021fa:	701a      	strb	r2, [r3, #0]
 80021fc:	e009      	b.n	8002212 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80021fe:	78fa      	ldrb	r2, [r7, #3]
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	440b      	add	r3, r1
 800220c:	333b      	adds	r3, #59	; 0x3b
 800220e:	2200      	movs	r2, #0
 8002210:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002212:	78fa      	ldrb	r2, [r7, #3]
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	440b      	add	r3, r1
 8002220:	333c      	adds	r3, #60	; 0x3c
 8002222:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002226:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	787c      	ldrb	r4, [r7, #1]
 800222e:	78ba      	ldrb	r2, [r7, #2]
 8002230:	78f9      	ldrb	r1, [r7, #3]
 8002232:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002234:	9302      	str	r3, [sp, #8]
 8002236:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800223a:	9301      	str	r3, [sp, #4]
 800223c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	4623      	mov	r3, r4
 8002244:	f003 fd0c 	bl	8005c60 <USB_HC_Init>
 8002248:	4603      	mov	r3, r0
 800224a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002254:	7bfb      	ldrb	r3, [r7, #15]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	bd90      	pop	{r4, r7, pc}

0800225e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b084      	sub	sp, #16
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
 8002266:	460b      	mov	r3, r1
 8002268:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <HAL_HCD_HC_Halt+0x1e>
 8002278:	2302      	movs	r3, #2
 800227a:	e00f      	b.n	800229c <HAL_HCD_HC_Halt+0x3e>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	78fa      	ldrb	r2, [r7, #3]
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f003 ff46 	bl	800611e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800229a:	7bfb      	ldrb	r3, [r7, #15]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	4608      	mov	r0, r1
 80022ae:	4611      	mov	r1, r2
 80022b0:	461a      	mov	r2, r3
 80022b2:	4603      	mov	r3, r0
 80022b4:	70fb      	strb	r3, [r7, #3]
 80022b6:	460b      	mov	r3, r1
 80022b8:	70bb      	strb	r3, [r7, #2]
 80022ba:	4613      	mov	r3, r2
 80022bc:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 80022be:	78fa      	ldrb	r2, [r7, #3]
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	440b      	add	r3, r1
 80022cc:	333b      	adds	r3, #59	; 0x3b
 80022ce:	78ba      	ldrb	r2, [r7, #2]
 80022d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80022d2:	78fa      	ldrb	r2, [r7, #3]
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	440b      	add	r3, r1
 80022e0:	333f      	adds	r3, #63	; 0x3f
 80022e2:	787a      	ldrb	r2, [r7, #1]
 80022e4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80022e6:	7c3b      	ldrb	r3, [r7, #16]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10a      	bne.n	8002302 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80022ec:	78fa      	ldrb	r2, [r7, #3]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	440b      	add	r3, r1
 80022fa:	3342      	adds	r3, #66	; 0x42
 80022fc:	2203      	movs	r2, #3
 80022fe:	701a      	strb	r2, [r3, #0]
 8002300:	e009      	b.n	8002316 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002302:	78fa      	ldrb	r2, [r7, #3]
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	440b      	add	r3, r1
 8002310:	3342      	adds	r3, #66	; 0x42
 8002312:	2202      	movs	r2, #2
 8002314:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002316:	787b      	ldrb	r3, [r7, #1]
 8002318:	2b03      	cmp	r3, #3
 800231a:	f200 80d6 	bhi.w	80024ca <HAL_HCD_HC_SubmitRequest+0x226>
 800231e:	a201      	add	r2, pc, #4	; (adr r2, 8002324 <HAL_HCD_HC_SubmitRequest+0x80>)
 8002320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002324:	08002335 	.word	0x08002335
 8002328:	080024b5 	.word	0x080024b5
 800232c:	080023a1 	.word	0x080023a1
 8002330:	0800242b 	.word	0x0800242b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002334:	7c3b      	ldrb	r3, [r7, #16]
 8002336:	2b01      	cmp	r3, #1
 8002338:	f040 80c9 	bne.w	80024ce <HAL_HCD_HC_SubmitRequest+0x22a>
 800233c:	78bb      	ldrb	r3, [r7, #2]
 800233e:	2b00      	cmp	r3, #0
 8002340:	f040 80c5 	bne.w	80024ce <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8002344:	8b3b      	ldrh	r3, [r7, #24]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d109      	bne.n	800235e <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800234a:	78fa      	ldrb	r2, [r7, #3]
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	440b      	add	r3, r1
 8002358:	3351      	adds	r3, #81	; 0x51
 800235a:	2201      	movs	r2, #1
 800235c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800235e:	78fa      	ldrb	r2, [r7, #3]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	440b      	add	r3, r1
 800236c:	3351      	adds	r3, #81	; 0x51
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10a      	bne.n	800238a <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002374:	78fa      	ldrb	r2, [r7, #3]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	440b      	add	r3, r1
 8002382:	3342      	adds	r3, #66	; 0x42
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002388:	e0a1      	b.n	80024ce <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800238a:	78fa      	ldrb	r2, [r7, #3]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	440b      	add	r3, r1
 8002398:	3342      	adds	r3, #66	; 0x42
 800239a:	2202      	movs	r2, #2
 800239c:	701a      	strb	r2, [r3, #0]
      break;
 800239e:	e096      	b.n	80024ce <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80023a0:	78bb      	ldrb	r3, [r7, #2]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d120      	bne.n	80023e8 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023a6:	78fa      	ldrb	r2, [r7, #3]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	440b      	add	r3, r1
 80023b4:	3351      	adds	r3, #81	; 0x51
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10a      	bne.n	80023d2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023bc:	78fa      	ldrb	r2, [r7, #3]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	440b      	add	r3, r1
 80023ca:	3342      	adds	r3, #66	; 0x42
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80023d0:	e07e      	b.n	80024d0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023d2:	78fa      	ldrb	r2, [r7, #3]
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	440b      	add	r3, r1
 80023e0:	3342      	adds	r3, #66	; 0x42
 80023e2:	2202      	movs	r2, #2
 80023e4:	701a      	strb	r2, [r3, #0]
      break;
 80023e6:	e073      	b.n	80024d0 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80023e8:	78fa      	ldrb	r2, [r7, #3]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	440b      	add	r3, r1
 80023f6:	3350      	adds	r3, #80	; 0x50
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10a      	bne.n	8002414 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023fe:	78fa      	ldrb	r2, [r7, #3]
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	440b      	add	r3, r1
 800240c:	3342      	adds	r3, #66	; 0x42
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
      break;
 8002412:	e05d      	b.n	80024d0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002414:	78fa      	ldrb	r2, [r7, #3]
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	440b      	add	r3, r1
 8002422:	3342      	adds	r3, #66	; 0x42
 8002424:	2202      	movs	r2, #2
 8002426:	701a      	strb	r2, [r3, #0]
      break;
 8002428:	e052      	b.n	80024d0 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800242a:	78bb      	ldrb	r3, [r7, #2]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d120      	bne.n	8002472 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002430:	78fa      	ldrb	r2, [r7, #3]
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	440b      	add	r3, r1
 800243e:	3351      	adds	r3, #81	; 0x51
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10a      	bne.n	800245c <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002446:	78fa      	ldrb	r2, [r7, #3]
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	440b      	add	r3, r1
 8002454:	3342      	adds	r3, #66	; 0x42
 8002456:	2200      	movs	r2, #0
 8002458:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800245a:	e039      	b.n	80024d0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800245c:	78fa      	ldrb	r2, [r7, #3]
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	440b      	add	r3, r1
 800246a:	3342      	adds	r3, #66	; 0x42
 800246c:	2202      	movs	r2, #2
 800246e:	701a      	strb	r2, [r3, #0]
      break;
 8002470:	e02e      	b.n	80024d0 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002472:	78fa      	ldrb	r2, [r7, #3]
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	4613      	mov	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	440b      	add	r3, r1
 8002480:	3350      	adds	r3, #80	; 0x50
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10a      	bne.n	800249e <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002488:	78fa      	ldrb	r2, [r7, #3]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	440b      	add	r3, r1
 8002496:	3342      	adds	r3, #66	; 0x42
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
      break;
 800249c:	e018      	b.n	80024d0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800249e:	78fa      	ldrb	r2, [r7, #3]
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	440b      	add	r3, r1
 80024ac:	3342      	adds	r3, #66	; 0x42
 80024ae:	2202      	movs	r2, #2
 80024b0:	701a      	strb	r2, [r3, #0]
      break;
 80024b2:	e00d      	b.n	80024d0 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024b4:	78fa      	ldrb	r2, [r7, #3]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	440b      	add	r3, r1
 80024c2:	3342      	adds	r3, #66	; 0x42
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]
      break;
 80024c8:	e002      	b.n	80024d0 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 80024ca:	bf00      	nop
 80024cc:	e000      	b.n	80024d0 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 80024ce:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80024d0:	78fa      	ldrb	r2, [r7, #3]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	440b      	add	r3, r1
 80024de:	3344      	adds	r3, #68	; 0x44
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	8b39      	ldrh	r1, [r7, #24]
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	4403      	add	r3, r0
 80024f4:	3348      	adds	r3, #72	; 0x48
 80024f6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80024f8:	78fa      	ldrb	r2, [r7, #3]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	440b      	add	r3, r1
 8002506:	335c      	adds	r3, #92	; 0x5c
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800250c:	78fa      	ldrb	r2, [r7, #3]
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	440b      	add	r3, r1
 800251a:	334c      	adds	r3, #76	; 0x4c
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002520:	78fa      	ldrb	r2, [r7, #3]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	440b      	add	r3, r1
 800252e:	3339      	adds	r3, #57	; 0x39
 8002530:	78fa      	ldrb	r2, [r7, #3]
 8002532:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002534:	78fa      	ldrb	r2, [r7, #3]
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	4613      	mov	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	440b      	add	r3, r1
 8002542:	335d      	adds	r3, #93	; 0x5d
 8002544:	2200      	movs	r2, #0
 8002546:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6818      	ldr	r0, [r3, #0]
 800254c:	78fa      	ldrb	r2, [r7, #3]
 800254e:	4613      	mov	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	3338      	adds	r3, #56	; 0x38
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	18d1      	adds	r1, r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	b2db      	uxtb	r3, r3
 8002562:	461a      	mov	r2, r3
 8002564:	f003 fc86 	bl	8005e74 <USB_HC_StartXfer>
 8002568:	4603      	mov	r3, r0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop

08002574 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f003 f9e5 	bl	800595a <USB_GetMode>
 8002590:	4603      	mov	r3, r0
 8002592:	2b01      	cmp	r3, #1
 8002594:	f040 80f1 	bne.w	800277a <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f003 f9c9 	bl	8005934 <USB_ReadInterrupts>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 80e7 	beq.w	8002778 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f003 f9c0 	bl	8005934 <USB_ReadInterrupts>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025be:	d104      	bne.n	80025ca <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80025c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f003 f9b0 	bl	8005934 <USB_ReadInterrupts>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025de:	d104      	bne.n	80025ea <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80025e8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f003 f9a0 	bl	8005934 <USB_ReadInterrupts>
 80025f4:	4603      	mov	r3, r0
 80025f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025fe:	d104      	bne.n	800260a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002608:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f003 f990 	bl	8005934 <USB_ReadInterrupts>
 8002614:	4603      	mov	r3, r0
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b02      	cmp	r3, #2
 800261c:	d103      	bne.n	8002626 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2202      	movs	r2, #2
 8002624:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f003 f982 	bl	8005934 <USB_ReadInterrupts>
 8002630:	4603      	mov	r3, r0
 8002632:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002636:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800263a:	d117      	bne.n	800266c <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800264a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800264e:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f005 f83f 	bl	80076d4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2101      	movs	r1, #1
 800265c:	4618      	mov	r0, r3
 800265e:	f003 fa7b 	bl	8005b58 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800266a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f003 f95f 	bl	8005934 <USB_ReadInterrupts>
 8002676:	4603      	mov	r3, r0
 8002678:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800267c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002680:	d102      	bne.n	8002688 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f001 f8ac 	bl	80037e0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f003 f951 	bl	8005934 <USB_ReadInterrupts>
 8002692:	4603      	mov	r3, r0
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b08      	cmp	r3, #8
 800269a:	d106      	bne.n	80026aa <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f004 fffd 	bl	800769c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2208      	movs	r2, #8
 80026a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f003 f940 	bl	8005934 <USB_ReadInterrupts>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026be:	d138      	bne.n	8002732 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f003 fd19 	bl	80060fc <USB_HC_ReadInterrupt>
 80026ca:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	e025      	b.n	800271e <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f003 030f 	and.w	r3, r3, #15
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	fa22 f303 	lsr.w	r3, r2, r3
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d018      	beq.n	8002718 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	015a      	lsls	r2, r3, #5
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026fc:	d106      	bne.n	800270c <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	b2db      	uxtb	r3, r3
 8002702:	4619      	mov	r1, r3
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f8b3 	bl	8002870 <HCD_HC_IN_IRQHandler>
 800270a:	e005      	b.n	8002718 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	b2db      	uxtb	r3, r3
 8002710:	4619      	mov	r1, r3
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 fc43 	bl	8002f9e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	3301      	adds	r3, #1
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	429a      	cmp	r2, r3
 8002726:	d3d4      	bcc.n	80026d2 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002730:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f003 f8fc 	bl	8005934 <USB_ReadInterrupts>
 800273c:	4603      	mov	r3, r0
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	2b10      	cmp	r3, #16
 8002744:	d101      	bne.n	800274a <HAL_HCD_IRQHandler+0x1d6>
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <HAL_HCD_IRQHandler+0x1d8>
 800274a:	2300      	movs	r3, #0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d014      	beq.n	800277a <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	699a      	ldr	r2, [r3, #24]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0210 	bic.w	r2, r2, #16
 800275e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 ff91 	bl	8003688 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	699a      	ldr	r2, [r3, #24]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f042 0210 	orr.w	r2, r2, #16
 8002774:	619a      	str	r2, [r3, #24]
 8002776:	e000      	b.n	800277a <HAL_HCD_IRQHandler+0x206>
      return;
 8002778:	bf00      	nop
    }
  }
}
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <HAL_HCD_Start+0x16>
 8002792:	2302      	movs	r3, #2
 8002794:	e013      	b.n	80027be <HAL_HCD_Start+0x3e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f002 ffd3 	bl	800574e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2101      	movs	r1, #1
 80027ae:	4618      	mov	r0, r3
 80027b0:	f003 fa0c 	bl	8005bcc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_HCD_Stop+0x16>
 80027d8:	2302      	movs	r3, #2
 80027da:	e00d      	b.n	80027f8 <HAL_HCD_Stop+0x32>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f003 fdd3 	bl	8006394 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800280c:	78fa      	ldrb	r2, [r7, #3]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	440b      	add	r3, r1
 800281a:	335c      	adds	r3, #92	; 0x5c
 800281c:	781b      	ldrb	r3, [r3, #0]
}
 800281e:	4618      	mov	r0, r3
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	460b      	mov	r3, r1
 8002834:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002836:	78fa      	ldrb	r2, [r7, #3]
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	4613      	mov	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	440b      	add	r3, r1
 8002844:	334c      	adds	r3, #76	; 0x4c
 8002846:	681b      	ldr	r3, [r3, #0]
}
 8002848:	4618      	mov	r0, r3
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f003 f9ec 	bl	8005c3e <USB_GetCurrentFrame>
 8002866:	4603      	mov	r3, r0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002886:	78fb      	ldrb	r3, [r7, #3]
 8002888:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4413      	add	r3, r2
 8002892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b04      	cmp	r3, #4
 800289e:	d119      	bne.n	80028d4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	015a      	lsls	r2, r3, #5
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	4413      	add	r3, r2
 80028a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ac:	461a      	mov	r2, r3
 80028ae:	2304      	movs	r3, #4
 80028b0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	015a      	lsls	r2, r3, #5
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	4413      	add	r3, r2
 80028ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	0151      	lsls	r1, r2, #5
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	440a      	add	r2, r1
 80028c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028cc:	f043 0302 	orr.w	r3, r3, #2
 80028d0:	60d3      	str	r3, [r2, #12]
 80028d2:	e095      	b.n	8002a00 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 0320 	and.w	r3, r3, #32
 80028e6:	2b20      	cmp	r3, #32
 80028e8:	d109      	bne.n	80028fe <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	015a      	lsls	r2, r3, #5
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f6:	461a      	mov	r2, r3
 80028f8:	2320      	movs	r3, #32
 80028fa:	6093      	str	r3, [r2, #8]
 80028fc:	e080      	b.n	8002a00 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	015a      	lsls	r2, r3, #5
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4413      	add	r3, r2
 8002906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	2b08      	cmp	r3, #8
 8002912:	d134      	bne.n	800297e <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	015a      	lsls	r2, r3, #5
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4413      	add	r3, r2
 800291c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	0151      	lsls	r1, r2, #5
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	440a      	add	r2, r1
 800292a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800292e:	f043 0302 	orr.w	r3, r3, #2
 8002932:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	440b      	add	r3, r1
 8002942:	335d      	adds	r3, #93	; 0x5d
 8002944:	2205      	movs	r2, #5
 8002946:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	015a      	lsls	r2, r3, #5
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	4413      	add	r3, r2
 8002950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002954:	461a      	mov	r2, r3
 8002956:	2310      	movs	r3, #16
 8002958:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	015a      	lsls	r2, r3, #5
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4413      	add	r3, r2
 8002962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002966:	461a      	mov	r2, r3
 8002968:	2308      	movs	r3, #8
 800296a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	4611      	mov	r1, r2
 8002976:	4618      	mov	r0, r3
 8002978:	f003 fbd1 	bl	800611e <USB_HC_Halt>
 800297c:	e040      	b.n	8002a00 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	015a      	lsls	r2, r3, #5
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	4413      	add	r3, r2
 8002986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002994:	d134      	bne.n	8002a00 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	015a      	lsls	r2, r3, #5
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4413      	add	r3, r2
 800299e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	0151      	lsls	r1, r2, #5
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	440a      	add	r2, r1
 80029ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029b0:	f043 0302 	orr.w	r3, r3, #2
 80029b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	4611      	mov	r1, r2
 80029c0:	4618      	mov	r0, r3
 80029c2:	f003 fbac 	bl	800611e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	015a      	lsls	r2, r3, #5
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d2:	461a      	mov	r2, r3
 80029d4:	2310      	movs	r3, #16
 80029d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	440b      	add	r3, r1
 80029e6:	335d      	adds	r3, #93	; 0x5d
 80029e8:	2208      	movs	r2, #8
 80029ea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	015a      	lsls	r2, r3, #5
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4413      	add	r3, r2
 80029f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f8:	461a      	mov	r2, r3
 80029fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029fe:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	015a      	lsls	r2, r3, #5
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4413      	add	r3, r2
 8002a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a16:	d122      	bne.n	8002a5e <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	0151      	lsls	r1, r2, #5
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	440a      	add	r2, r1
 8002a2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a32:	f043 0302 	orr.w	r3, r3, #2
 8002a36:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	4611      	mov	r1, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f003 fb6b 	bl	800611e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	015a      	lsls	r2, r3, #5
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a54:	461a      	mov	r2, r3
 8002a56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a5a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002a5c:	e29b      	b.n	8002f96 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	015a      	lsls	r2, r3, #5
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	4413      	add	r3, r2
 8002a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	f040 80c1 	bne.w	8002bf8 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d01b      	beq.n	8002ab6 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	440b      	add	r3, r1
 8002a8c:	3348      	adds	r3, #72	; 0x48
 8002a8e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	0159      	lsls	r1, r3, #5
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	440b      	add	r3, r1
 8002a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002aa2:	1ad1      	subs	r1, r2, r3
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4403      	add	r3, r0
 8002ab2:	334c      	adds	r3, #76	; 0x4c
 8002ab4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4613      	mov	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	440b      	add	r3, r1
 8002ac4:	335d      	adds	r3, #93	; 0x5d
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	440b      	add	r3, r1
 8002ad8:	3358      	adds	r3, #88	; 0x58
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	015a      	lsls	r2, r3, #5
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aea:	461a      	mov	r2, r3
 8002aec:	2301      	movs	r3, #1
 8002aee:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	440b      	add	r3, r1
 8002afe:	333f      	adds	r3, #63	; 0x3f
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00a      	beq.n	8002b1c <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	440b      	add	r3, r1
 8002b14:	333f      	adds	r3, #63	; 0x3f
 8002b16:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d121      	bne.n	8002b60 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	0151      	lsls	r1, r2, #5
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	440a      	add	r2, r1
 8002b32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b36:	f043 0302 	orr.w	r3, r3, #2
 8002b3a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	4611      	mov	r1, r2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f003 fae9 	bl	800611e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	015a      	lsls	r2, r3, #5
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b58:	461a      	mov	r2, r3
 8002b5a:	2310      	movs	r3, #16
 8002b5c:	6093      	str	r3, [r2, #8]
 8002b5e:	e034      	b.n	8002bca <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	4613      	mov	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	440b      	add	r3, r1
 8002b6e:	333f      	adds	r3, #63	; 0x3f
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	d129      	bne.n	8002bca <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	015a      	lsls	r2, r3, #5
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	0151      	lsls	r1, r2, #5
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	440a      	add	r2, r1
 8002b8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b94:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	440b      	add	r3, r1
 8002ba4:	335c      	adds	r3, #92	; 0x5c
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	b2d8      	uxtb	r0, r3
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	440b      	add	r3, r1
 8002bbc:	335c      	adds	r3, #92	; 0x5c
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4601      	mov	r1, r0
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f004 fd93 	bl	80076f0 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	440b      	add	r3, r1
 8002bd8:	3350      	adds	r3, #80	; 0x50
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	f083 0301 	eor.w	r3, r3, #1
 8002be0:	b2d8      	uxtb	r0, r3
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	440b      	add	r3, r1
 8002bf0:	3350      	adds	r3, #80	; 0x50
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	701a      	strb	r2, [r3, #0]
}
 8002bf6:	e1ce      	b.n	8002f96 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	015a      	lsls	r2, r3, #5
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	4413      	add	r3, r2
 8002c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	f040 80f1 	bne.w	8002df2 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	0151      	lsls	r1, r2, #5
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	440a      	add	r2, r1
 8002c26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c2a:	f023 0302 	bic.w	r3, r3, #2
 8002c2e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4613      	mov	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	440b      	add	r3, r1
 8002c3e:	335d      	adds	r3, #93	; 0x5d
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d10a      	bne.n	8002c5c <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	440b      	add	r3, r1
 8002c54:	335c      	adds	r3, #92	; 0x5c
 8002c56:	2201      	movs	r2, #1
 8002c58:	701a      	strb	r2, [r3, #0]
 8002c5a:	e0b0      	b.n	8002dbe <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	440b      	add	r3, r1
 8002c6a:	335d      	adds	r3, #93	; 0x5d
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b05      	cmp	r3, #5
 8002c70:	d10a      	bne.n	8002c88 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	440b      	add	r3, r1
 8002c80:	335c      	adds	r3, #92	; 0x5c
 8002c82:	2205      	movs	r2, #5
 8002c84:	701a      	strb	r2, [r3, #0]
 8002c86:	e09a      	b.n	8002dbe <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	440b      	add	r3, r1
 8002c96:	335d      	adds	r3, #93	; 0x5d
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b06      	cmp	r3, #6
 8002c9c:	d00a      	beq.n	8002cb4 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	440b      	add	r3, r1
 8002cac:	335d      	adds	r3, #93	; 0x5d
 8002cae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d156      	bne.n	8002d62 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	440b      	add	r3, r1
 8002cc2:	3358      	adds	r3, #88	; 0x58
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	1c59      	adds	r1, r3, #1
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	4403      	add	r3, r0
 8002cd6:	3358      	adds	r3, #88	; 0x58
 8002cd8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	440b      	add	r3, r1
 8002ce8:	3358      	adds	r3, #88	; 0x58
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d914      	bls.n	8002d1a <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	440b      	add	r3, r1
 8002cfe:	3358      	adds	r3, #88	; 0x58
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	440b      	add	r3, r1
 8002d12:	335c      	adds	r3, #92	; 0x5c
 8002d14:	2204      	movs	r2, #4
 8002d16:	701a      	strb	r2, [r3, #0]
 8002d18:	e009      	b.n	8002d2e <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	440b      	add	r3, r1
 8002d28:	335c      	adds	r3, #92	; 0x5c
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	015a      	lsls	r2, r3, #5
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d44:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d4c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	015a      	lsls	r2, r3, #5
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	e02d      	b.n	8002dbe <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4613      	mov	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	440b      	add	r3, r1
 8002d70:	335d      	adds	r3, #93	; 0x5d
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d122      	bne.n	8002dbe <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	440b      	add	r3, r1
 8002d86:	335c      	adds	r3, #92	; 0x5c
 8002d88:	2202      	movs	r2, #2
 8002d8a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002da2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002daa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	015a      	lsls	r2, r3, #5
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	4413      	add	r3, r2
 8002db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db8:	461a      	mov	r2, r3
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	015a      	lsls	r2, r3, #5
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dca:	461a      	mov	r2, r3
 8002dcc:	2302      	movs	r3, #2
 8002dce:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	b2d8      	uxtb	r0, r3
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	440b      	add	r3, r1
 8002de2:	335c      	adds	r3, #92	; 0x5c
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	461a      	mov	r2, r3
 8002de8:	4601      	mov	r1, r0
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f004 fc80 	bl	80076f0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002df0:	e0d1      	b.n	8002f96 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	015a      	lsls	r2, r3, #5
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e04:	2b80      	cmp	r3, #128	; 0x80
 8002e06:	d13e      	bne.n	8002e86 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	0151      	lsls	r1, r2, #5
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	440a      	add	r2, r1
 8002e1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e22:	f043 0302 	orr.w	r3, r3, #2
 8002e26:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	440b      	add	r3, r1
 8002e36:	3358      	adds	r3, #88	; 0x58
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	1c59      	adds	r1, r3, #1
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	4403      	add	r3, r0
 8002e4a:	3358      	adds	r3, #88	; 0x58
 8002e4c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	4613      	mov	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	440b      	add	r3, r1
 8002e5c:	335d      	adds	r3, #93	; 0x5d
 8002e5e:	2206      	movs	r2, #6
 8002e60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f003 f956 	bl	800611e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	015a      	lsls	r2, r3, #5
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4413      	add	r3, r2
 8002e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7e:	461a      	mov	r2, r3
 8002e80:	2380      	movs	r3, #128	; 0x80
 8002e82:	6093      	str	r3, [r2, #8]
}
 8002e84:	e087      	b.n	8002f96 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	015a      	lsls	r2, r3, #5
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 0310 	and.w	r3, r3, #16
 8002e98:	2b10      	cmp	r3, #16
 8002e9a:	d17c      	bne.n	8002f96 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	440b      	add	r3, r1
 8002eaa:	333f      	adds	r3, #63	; 0x3f
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b03      	cmp	r3, #3
 8002eb0:	d122      	bne.n	8002ef8 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	440b      	add	r3, r1
 8002ec0:	3358      	adds	r3, #88	; 0x58
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	015a      	lsls	r2, r3, #5
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4413      	add	r3, r2
 8002ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	0151      	lsls	r1, r2, #5
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	440a      	add	r2, r1
 8002edc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ee0:	f043 0302 	orr.w	r3, r3, #2
 8002ee4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	4611      	mov	r1, r2
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f003 f914 	bl	800611e <USB_HC_Halt>
 8002ef6:	e045      	b.n	8002f84 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	4613      	mov	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	440b      	add	r3, r1
 8002f06:	333f      	adds	r3, #63	; 0x3f
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00a      	beq.n	8002f24 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	440b      	add	r3, r1
 8002f1c:	333f      	adds	r3, #63	; 0x3f
 8002f1e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d12f      	bne.n	8002f84 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	440b      	add	r3, r1
 8002f32:	3358      	adds	r3, #88	; 0x58
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d121      	bne.n	8002f84 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	440b      	add	r3, r1
 8002f4e:	335d      	adds	r3, #93	; 0x5d
 8002f50:	2203      	movs	r2, #3
 8002f52:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	0151      	lsls	r1, r2, #5
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	440a      	add	r2, r1
 8002f6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f6e:	f043 0302 	orr.w	r3, r3, #2
 8002f72:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f003 f8cd 	bl	800611e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	015a      	lsls	r2, r3, #5
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f90:	461a      	mov	r2, r3
 8002f92:	2310      	movs	r3, #16
 8002f94:	6093      	str	r3, [r2, #8]
}
 8002f96:	bf00      	nop
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b086      	sub	sp, #24
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	015a      	lsls	r2, r3, #5
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 0304 	and.w	r3, r3, #4
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d119      	bne.n	8003002 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	015a      	lsls	r2, r3, #5
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fda:	461a      	mov	r2, r3
 8002fdc:	2304      	movs	r3, #4
 8002fde:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	015a      	lsls	r2, r3, #5
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	0151      	lsls	r1, r2, #5
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	440a      	add	r2, r1
 8002ff6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ffa:	f043 0302 	orr.w	r3, r3, #2
 8002ffe:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003000:	e33e      	b.n	8003680 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	015a      	lsls	r2, r3, #5
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4413      	add	r3, r2
 800300a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 0320 	and.w	r3, r3, #32
 8003014:	2b20      	cmp	r3, #32
 8003016:	d141      	bne.n	800309c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	4413      	add	r3, r2
 8003020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003024:	461a      	mov	r2, r3
 8003026:	2320      	movs	r3, #32
 8003028:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	4613      	mov	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	440b      	add	r3, r1
 8003038:	333d      	adds	r3, #61	; 0x3d
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b01      	cmp	r3, #1
 800303e:	f040 831f 	bne.w	8003680 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	4613      	mov	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	440b      	add	r3, r1
 8003050:	333d      	adds	r3, #61	; 0x3d
 8003052:	2200      	movs	r2, #0
 8003054:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4613      	mov	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	440b      	add	r3, r1
 8003064:	335c      	adds	r3, #92	; 0x5c
 8003066:	2202      	movs	r2, #2
 8003068:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	4413      	add	r3, r2
 8003072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	0151      	lsls	r1, r2, #5
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	440a      	add	r2, r1
 8003080:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003084:	f043 0302 	orr.w	r3, r3, #2
 8003088:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	4611      	mov	r1, r2
 8003094:	4618      	mov	r0, r3
 8003096:	f003 f842 	bl	800611e <USB_HC_Halt>
}
 800309a:	e2f1      	b.n	8003680 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	015a      	lsls	r2, r3, #5
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	4413      	add	r3, r2
 80030a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ae:	2b40      	cmp	r3, #64	; 0x40
 80030b0:	d13f      	bne.n	8003132 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	4613      	mov	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	440b      	add	r3, r1
 80030c0:	335d      	adds	r3, #93	; 0x5d
 80030c2:	2204      	movs	r2, #4
 80030c4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	4613      	mov	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	440b      	add	r3, r1
 80030d4:	333d      	adds	r3, #61	; 0x3d
 80030d6:	2201      	movs	r2, #1
 80030d8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	440b      	add	r3, r1
 80030e8:	3358      	adds	r3, #88	; 0x58
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	015a      	lsls	r2, r3, #5
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4413      	add	r3, r2
 80030f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	0151      	lsls	r1, r2, #5
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	440a      	add	r2, r1
 8003104:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003108:	f043 0302 	orr.w	r3, r3, #2
 800310c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	4611      	mov	r1, r2
 8003118:	4618      	mov	r0, r3
 800311a:	f003 f800 	bl	800611e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	015a      	lsls	r2, r3, #5
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4413      	add	r3, r2
 8003126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312a:	461a      	mov	r2, r3
 800312c:	2340      	movs	r3, #64	; 0x40
 800312e:	6093      	str	r3, [r2, #8]
}
 8003130:	e2a6      	b.n	8003680 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	015a      	lsls	r2, r3, #5
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	4413      	add	r3, r2
 800313a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003148:	d122      	bne.n	8003190 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	015a      	lsls	r2, r3, #5
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	4413      	add	r3, r2
 8003152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	0151      	lsls	r1, r2, #5
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	440a      	add	r2, r1
 8003160:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003164:	f043 0302 	orr.w	r3, r3, #2
 8003168:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	4611      	mov	r1, r2
 8003174:	4618      	mov	r0, r3
 8003176:	f002 ffd2 	bl	800611e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4413      	add	r3, r2
 8003182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003186:	461a      	mov	r2, r3
 8003188:	f44f 7300 	mov.w	r3, #512	; 0x200
 800318c:	6093      	str	r3, [r2, #8]
}
 800318e:	e277      	b.n	8003680 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	015a      	lsls	r2, r3, #5
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	4413      	add	r3, r2
 8003198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d135      	bne.n	8003212 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	440b      	add	r3, r1
 80031b4:	3358      	adds	r3, #88	; 0x58
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	015a      	lsls	r2, r3, #5
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	0151      	lsls	r1, r2, #5
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	440a      	add	r2, r1
 80031d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031d4:	f043 0302 	orr.w	r3, r3, #2
 80031d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	4611      	mov	r1, r2
 80031e4:	4618      	mov	r0, r3
 80031e6:	f002 ff9a 	bl	800611e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f6:	461a      	mov	r2, r3
 80031f8:	2301      	movs	r3, #1
 80031fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	4613      	mov	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	440b      	add	r3, r1
 800320a:	335d      	adds	r3, #93	; 0x5d
 800320c:	2201      	movs	r2, #1
 800320e:	701a      	strb	r2, [r3, #0]
}
 8003210:	e236      	b.n	8003680 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	015a      	lsls	r2, r3, #5
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4413      	add	r3, r2
 800321a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 0308 	and.w	r3, r3, #8
 8003224:	2b08      	cmp	r3, #8
 8003226:	d12b      	bne.n	8003280 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4413      	add	r3, r2
 8003230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003234:	461a      	mov	r2, r3
 8003236:	2308      	movs	r3, #8
 8003238:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	015a      	lsls	r2, r3, #5
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	4413      	add	r3, r2
 8003242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	0151      	lsls	r1, r2, #5
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	440a      	add	r2, r1
 8003250:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003254:	f043 0302 	orr.w	r3, r3, #2
 8003258:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	4611      	mov	r1, r2
 8003264:	4618      	mov	r0, r3
 8003266:	f002 ff5a 	bl	800611e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	4613      	mov	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	440b      	add	r3, r1
 8003278:	335d      	adds	r3, #93	; 0x5d
 800327a:	2205      	movs	r2, #5
 800327c:	701a      	strb	r2, [r3, #0]
}
 800327e:	e1ff      	b.n	8003680 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	015a      	lsls	r2, r3, #5
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	4413      	add	r3, r2
 8003288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 0310 	and.w	r3, r3, #16
 8003292:	2b10      	cmp	r3, #16
 8003294:	d155      	bne.n	8003342 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4613      	mov	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	440b      	add	r3, r1
 80032a4:	3358      	adds	r3, #88	; 0x58
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	4613      	mov	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	440b      	add	r3, r1
 80032b8:	335d      	adds	r3, #93	; 0x5d
 80032ba:	2203      	movs	r2, #3
 80032bc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4613      	mov	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	440b      	add	r3, r1
 80032cc:	333d      	adds	r3, #61	; 0x3d
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d114      	bne.n	80032fe <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4613      	mov	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	440b      	add	r3, r1
 80032e2:	333c      	adds	r3, #60	; 0x3c
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d109      	bne.n	80032fe <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	440b      	add	r3, r1
 80032f8:	333d      	adds	r3, #61	; 0x3d
 80032fa:	2201      	movs	r2, #1
 80032fc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	015a      	lsls	r2, r3, #5
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	4413      	add	r3, r2
 8003306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	0151      	lsls	r1, r2, #5
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	440a      	add	r2, r1
 8003314:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003318:	f043 0302 	orr.w	r3, r3, #2
 800331c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	4611      	mov	r1, r2
 8003328:	4618      	mov	r0, r3
 800332a:	f002 fef8 	bl	800611e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	4413      	add	r3, r2
 8003336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333a:	461a      	mov	r2, r3
 800333c:	2310      	movs	r3, #16
 800333e:	6093      	str	r3, [r2, #8]
}
 8003340:	e19e      	b.n	8003680 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	015a      	lsls	r2, r3, #5
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4413      	add	r3, r2
 800334a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003354:	2b80      	cmp	r3, #128	; 0x80
 8003356:	d12b      	bne.n	80033b0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	015a      	lsls	r2, r3, #5
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4413      	add	r3, r2
 8003360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	0151      	lsls	r1, r2, #5
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	440a      	add	r2, r1
 800336e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003372:	f043 0302 	orr.w	r3, r3, #2
 8003376:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	4611      	mov	r1, r2
 8003382:	4618      	mov	r0, r3
 8003384:	f002 fecb 	bl	800611e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	4613      	mov	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	440b      	add	r3, r1
 8003396:	335d      	adds	r3, #93	; 0x5d
 8003398:	2206      	movs	r2, #6
 800339a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	015a      	lsls	r2, r3, #5
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	4413      	add	r3, r2
 80033a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a8:	461a      	mov	r2, r3
 80033aa:	2380      	movs	r3, #128	; 0x80
 80033ac:	6093      	str	r3, [r2, #8]
}
 80033ae:	e167      	b.n	8003680 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033c6:	d135      	bne.n	8003434 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	015a      	lsls	r2, r3, #5
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	0151      	lsls	r1, r2, #5
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	440a      	add	r2, r1
 80033de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033e2:	f043 0302 	orr.w	r3, r3, #2
 80033e6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	4611      	mov	r1, r2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f002 fe93 	bl	800611e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003404:	461a      	mov	r2, r3
 8003406:	2310      	movs	r3, #16
 8003408:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	015a      	lsls	r2, r3, #5
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	4413      	add	r3, r2
 8003412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003416:	461a      	mov	r2, r3
 8003418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800341c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	4613      	mov	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	440b      	add	r3, r1
 800342c:	335d      	adds	r3, #93	; 0x5d
 800342e:	2208      	movs	r2, #8
 8003430:	701a      	strb	r2, [r3, #0]
}
 8003432:	e125      	b.n	8003680 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	4413      	add	r3, r2
 800343c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b02      	cmp	r3, #2
 8003448:	f040 811a 	bne.w	8003680 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	015a      	lsls	r2, r3, #5
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	4413      	add	r3, r2
 8003454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	0151      	lsls	r1, r2, #5
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	440a      	add	r2, r1
 8003462:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003466:	f023 0302 	bic.w	r3, r3, #2
 800346a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	440b      	add	r3, r1
 800347a:	335d      	adds	r3, #93	; 0x5d
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d137      	bne.n	80034f2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	4613      	mov	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	440b      	add	r3, r1
 8003490:	335c      	adds	r3, #92	; 0x5c
 8003492:	2201      	movs	r2, #1
 8003494:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	4613      	mov	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	440b      	add	r3, r1
 80034a4:	333f      	adds	r3, #63	; 0x3f
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d00b      	beq.n	80034c4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	4613      	mov	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	440b      	add	r3, r1
 80034ba:	333f      	adds	r3, #63	; 0x3f
 80034bc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80034be:	2b03      	cmp	r3, #3
 80034c0:	f040 80c5 	bne.w	800364e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	4613      	mov	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	440b      	add	r3, r1
 80034d2:	3351      	adds	r3, #81	; 0x51
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	f083 0301 	eor.w	r3, r3, #1
 80034da:	b2d8      	uxtb	r0, r3
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	440b      	add	r3, r1
 80034ea:	3351      	adds	r3, #81	; 0x51
 80034ec:	4602      	mov	r2, r0
 80034ee:	701a      	strb	r2, [r3, #0]
 80034f0:	e0ad      	b.n	800364e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	440b      	add	r3, r1
 8003500:	335d      	adds	r3, #93	; 0x5d
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b03      	cmp	r3, #3
 8003506:	d10a      	bne.n	800351e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	440b      	add	r3, r1
 8003516:	335c      	adds	r3, #92	; 0x5c
 8003518:	2202      	movs	r2, #2
 800351a:	701a      	strb	r2, [r3, #0]
 800351c:	e097      	b.n	800364e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	440b      	add	r3, r1
 800352c:	335d      	adds	r3, #93	; 0x5d
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b04      	cmp	r3, #4
 8003532:	d10a      	bne.n	800354a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	440b      	add	r3, r1
 8003542:	335c      	adds	r3, #92	; 0x5c
 8003544:	2202      	movs	r2, #2
 8003546:	701a      	strb	r2, [r3, #0]
 8003548:	e081      	b.n	800364e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	4613      	mov	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	440b      	add	r3, r1
 8003558:	335d      	adds	r3, #93	; 0x5d
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b05      	cmp	r3, #5
 800355e:	d10a      	bne.n	8003576 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	440b      	add	r3, r1
 800356e:	335c      	adds	r3, #92	; 0x5c
 8003570:	2205      	movs	r2, #5
 8003572:	701a      	strb	r2, [r3, #0]
 8003574:	e06b      	b.n	800364e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4613      	mov	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4413      	add	r3, r2
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	440b      	add	r3, r1
 8003584:	335d      	adds	r3, #93	; 0x5d
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	2b06      	cmp	r3, #6
 800358a:	d00a      	beq.n	80035a2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800358c:	6879      	ldr	r1, [r7, #4]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4613      	mov	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	440b      	add	r3, r1
 800359a:	335d      	adds	r3, #93	; 0x5d
 800359c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800359e:	2b08      	cmp	r3, #8
 80035a0:	d155      	bne.n	800364e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	440b      	add	r3, r1
 80035b0:	3358      	adds	r3, #88	; 0x58
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	1c59      	adds	r1, r3, #1
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	4613      	mov	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4413      	add	r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	4403      	add	r3, r0
 80035c4:	3358      	adds	r3, #88	; 0x58
 80035c6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	4613      	mov	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	440b      	add	r3, r1
 80035d6:	3358      	adds	r3, #88	; 0x58
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b03      	cmp	r3, #3
 80035dc:	d914      	bls.n	8003608 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	4613      	mov	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	440b      	add	r3, r1
 80035ec:	3358      	adds	r3, #88	; 0x58
 80035ee:	2200      	movs	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	4613      	mov	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	440b      	add	r3, r1
 8003600:	335c      	adds	r3, #92	; 0x5c
 8003602:	2204      	movs	r2, #4
 8003604:	701a      	strb	r2, [r3, #0]
 8003606:	e009      	b.n	800361c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003608:	6879      	ldr	r1, [r7, #4]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	440b      	add	r3, r1
 8003616:	335c      	adds	r3, #92	; 0x5c
 8003618:	2202      	movs	r2, #2
 800361a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4413      	add	r3, r2
 8003624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003632:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800363a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	4413      	add	r3, r2
 8003644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003648:	461a      	mov	r2, r3
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	015a      	lsls	r2, r3, #5
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	4413      	add	r3, r2
 8003656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365a:	461a      	mov	r2, r3
 800365c:	2302      	movs	r3, #2
 800365e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	b2d8      	uxtb	r0, r3
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	440b      	add	r3, r1
 8003672:	335c      	adds	r3, #92	; 0x5c
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	461a      	mov	r2, r3
 8003678:	4601      	mov	r1, r0
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f004 f838 	bl	80076f0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003680:	bf00      	nop
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08a      	sub	sp, #40	; 0x28
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	f003 030f 	and.w	r3, r3, #15
 80036a8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	0c5b      	lsrs	r3, r3, #17
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	091b      	lsrs	r3, r3, #4
 80036b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036bc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d003      	beq.n	80036cc <HCD_RXQLVL_IRQHandler+0x44>
 80036c4:	2b05      	cmp	r3, #5
 80036c6:	f000 8082 	beq.w	80037ce <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80036ca:	e083      	b.n	80037d4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d07f      	beq.n	80037d2 <HCD_RXQLVL_IRQHandler+0x14a>
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	4613      	mov	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	440b      	add	r3, r1
 80036e0:	3344      	adds	r3, #68	; 0x44
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d074      	beq.n	80037d2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6818      	ldr	r0, [r3, #0]
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	4613      	mov	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	440b      	add	r3, r1
 80036fa:	3344      	adds	r3, #68	; 0x44
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	b292      	uxth	r2, r2
 8003702:	4619      	mov	r1, r3
 8003704:	f002 f8ed 	bl	80058e2 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	4613      	mov	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	440b      	add	r3, r1
 8003716:	3344      	adds	r3, #68	; 0x44
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	18d1      	adds	r1, r2, r3
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4613      	mov	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	4403      	add	r3, r0
 800372c:	3344      	adds	r3, #68	; 0x44
 800372e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4613      	mov	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	440b      	add	r3, r1
 800373e:	334c      	adds	r3, #76	; 0x4c
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	18d1      	adds	r1, r2, r3
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4613      	mov	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4403      	add	r3, r0
 8003754:	334c      	adds	r3, #76	; 0x4c
 8003756:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	4413      	add	r3, r2
 8003760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003764:	691a      	ldr	r2, [r3, #16]
 8003766:	4b1d      	ldr	r3, [pc, #116]	; (80037dc <HCD_RXQLVL_IRQHandler+0x154>)
 8003768:	4013      	ands	r3, r2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d031      	beq.n	80037d2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	015a      	lsls	r2, r3, #5
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	4413      	add	r3, r2
 8003776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003784:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800378c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	4413      	add	r3, r2
 8003796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379a:	461a      	mov	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80037a0:	6879      	ldr	r1, [r7, #4]
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4613      	mov	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	440b      	add	r3, r1
 80037ae:	3350      	adds	r3, #80	; 0x50
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	f083 0301 	eor.w	r3, r3, #1
 80037b6:	b2d8      	uxtb	r0, r3
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	440b      	add	r3, r1
 80037c6:	3350      	adds	r3, #80	; 0x50
 80037c8:	4602      	mov	r2, r0
 80037ca:	701a      	strb	r2, [r3, #0]
      break;
 80037cc:	e001      	b.n	80037d2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80037ce:	bf00      	nop
 80037d0:	e000      	b.n	80037d4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80037d2:	bf00      	nop
  }
}
 80037d4:	bf00      	nop
 80037d6:	3728      	adds	r7, #40	; 0x28
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	1ff80000 	.word	0x1ff80000

080037e0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800380c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b02      	cmp	r3, #2
 8003816:	d113      	bne.n	8003840 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b01      	cmp	r3, #1
 8003820:	d10a      	bne.n	8003838 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	699a      	ldr	r2, [r3, #24]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003830:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f003 ff40 	bl	80076b8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f043 0302 	orr.w	r3, r3, #2
 800383e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	2b08      	cmp	r3, #8
 8003848:	d147      	bne.n	80038da <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f043 0308 	orr.w	r3, r3, #8
 8003850:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b04      	cmp	r3, #4
 800385a:	d129      	bne.n	80038b0 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	2b02      	cmp	r3, #2
 8003862:	d113      	bne.n	800388c <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800386a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800386e:	d106      	bne.n	800387e <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2102      	movs	r1, #2
 8003876:	4618      	mov	r0, r3
 8003878:	f002 f96e 	bl	8005b58 <USB_InitFSLSPClkSel>
 800387c:	e011      	b.n	80038a2 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2101      	movs	r1, #1
 8003884:	4618      	mov	r0, r3
 8003886:	f002 f967 	bl	8005b58 <USB_InitFSLSPClkSel>
 800388a:	e00a      	b.n	80038a2 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d106      	bne.n	80038a2 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800389a:	461a      	mov	r2, r3
 800389c:	f64e 2360 	movw	r3, #60000	; 0xea60
 80038a0:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f003 ff32 	bl	800770c <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f003 ff05 	bl	80076b8 <HAL_HCD_Connect_Callback>
 80038ae:	e014      	b.n	80038da <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f003 ff39 	bl	8007728 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80038c4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80038c8:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	699a      	ldr	r2, [r3, #24]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80038d8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f003 0320 	and.w	r3, r3, #32
 80038e0:	2b20      	cmp	r3, #32
 80038e2:	d103      	bne.n	80038ec <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	f043 0320 	orr.w	r3, r3, #32
 80038ea:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038f2:	461a      	mov	r2, r3
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	6013      	str	r3, [r2, #0]
}
 80038f8:	bf00      	nop
 80038fa:	3718      	adds	r7, #24
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e11f      	b.n	8003b52 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7fd faf2 	bl	8000f10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2224      	movs	r2, #36	; 0x24
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0201 	bic.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003952:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003962:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003964:	f001 f9de 	bl	8004d24 <HAL_RCC_GetPCLK1Freq>
 8003968:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	4a7b      	ldr	r2, [pc, #492]	; (8003b5c <HAL_I2C_Init+0x25c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d807      	bhi.n	8003984 <HAL_I2C_Init+0x84>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4a7a      	ldr	r2, [pc, #488]	; (8003b60 <HAL_I2C_Init+0x260>)
 8003978:	4293      	cmp	r3, r2
 800397a:	bf94      	ite	ls
 800397c:	2301      	movls	r3, #1
 800397e:	2300      	movhi	r3, #0
 8003980:	b2db      	uxtb	r3, r3
 8003982:	e006      	b.n	8003992 <HAL_I2C_Init+0x92>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4a77      	ldr	r2, [pc, #476]	; (8003b64 <HAL_I2C_Init+0x264>)
 8003988:	4293      	cmp	r3, r2
 800398a:	bf94      	ite	ls
 800398c:	2301      	movls	r3, #1
 800398e:	2300      	movhi	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e0db      	b.n	8003b52 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	4a72      	ldr	r2, [pc, #456]	; (8003b68 <HAL_I2C_Init+0x268>)
 800399e:	fba2 2303 	umull	r2, r3, r2, r3
 80039a2:	0c9b      	lsrs	r3, r3, #18
 80039a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	4a64      	ldr	r2, [pc, #400]	; (8003b5c <HAL_I2C_Init+0x25c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d802      	bhi.n	80039d4 <HAL_I2C_Init+0xd4>
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	3301      	adds	r3, #1
 80039d2:	e009      	b.n	80039e8 <HAL_I2C_Init+0xe8>
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039da:	fb02 f303 	mul.w	r3, r2, r3
 80039de:	4a63      	ldr	r2, [pc, #396]	; (8003b6c <HAL_I2C_Init+0x26c>)
 80039e0:	fba2 2303 	umull	r2, r3, r2, r3
 80039e4:	099b      	lsrs	r3, r3, #6
 80039e6:	3301      	adds	r3, #1
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6812      	ldr	r2, [r2, #0]
 80039ec:	430b      	orrs	r3, r1
 80039ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	4956      	ldr	r1, [pc, #344]	; (8003b5c <HAL_I2C_Init+0x25c>)
 8003a04:	428b      	cmp	r3, r1
 8003a06:	d80d      	bhi.n	8003a24 <HAL_I2C_Init+0x124>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	1e59      	subs	r1, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a16:	3301      	adds	r3, #1
 8003a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	bf38      	it	cc
 8003a20:	2304      	movcc	r3, #4
 8003a22:	e04f      	b.n	8003ac4 <HAL_I2C_Init+0x1c4>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d111      	bne.n	8003a50 <HAL_I2C_Init+0x150>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	1e58      	subs	r0, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6859      	ldr	r1, [r3, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	440b      	add	r3, r1
 8003a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a3e:	3301      	adds	r3, #1
 8003a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	bf0c      	ite	eq
 8003a48:	2301      	moveq	r3, #1
 8003a4a:	2300      	movne	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	e012      	b.n	8003a76 <HAL_I2C_Init+0x176>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	1e58      	subs	r0, r3, #1
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6859      	ldr	r1, [r3, #4]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	0099      	lsls	r1, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a66:	3301      	adds	r3, #1
 8003a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	bf0c      	ite	eq
 8003a70:	2301      	moveq	r3, #1
 8003a72:	2300      	movne	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <HAL_I2C_Init+0x17e>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e022      	b.n	8003ac4 <HAL_I2C_Init+0x1c4>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10e      	bne.n	8003aa4 <HAL_I2C_Init+0x1a4>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1e58      	subs	r0, r3, #1
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6859      	ldr	r1, [r3, #4]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	440b      	add	r3, r1
 8003a94:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a98:	3301      	adds	r3, #1
 8003a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aa2:	e00f      	b.n	8003ac4 <HAL_I2C_Init+0x1c4>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	1e58      	subs	r0, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6859      	ldr	r1, [r3, #4]
 8003aac:	460b      	mov	r3, r1
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	0099      	lsls	r1, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aba:	3301      	adds	r3, #1
 8003abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	6809      	ldr	r1, [r1, #0]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69da      	ldr	r2, [r3, #28]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003af2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6911      	ldr	r1, [r2, #16]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	68d2      	ldr	r2, [r2, #12]
 8003afe:	4311      	orrs	r1, r2
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6812      	ldr	r2, [r2, #0]
 8003b04:	430b      	orrs	r3, r1
 8003b06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695a      	ldr	r2, [r3, #20]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0201 	orr.w	r2, r2, #1
 8003b32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	000186a0 	.word	0x000186a0
 8003b60:	001e847f 	.word	0x001e847f
 8003b64:	003d08ff 	.word	0x003d08ff
 8003b68:	431bde83 	.word	0x431bde83
 8003b6c:	10624dd3 	.word	0x10624dd3

08003b70 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e128      	b.n	8003dd4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d109      	bne.n	8003ba2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a90      	ldr	r2, [pc, #576]	; (8003ddc <HAL_I2S_Init+0x26c>)
 8003b9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7fd f9ff 	bl	8000fa0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6812      	ldr	r2, [r2, #0]
 8003bb4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003bb8:	f023 030f 	bic.w	r3, r3, #15
 8003bbc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d060      	beq.n	8003c90 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d102      	bne.n	8003bdc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003bd6:	2310      	movs	r3, #16
 8003bd8:	617b      	str	r3, [r7, #20]
 8003bda:	e001      	b.n	8003be0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003bdc:	2320      	movs	r3, #32
 8003bde:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	2b20      	cmp	r3, #32
 8003be6:	d802      	bhi.n	8003bee <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003bee:	2001      	movs	r0, #1
 8003bf0:	f001 f98e 	bl	8004f10 <HAL_RCCEx_GetPeriphCLKFreq>
 8003bf4:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bfe:	d125      	bne.n	8003c4c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d010      	beq.n	8003c2a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c12:	4613      	mov	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c24:	3305      	adds	r3, #5
 8003c26:	613b      	str	r3, [r7, #16]
 8003c28:	e01f      	b.n	8003c6a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c34:	4613      	mov	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c46:	3305      	adds	r3, #5
 8003c48:	613b      	str	r3, [r7, #16]
 8003c4a:	e00e      	b.n	8003c6a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c54:	4613      	mov	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c66:	3305      	adds	r3, #5
 8003c68:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	4a5c      	ldr	r2, [pc, #368]	; (8003de0 <HAL_I2S_Init+0x270>)
 8003c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c72:	08db      	lsrs	r3, r3, #3
 8003c74:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	085b      	lsrs	r3, r3, #1
 8003c86:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	021b      	lsls	r3, r3, #8
 8003c8c:	61bb      	str	r3, [r7, #24]
 8003c8e:	e003      	b.n	8003c98 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003c90:	2302      	movs	r3, #2
 8003c92:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d902      	bls.n	8003ca4 <HAL_I2S_Init+0x134>
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	2bff      	cmp	r3, #255	; 0xff
 8003ca2:	d907      	bls.n	8003cb4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca8:	f043 0210 	orr.w	r2, r3, #16
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e08f      	b.n	8003dd4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	ea42 0103 	orr.w	r1, r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69fa      	ldr	r2, [r7, #28]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003cd2:	f023 030f 	bic.w	r3, r3, #15
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6851      	ldr	r1, [r2, #4]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6892      	ldr	r2, [r2, #8]
 8003cde:	4311      	orrs	r1, r2
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	68d2      	ldr	r2, [r2, #12]
 8003ce4:	4311      	orrs	r1, r2
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6992      	ldr	r2, [r2, #24]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cf6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d161      	bne.n	8003dc4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a38      	ldr	r2, [pc, #224]	; (8003de4 <HAL_I2S_Init+0x274>)
 8003d04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a37      	ldr	r2, [pc, #220]	; (8003de8 <HAL_I2S_Init+0x278>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d101      	bne.n	8003d14 <HAL_I2S_Init+0x1a4>
 8003d10:	4b36      	ldr	r3, [pc, #216]	; (8003dec <HAL_I2S_Init+0x27c>)
 8003d12:	e001      	b.n	8003d18 <HAL_I2S_Init+0x1a8>
 8003d14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6812      	ldr	r2, [r2, #0]
 8003d1e:	4932      	ldr	r1, [pc, #200]	; (8003de8 <HAL_I2S_Init+0x278>)
 8003d20:	428a      	cmp	r2, r1
 8003d22:	d101      	bne.n	8003d28 <HAL_I2S_Init+0x1b8>
 8003d24:	4a31      	ldr	r2, [pc, #196]	; (8003dec <HAL_I2S_Init+0x27c>)
 8003d26:	e001      	b.n	8003d2c <HAL_I2S_Init+0x1bc>
 8003d28:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003d2c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003d30:	f023 030f 	bic.w	r3, r3, #15
 8003d34:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a2b      	ldr	r2, [pc, #172]	; (8003de8 <HAL_I2S_Init+0x278>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d101      	bne.n	8003d44 <HAL_I2S_Init+0x1d4>
 8003d40:	4b2a      	ldr	r3, [pc, #168]	; (8003dec <HAL_I2S_Init+0x27c>)
 8003d42:	e001      	b.n	8003d48 <HAL_I2S_Init+0x1d8>
 8003d44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d48:	2202      	movs	r2, #2
 8003d4a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a25      	ldr	r2, [pc, #148]	; (8003de8 <HAL_I2S_Init+0x278>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d101      	bne.n	8003d5a <HAL_I2S_Init+0x1ea>
 8003d56:	4b25      	ldr	r3, [pc, #148]	; (8003dec <HAL_I2S_Init+0x27c>)
 8003d58:	e001      	b.n	8003d5e <HAL_I2S_Init+0x1ee>
 8003d5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d6a:	d003      	beq.n	8003d74 <HAL_I2S_Init+0x204>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d103      	bne.n	8003d7c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003d74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	e001      	b.n	8003d80 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	b299      	uxth	r1, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003d96:	4303      	orrs	r3, r0
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	430b      	orrs	r3, r1
 8003d9c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	897b      	ldrh	r3, [r7, #10]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003dac:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a0d      	ldr	r2, [pc, #52]	; (8003de8 <HAL_I2S_Init+0x278>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d101      	bne.n	8003dbc <HAL_I2S_Init+0x24c>
 8003db8:	4b0c      	ldr	r3, [pc, #48]	; (8003dec <HAL_I2S_Init+0x27c>)
 8003dba:	e001      	b.n	8003dc0 <HAL_I2S_Init+0x250>
 8003dbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dc0:	897a      	ldrh	r2, [r7, #10]
 8003dc2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3720      	adds	r7, #32
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	08003ee7 	.word	0x08003ee7
 8003de0:	cccccccd 	.word	0xcccccccd
 8003de4:	08003ffd 	.word	0x08003ffd
 8003de8:	40003800 	.word	0x40003800
 8003dec:	40003400 	.word	0x40003400

08003df0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	881a      	ldrh	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	1c9a      	adds	r2, r3, #2
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10e      	bne.n	8003e80 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e70:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7ff ffb8 	bl	8003df0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003e80:	bf00      	nop
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9a:	b292      	uxth	r2, r2
 8003e9c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	1c9a      	adds	r2, r3, #2
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10e      	bne.n	8003ede <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ece:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f7ff ff93 	bl	8003e04 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003ede:	bf00      	nop
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b086      	sub	sp, #24
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d13a      	bne.n	8003f78 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d109      	bne.n	8003f20 <I2S_IRQHandler+0x3a>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f16:	2b40      	cmp	r3, #64	; 0x40
 8003f18:	d102      	bne.n	8003f20 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff ffb4 	bl	8003e88 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f26:	2b40      	cmp	r3, #64	; 0x40
 8003f28:	d126      	bne.n	8003f78 <I2S_IRQHandler+0x92>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f003 0320 	and.w	r3, r3, #32
 8003f34:	2b20      	cmp	r3, #32
 8003f36:	d11f      	bne.n	8003f78 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f46:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f48:	2300      	movs	r3, #0
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	613b      	str	r3, [r7, #16]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	613b      	str	r3, [r7, #16]
 8003f5c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6a:	f043 0202 	orr.w	r2, r3, #2
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7ff ff50 	bl	8003e18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b03      	cmp	r3, #3
 8003f82:	d136      	bne.n	8003ff2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d109      	bne.n	8003fa2 <I2S_IRQHandler+0xbc>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f98:	2b80      	cmp	r3, #128	; 0x80
 8003f9a:	d102      	bne.n	8003fa2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7ff ff45 	bl	8003e2c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d122      	bne.n	8003ff2 <I2S_IRQHandler+0x10c>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b20      	cmp	r3, #32
 8003fb8:	d11b      	bne.n	8003ff2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fc8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60fb      	str	r3, [r7, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe4:	f043 0204 	orr.w	r2, r3, #4
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7ff ff13 	bl	8003e18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ff2:	bf00      	nop
 8003ff4:	3718      	adds	r7, #24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
	...

08003ffc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4aa2      	ldr	r2, [pc, #648]	; (800429c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d101      	bne.n	800401a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004016:	4ba2      	ldr	r3, [pc, #648]	; (80042a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004018:	e001      	b.n	800401e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800401a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a9b      	ldr	r2, [pc, #620]	; (800429c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d101      	bne.n	8004038 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004034:	4b9a      	ldr	r3, [pc, #616]	; (80042a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004036:	e001      	b.n	800403c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004038:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004048:	d004      	beq.n	8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	f040 8099 	bne.w	8004186 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b02      	cmp	r3, #2
 800405c:	d107      	bne.n	800406e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004064:	2b00      	cmp	r3, #0
 8004066:	d002      	beq.n	800406e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f925 	bl	80042b8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b01      	cmp	r3, #1
 8004076:	d107      	bne.n	8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407e:	2b00      	cmp	r3, #0
 8004080:	d002      	beq.n	8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f9c8 	bl	8004418 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408e:	2b40      	cmp	r3, #64	; 0x40
 8004090:	d13a      	bne.n	8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f003 0320 	and.w	r3, r3, #32
 8004098:	2b00      	cmp	r3, #0
 800409a:	d035      	beq.n	8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a7e      	ldr	r2, [pc, #504]	; (800429c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d101      	bne.n	80040aa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80040a6:	4b7e      	ldr	r3, [pc, #504]	; (80042a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80040a8:	e001      	b.n	80040ae <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80040aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4979      	ldr	r1, [pc, #484]	; (800429c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80040b6:	428b      	cmp	r3, r1
 80040b8:	d101      	bne.n	80040be <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80040ba:	4b79      	ldr	r3, [pc, #484]	; (80042a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80040bc:	e001      	b.n	80040c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80040be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040c6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040d6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80040d8:	2300      	movs	r3, #0
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fa:	f043 0202 	orr.w	r2, r3, #2
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7ff fe88 	bl	8003e18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b08      	cmp	r3, #8
 8004110:	f040 80be 	bne.w	8004290 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 80b8 	beq.w	8004290 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800412e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a59      	ldr	r2, [pc, #356]	; (800429c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d101      	bne.n	800413e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800413a:	4b59      	ldr	r3, [pc, #356]	; (80042a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800413c:	e001      	b.n	8004142 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800413e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4954      	ldr	r1, [pc, #336]	; (800429c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800414a:	428b      	cmp	r3, r1
 800414c:	d101      	bne.n	8004152 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800414e:	4b54      	ldr	r3, [pc, #336]	; (80042a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004150:	e001      	b.n	8004156 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004152:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004156:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800415a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800415c:	2300      	movs	r3, #0
 800415e:	60bb      	str	r3, [r7, #8]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	60bb      	str	r3, [r7, #8]
 8004168:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004176:	f043 0204 	orr.w	r2, r3, #4
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7ff fe4a 	bl	8003e18 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004184:	e084      	b.n	8004290 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b02      	cmp	r3, #2
 800418e:	d107      	bne.n	80041a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f8be 	bl	800431c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d107      	bne.n	80041ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f8fd 	bl	80043b4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c0:	2b40      	cmp	r3, #64	; 0x40
 80041c2:	d12f      	bne.n	8004224 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f003 0320 	and.w	r3, r3, #32
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d02a      	beq.n	8004224 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041dc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a2e      	ldr	r2, [pc, #184]	; (800429c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d101      	bne.n	80041ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80041e8:	4b2d      	ldr	r3, [pc, #180]	; (80042a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80041ea:	e001      	b.n	80041f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80041ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4929      	ldr	r1, [pc, #164]	; (800429c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80041f8:	428b      	cmp	r3, r1
 80041fa:	d101      	bne.n	8004200 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80041fc:	4b28      	ldr	r3, [pc, #160]	; (80042a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80041fe:	e001      	b.n	8004204 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004200:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004204:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004208:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004216:	f043 0202 	orr.w	r2, r3, #2
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff fdfa 	bl	8003e18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b08      	cmp	r3, #8
 800422c:	d131      	bne.n	8004292 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	f003 0320 	and.w	r3, r3, #32
 8004234:	2b00      	cmp	r3, #0
 8004236:	d02c      	beq.n	8004292 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a17      	ldr	r2, [pc, #92]	; (800429c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d101      	bne.n	8004246 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004242:	4b17      	ldr	r3, [pc, #92]	; (80042a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004244:	e001      	b.n	800424a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004246:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4912      	ldr	r1, [pc, #72]	; (800429c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004252:	428b      	cmp	r3, r1
 8004254:	d101      	bne.n	800425a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004256:	4b12      	ldr	r3, [pc, #72]	; (80042a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004258:	e001      	b.n	800425e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800425a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800425e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004262:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004272:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004280:	f043 0204 	orr.w	r2, r3, #4
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7ff fdc5 	bl	8003e18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800428e:	e000      	b.n	8004292 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004290:	bf00      	nop
}
 8004292:	bf00      	nop
 8004294:	3720      	adds	r7, #32
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40003800 	.word	0x40003800
 80042a0:	40003400 	.word	0x40003400

080042a4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	1c99      	adds	r1, r3, #2
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6251      	str	r1, [r2, #36]	; 0x24
 80042ca:	881a      	ldrh	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29a      	uxth	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d113      	bne.n	8004312 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042f8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042fe:	b29b      	uxth	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	d106      	bne.n	8004312 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f7ff ffc9 	bl	80042a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004312:	bf00      	nop
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	1c99      	adds	r1, r3, #2
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6251      	str	r1, [r2, #36]	; 0x24
 800432e:	8819      	ldrh	r1, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a1d      	ldr	r2, [pc, #116]	; (80043ac <I2SEx_TxISR_I2SExt+0x90>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d101      	bne.n	800433e <I2SEx_TxISR_I2SExt+0x22>
 800433a:	4b1d      	ldr	r3, [pc, #116]	; (80043b0 <I2SEx_TxISR_I2SExt+0x94>)
 800433c:	e001      	b.n	8004342 <I2SEx_TxISR_I2SExt+0x26>
 800433e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004342:	460a      	mov	r2, r1
 8004344:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434a:	b29b      	uxth	r3, r3
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d121      	bne.n	80043a2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a12      	ldr	r2, [pc, #72]	; (80043ac <I2SEx_TxISR_I2SExt+0x90>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d101      	bne.n	800436c <I2SEx_TxISR_I2SExt+0x50>
 8004368:	4b11      	ldr	r3, [pc, #68]	; (80043b0 <I2SEx_TxISR_I2SExt+0x94>)
 800436a:	e001      	b.n	8004370 <I2SEx_TxISR_I2SExt+0x54>
 800436c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	490d      	ldr	r1, [pc, #52]	; (80043ac <I2SEx_TxISR_I2SExt+0x90>)
 8004378:	428b      	cmp	r3, r1
 800437a:	d101      	bne.n	8004380 <I2SEx_TxISR_I2SExt+0x64>
 800437c:	4b0c      	ldr	r3, [pc, #48]	; (80043b0 <I2SEx_TxISR_I2SExt+0x94>)
 800437e:	e001      	b.n	8004384 <I2SEx_TxISR_I2SExt+0x68>
 8004380:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004384:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004388:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800438e:	b29b      	uxth	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	d106      	bne.n	80043a2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f7ff ff81 	bl	80042a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043a2:	bf00      	nop
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40003800 	.word	0x40003800
 80043b0:	40003400 	.word	0x40003400

080043b4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68d8      	ldr	r0, [r3, #12]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c6:	1c99      	adds	r1, r3, #2
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	62d1      	str	r1, [r2, #44]	; 0x2c
 80043cc:	b282      	uxth	r2, r0
 80043ce:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	3b01      	subs	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d113      	bne.n	8004410 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043f6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d106      	bne.n	8004410 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7ff ff4a 	bl	80042a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004410:	bf00      	nop
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a20      	ldr	r2, [pc, #128]	; (80044a8 <I2SEx_RxISR_I2SExt+0x90>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d101      	bne.n	800442e <I2SEx_RxISR_I2SExt+0x16>
 800442a:	4b20      	ldr	r3, [pc, #128]	; (80044ac <I2SEx_RxISR_I2SExt+0x94>)
 800442c:	e001      	b.n	8004432 <I2SEx_RxISR_I2SExt+0x1a>
 800442e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004432:	68d8      	ldr	r0, [r3, #12]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	1c99      	adds	r1, r3, #2
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800443e:	b282      	uxth	r2, r0
 8004440:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004446:	b29b      	uxth	r3, r3
 8004448:	3b01      	subs	r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004454:	b29b      	uxth	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d121      	bne.n	800449e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a12      	ldr	r2, [pc, #72]	; (80044a8 <I2SEx_RxISR_I2SExt+0x90>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d101      	bne.n	8004468 <I2SEx_RxISR_I2SExt+0x50>
 8004464:	4b11      	ldr	r3, [pc, #68]	; (80044ac <I2SEx_RxISR_I2SExt+0x94>)
 8004466:	e001      	b.n	800446c <I2SEx_RxISR_I2SExt+0x54>
 8004468:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	490d      	ldr	r1, [pc, #52]	; (80044a8 <I2SEx_RxISR_I2SExt+0x90>)
 8004474:	428b      	cmp	r3, r1
 8004476:	d101      	bne.n	800447c <I2SEx_RxISR_I2SExt+0x64>
 8004478:	4b0c      	ldr	r3, [pc, #48]	; (80044ac <I2SEx_RxISR_I2SExt+0x94>)
 800447a:	e001      	b.n	8004480 <I2SEx_RxISR_I2SExt+0x68>
 800447c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004480:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004484:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448a:	b29b      	uxth	r3, r3
 800448c:	2b00      	cmp	r3, #0
 800448e:	d106      	bne.n	800449e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7ff ff03 	bl	80042a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800449e:	bf00      	nop
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	40003800 	.word	0x40003800
 80044ac:	40003400 	.word	0x40003400

080044b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e25b      	b.n	800497a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d075      	beq.n	80045ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044ce:	4ba3      	ldr	r3, [pc, #652]	; (800475c <HAL_RCC_OscConfig+0x2ac>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 030c 	and.w	r3, r3, #12
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	d00c      	beq.n	80044f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044da:	4ba0      	ldr	r3, [pc, #640]	; (800475c <HAL_RCC_OscConfig+0x2ac>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044e2:	2b08      	cmp	r3, #8
 80044e4:	d112      	bne.n	800450c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044e6:	4b9d      	ldr	r3, [pc, #628]	; (800475c <HAL_RCC_OscConfig+0x2ac>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044f2:	d10b      	bne.n	800450c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f4:	4b99      	ldr	r3, [pc, #612]	; (800475c <HAL_RCC_OscConfig+0x2ac>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d05b      	beq.n	80045b8 <HAL_RCC_OscConfig+0x108>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d157      	bne.n	80045b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e236      	b.n	800497a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004514:	d106      	bne.n	8004524 <HAL_RCC_OscConfig+0x74>
 8004516:	4b91      	ldr	r3, [pc, #580]	; (800475c <HAL_RCC_OscConfig+0x2ac>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a90      	ldr	r2, [pc, #576]	; (800475c <HAL_RCC_OscConfig+0x2ac>)
 800451c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	e01d      	b.n	8004560 <HAL_RCC_OscConfig+0xb0>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800452c:	d10c      	bne.n	8004548 <HAL_RCC_OscConfig+0x98>
 800452e:	4b8b      	ldr	r3, [pc, #556]	; (800475c <HAL_RCC_OscConfig+0x2ac>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a8a      	ldr	r2, [pc, #552]	; (800475c <HAL_RCC_OscConfig+0x2ac>)
 8004534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	4b88      	ldr	r3, [pc, #544]	; (800475c <HAL_RCC_OscConfig+0x2ac>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a87      	ldr	r2, [pc, #540]	; (800475c <HAL_RCC_OscConfig+0x2ac>)
 8004540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	e00b      	b.n	8004560 <HAL_RCC_OscConfig+0xb0>
 8004548:	4b84      	ldr	r3, [pc, #528]	; (800475c <HAL_RCC_OscConfig+0x2ac>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a83      	ldr	r2, [pc, #524]	; (800475c <HAL_RCC_OscConfig+0x2ac>)
 800454e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004552:	6013      	str	r3, [r2, #0]
 8004554:	4b81      	ldr	r3, [pc, #516]	; (800475c <HAL_RCC_OscConfig+0x2ac>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a80      	ldr	r2, [pc, #512]	; (800475c <HAL_RCC_OscConfig+0x2ac>)
 800455a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800455e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d013      	beq.n	8004590 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004568:	f7fc ff82 	bl	8001470 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004570:	f7fc ff7e 	bl	8001470 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b64      	cmp	r3, #100	; 0x64
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e1fb      	b.n	800497a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004582:	4b76      	ldr	r3, [pc, #472]	; (800475c <HAL_RCC_OscConfig+0x2ac>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f0      	beq.n	8004570 <HAL_RCC_OscConfig+0xc0>
 800458e:	e014      	b.n	80045ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004590:	f7fc ff6e 	bl	8001470 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004598:	f7fc ff6a 	bl	8001470 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b64      	cmp	r3, #100	; 0x64
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e1e7      	b.n	800497a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045aa:	4b6c      	ldr	r3, [pc, #432]	; (800475c <HAL_RCC_OscConfig+0x2ac>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1f0      	bne.n	8004598 <HAL_RCC_OscConfig+0xe8>
 80045b6:	e000      	b.n	80045ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d063      	beq.n	800468e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045c6:	4b65      	ldr	r3, [pc, #404]	; (800475c <HAL_RCC_OscConfig+0x2ac>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 030c 	and.w	r3, r3, #12
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00b      	beq.n	80045ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045d2:	4b62      	ldr	r3, [pc, #392]	; (800475c <HAL_RCC_OscConfig+0x2ac>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045da:	2b08      	cmp	r3, #8
 80045dc:	d11c      	bne.n	8004618 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045de:	4b5f      	ldr	r3, [pc, #380]	; (800475c <HAL_RCC_OscConfig+0x2ac>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d116      	bne.n	8004618 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ea:	4b5c      	ldr	r3, [pc, #368]	; (800475c <HAL_RCC_OscConfig+0x2ac>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d005      	beq.n	8004602 <HAL_RCC_OscConfig+0x152>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d001      	beq.n	8004602 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e1bb      	b.n	800497a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004602:	4b56      	ldr	r3, [pc, #344]	; (800475c <HAL_RCC_OscConfig+0x2ac>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	4952      	ldr	r1, [pc, #328]	; (800475c <HAL_RCC_OscConfig+0x2ac>)
 8004612:	4313      	orrs	r3, r2
 8004614:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004616:	e03a      	b.n	800468e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d020      	beq.n	8004662 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004620:	4b4f      	ldr	r3, [pc, #316]	; (8004760 <HAL_RCC_OscConfig+0x2b0>)
 8004622:	2201      	movs	r2, #1
 8004624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004626:	f7fc ff23 	bl	8001470 <HAL_GetTick>
 800462a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800462c:	e008      	b.n	8004640 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800462e:	f7fc ff1f 	bl	8001470 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d901      	bls.n	8004640 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e19c      	b.n	800497a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004640:	4b46      	ldr	r3, [pc, #280]	; (800475c <HAL_RCC_OscConfig+0x2ac>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0f0      	beq.n	800462e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800464c:	4b43      	ldr	r3, [pc, #268]	; (800475c <HAL_RCC_OscConfig+0x2ac>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	4940      	ldr	r1, [pc, #256]	; (800475c <HAL_RCC_OscConfig+0x2ac>)
 800465c:	4313      	orrs	r3, r2
 800465e:	600b      	str	r3, [r1, #0]
 8004660:	e015      	b.n	800468e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004662:	4b3f      	ldr	r3, [pc, #252]	; (8004760 <HAL_RCC_OscConfig+0x2b0>)
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004668:	f7fc ff02 	bl	8001470 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004670:	f7fc fefe 	bl	8001470 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e17b      	b.n	800497a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004682:	4b36      	ldr	r3, [pc, #216]	; (800475c <HAL_RCC_OscConfig+0x2ac>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1f0      	bne.n	8004670 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d030      	beq.n	80046fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d016      	beq.n	80046d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046a2:	4b30      	ldr	r3, [pc, #192]	; (8004764 <HAL_RCC_OscConfig+0x2b4>)
 80046a4:	2201      	movs	r2, #1
 80046a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a8:	f7fc fee2 	bl	8001470 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046b0:	f7fc fede 	bl	8001470 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e15b      	b.n	800497a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046c2:	4b26      	ldr	r3, [pc, #152]	; (800475c <HAL_RCC_OscConfig+0x2ac>)
 80046c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0f0      	beq.n	80046b0 <HAL_RCC_OscConfig+0x200>
 80046ce:	e015      	b.n	80046fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046d0:	4b24      	ldr	r3, [pc, #144]	; (8004764 <HAL_RCC_OscConfig+0x2b4>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046d6:	f7fc fecb 	bl	8001470 <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046de:	f7fc fec7 	bl	8001470 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e144      	b.n	800497a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046f0:	4b1a      	ldr	r3, [pc, #104]	; (800475c <HAL_RCC_OscConfig+0x2ac>)
 80046f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1f0      	bne.n	80046de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 80a0 	beq.w	800484a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800470a:	2300      	movs	r3, #0
 800470c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800470e:	4b13      	ldr	r3, [pc, #76]	; (800475c <HAL_RCC_OscConfig+0x2ac>)
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10f      	bne.n	800473a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800471a:	2300      	movs	r3, #0
 800471c:	60bb      	str	r3, [r7, #8]
 800471e:	4b0f      	ldr	r3, [pc, #60]	; (800475c <HAL_RCC_OscConfig+0x2ac>)
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	4a0e      	ldr	r2, [pc, #56]	; (800475c <HAL_RCC_OscConfig+0x2ac>)
 8004724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004728:	6413      	str	r3, [r2, #64]	; 0x40
 800472a:	4b0c      	ldr	r3, [pc, #48]	; (800475c <HAL_RCC_OscConfig+0x2ac>)
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004732:	60bb      	str	r3, [r7, #8]
 8004734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004736:	2301      	movs	r3, #1
 8004738:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800473a:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <HAL_RCC_OscConfig+0x2b8>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004742:	2b00      	cmp	r3, #0
 8004744:	d121      	bne.n	800478a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004746:	4b08      	ldr	r3, [pc, #32]	; (8004768 <HAL_RCC_OscConfig+0x2b8>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a07      	ldr	r2, [pc, #28]	; (8004768 <HAL_RCC_OscConfig+0x2b8>)
 800474c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004752:	f7fc fe8d 	bl	8001470 <HAL_GetTick>
 8004756:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004758:	e011      	b.n	800477e <HAL_RCC_OscConfig+0x2ce>
 800475a:	bf00      	nop
 800475c:	40023800 	.word	0x40023800
 8004760:	42470000 	.word	0x42470000
 8004764:	42470e80 	.word	0x42470e80
 8004768:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800476c:	f7fc fe80 	bl	8001470 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e0fd      	b.n	800497a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800477e:	4b81      	ldr	r3, [pc, #516]	; (8004984 <HAL_RCC_OscConfig+0x4d4>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0f0      	beq.n	800476c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d106      	bne.n	80047a0 <HAL_RCC_OscConfig+0x2f0>
 8004792:	4b7d      	ldr	r3, [pc, #500]	; (8004988 <HAL_RCC_OscConfig+0x4d8>)
 8004794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004796:	4a7c      	ldr	r2, [pc, #496]	; (8004988 <HAL_RCC_OscConfig+0x4d8>)
 8004798:	f043 0301 	orr.w	r3, r3, #1
 800479c:	6713      	str	r3, [r2, #112]	; 0x70
 800479e:	e01c      	b.n	80047da <HAL_RCC_OscConfig+0x32a>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	2b05      	cmp	r3, #5
 80047a6:	d10c      	bne.n	80047c2 <HAL_RCC_OscConfig+0x312>
 80047a8:	4b77      	ldr	r3, [pc, #476]	; (8004988 <HAL_RCC_OscConfig+0x4d8>)
 80047aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ac:	4a76      	ldr	r2, [pc, #472]	; (8004988 <HAL_RCC_OscConfig+0x4d8>)
 80047ae:	f043 0304 	orr.w	r3, r3, #4
 80047b2:	6713      	str	r3, [r2, #112]	; 0x70
 80047b4:	4b74      	ldr	r3, [pc, #464]	; (8004988 <HAL_RCC_OscConfig+0x4d8>)
 80047b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b8:	4a73      	ldr	r2, [pc, #460]	; (8004988 <HAL_RCC_OscConfig+0x4d8>)
 80047ba:	f043 0301 	orr.w	r3, r3, #1
 80047be:	6713      	str	r3, [r2, #112]	; 0x70
 80047c0:	e00b      	b.n	80047da <HAL_RCC_OscConfig+0x32a>
 80047c2:	4b71      	ldr	r3, [pc, #452]	; (8004988 <HAL_RCC_OscConfig+0x4d8>)
 80047c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c6:	4a70      	ldr	r2, [pc, #448]	; (8004988 <HAL_RCC_OscConfig+0x4d8>)
 80047c8:	f023 0301 	bic.w	r3, r3, #1
 80047cc:	6713      	str	r3, [r2, #112]	; 0x70
 80047ce:	4b6e      	ldr	r3, [pc, #440]	; (8004988 <HAL_RCC_OscConfig+0x4d8>)
 80047d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d2:	4a6d      	ldr	r2, [pc, #436]	; (8004988 <HAL_RCC_OscConfig+0x4d8>)
 80047d4:	f023 0304 	bic.w	r3, r3, #4
 80047d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d015      	beq.n	800480e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e2:	f7fc fe45 	bl	8001470 <HAL_GetTick>
 80047e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e8:	e00a      	b.n	8004800 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047ea:	f7fc fe41 	bl	8001470 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e0bc      	b.n	800497a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004800:	4b61      	ldr	r3, [pc, #388]	; (8004988 <HAL_RCC_OscConfig+0x4d8>)
 8004802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0ee      	beq.n	80047ea <HAL_RCC_OscConfig+0x33a>
 800480c:	e014      	b.n	8004838 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480e:	f7fc fe2f 	bl	8001470 <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004814:	e00a      	b.n	800482c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004816:	f7fc fe2b 	bl	8001470 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	f241 3288 	movw	r2, #5000	; 0x1388
 8004824:	4293      	cmp	r3, r2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e0a6      	b.n	800497a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800482c:	4b56      	ldr	r3, [pc, #344]	; (8004988 <HAL_RCC_OscConfig+0x4d8>)
 800482e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1ee      	bne.n	8004816 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004838:	7dfb      	ldrb	r3, [r7, #23]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d105      	bne.n	800484a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800483e:	4b52      	ldr	r3, [pc, #328]	; (8004988 <HAL_RCC_OscConfig+0x4d8>)
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	4a51      	ldr	r2, [pc, #324]	; (8004988 <HAL_RCC_OscConfig+0x4d8>)
 8004844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004848:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 8092 	beq.w	8004978 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004854:	4b4c      	ldr	r3, [pc, #304]	; (8004988 <HAL_RCC_OscConfig+0x4d8>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f003 030c 	and.w	r3, r3, #12
 800485c:	2b08      	cmp	r3, #8
 800485e:	d05c      	beq.n	800491a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	2b02      	cmp	r3, #2
 8004866:	d141      	bne.n	80048ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004868:	4b48      	ldr	r3, [pc, #288]	; (800498c <HAL_RCC_OscConfig+0x4dc>)
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486e:	f7fc fdff 	bl	8001470 <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004876:	f7fc fdfb 	bl	8001470 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e078      	b.n	800497a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004888:	4b3f      	ldr	r3, [pc, #252]	; (8004988 <HAL_RCC_OscConfig+0x4d8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1f0      	bne.n	8004876 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	69da      	ldr	r2, [r3, #28]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	431a      	orrs	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	019b      	lsls	r3, r3, #6
 80048a4:	431a      	orrs	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048aa:	085b      	lsrs	r3, r3, #1
 80048ac:	3b01      	subs	r3, #1
 80048ae:	041b      	lsls	r3, r3, #16
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b6:	061b      	lsls	r3, r3, #24
 80048b8:	4933      	ldr	r1, [pc, #204]	; (8004988 <HAL_RCC_OscConfig+0x4d8>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048be:	4b33      	ldr	r3, [pc, #204]	; (800498c <HAL_RCC_OscConfig+0x4dc>)
 80048c0:	2201      	movs	r2, #1
 80048c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c4:	f7fc fdd4 	bl	8001470 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048cc:	f7fc fdd0 	bl	8001470 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e04d      	b.n	800497a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048de:	4b2a      	ldr	r3, [pc, #168]	; (8004988 <HAL_RCC_OscConfig+0x4d8>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0f0      	beq.n	80048cc <HAL_RCC_OscConfig+0x41c>
 80048ea:	e045      	b.n	8004978 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ec:	4b27      	ldr	r3, [pc, #156]	; (800498c <HAL_RCC_OscConfig+0x4dc>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f2:	f7fc fdbd 	bl	8001470 <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048f8:	e008      	b.n	800490c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048fa:	f7fc fdb9 	bl	8001470 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e036      	b.n	800497a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800490c:	4b1e      	ldr	r3, [pc, #120]	; (8004988 <HAL_RCC_OscConfig+0x4d8>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1f0      	bne.n	80048fa <HAL_RCC_OscConfig+0x44a>
 8004918:	e02e      	b.n	8004978 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d101      	bne.n	8004926 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e029      	b.n	800497a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004926:	4b18      	ldr	r3, [pc, #96]	; (8004988 <HAL_RCC_OscConfig+0x4d8>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	429a      	cmp	r2, r3
 8004938:	d11c      	bne.n	8004974 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004944:	429a      	cmp	r2, r3
 8004946:	d115      	bne.n	8004974 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800494e:	4013      	ands	r3, r2
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004954:	4293      	cmp	r3, r2
 8004956:	d10d      	bne.n	8004974 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004962:	429a      	cmp	r2, r3
 8004964:	d106      	bne.n	8004974 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004970:	429a      	cmp	r2, r3
 8004972:	d001      	beq.n	8004978 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e000      	b.n	800497a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	40007000 	.word	0x40007000
 8004988:	40023800 	.word	0x40023800
 800498c:	42470060 	.word	0x42470060

08004990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d101      	bne.n	80049a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e0cc      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049a4:	4b68      	ldr	r3, [pc, #416]	; (8004b48 <HAL_RCC_ClockConfig+0x1b8>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 030f 	and.w	r3, r3, #15
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d90c      	bls.n	80049cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049b2:	4b65      	ldr	r3, [pc, #404]	; (8004b48 <HAL_RCC_ClockConfig+0x1b8>)
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ba:	4b63      	ldr	r3, [pc, #396]	; (8004b48 <HAL_RCC_ClockConfig+0x1b8>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d001      	beq.n	80049cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e0b8      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d020      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d005      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049e4:	4b59      	ldr	r3, [pc, #356]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	4a58      	ldr	r2, [pc, #352]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 80049ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0308 	and.w	r3, r3, #8
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d005      	beq.n	8004a08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049fc:	4b53      	ldr	r3, [pc, #332]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	4a52      	ldr	r2, [pc, #328]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a08:	4b50      	ldr	r3, [pc, #320]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	494d      	ldr	r1, [pc, #308]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d044      	beq.n	8004ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d107      	bne.n	8004a3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a2e:	4b47      	ldr	r3, [pc, #284]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d119      	bne.n	8004a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e07f      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d003      	beq.n	8004a4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a4a:	2b03      	cmp	r3, #3
 8004a4c:	d107      	bne.n	8004a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a4e:	4b3f      	ldr	r3, [pc, #252]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d109      	bne.n	8004a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e06f      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a5e:	4b3b      	ldr	r3, [pc, #236]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e067      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a6e:	4b37      	ldr	r3, [pc, #220]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f023 0203 	bic.w	r2, r3, #3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	4934      	ldr	r1, [pc, #208]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a80:	f7fc fcf6 	bl	8001470 <HAL_GetTick>
 8004a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a86:	e00a      	b.n	8004a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a88:	f7fc fcf2 	bl	8001470 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e04f      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a9e:	4b2b      	ldr	r3, [pc, #172]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 020c 	and.w	r2, r3, #12
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d1eb      	bne.n	8004a88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ab0:	4b25      	ldr	r3, [pc, #148]	; (8004b48 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 030f 	and.w	r3, r3, #15
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d20c      	bcs.n	8004ad8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004abe:	4b22      	ldr	r3, [pc, #136]	; (8004b48 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ac6:	4b20      	ldr	r3, [pc, #128]	; (8004b48 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 030f 	and.w	r3, r3, #15
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d001      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e032      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d008      	beq.n	8004af6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ae4:	4b19      	ldr	r3, [pc, #100]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	4916      	ldr	r1, [pc, #88]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d009      	beq.n	8004b16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b02:	4b12      	ldr	r3, [pc, #72]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	00db      	lsls	r3, r3, #3
 8004b10:	490e      	ldr	r1, [pc, #56]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b16:	f000 f821 	bl	8004b5c <HAL_RCC_GetSysClockFreq>
 8004b1a:	4601      	mov	r1, r0
 8004b1c:	4b0b      	ldr	r3, [pc, #44]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	091b      	lsrs	r3, r3, #4
 8004b22:	f003 030f 	and.w	r3, r3, #15
 8004b26:	4a0a      	ldr	r2, [pc, #40]	; (8004b50 <HAL_RCC_ClockConfig+0x1c0>)
 8004b28:	5cd3      	ldrb	r3, [r2, r3]
 8004b2a:	fa21 f303 	lsr.w	r3, r1, r3
 8004b2e:	4a09      	ldr	r2, [pc, #36]	; (8004b54 <HAL_RCC_ClockConfig+0x1c4>)
 8004b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b32:	4b09      	ldr	r3, [pc, #36]	; (8004b58 <HAL_RCC_ClockConfig+0x1c8>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fc fc56 	bl	80013e8 <HAL_InitTick>

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	40023c00 	.word	0x40023c00
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	08007cac 	.word	0x08007cac
 8004b54:	20000004 	.word	0x20000004
 8004b58:	20000008 	.word	0x20000008

08004b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	607b      	str	r3, [r7, #4]
 8004b66:	2300      	movs	r3, #0
 8004b68:	60fb      	str	r3, [r7, #12]
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b72:	4b63      	ldr	r3, [pc, #396]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 030c 	and.w	r3, r3, #12
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	d007      	beq.n	8004b8e <HAL_RCC_GetSysClockFreq+0x32>
 8004b7e:	2b08      	cmp	r3, #8
 8004b80:	d008      	beq.n	8004b94 <HAL_RCC_GetSysClockFreq+0x38>
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f040 80b4 	bne.w	8004cf0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b88:	4b5e      	ldr	r3, [pc, #376]	; (8004d04 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004b8a:	60bb      	str	r3, [r7, #8]
       break;
 8004b8c:	e0b3      	b.n	8004cf6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b8e:	4b5e      	ldr	r3, [pc, #376]	; (8004d08 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004b90:	60bb      	str	r3, [r7, #8]
      break;
 8004b92:	e0b0      	b.n	8004cf6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b94:	4b5a      	ldr	r3, [pc, #360]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b9c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b9e:	4b58      	ldr	r3, [pc, #352]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d04a      	beq.n	8004c40 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004baa:	4b55      	ldr	r3, [pc, #340]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	099b      	lsrs	r3, r3, #6
 8004bb0:	f04f 0400 	mov.w	r4, #0
 8004bb4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004bb8:	f04f 0200 	mov.w	r2, #0
 8004bbc:	ea03 0501 	and.w	r5, r3, r1
 8004bc0:	ea04 0602 	and.w	r6, r4, r2
 8004bc4:	4629      	mov	r1, r5
 8004bc6:	4632      	mov	r2, r6
 8004bc8:	f04f 0300 	mov.w	r3, #0
 8004bcc:	f04f 0400 	mov.w	r4, #0
 8004bd0:	0154      	lsls	r4, r2, #5
 8004bd2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004bd6:	014b      	lsls	r3, r1, #5
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4622      	mov	r2, r4
 8004bdc:	1b49      	subs	r1, r1, r5
 8004bde:	eb62 0206 	sbc.w	r2, r2, r6
 8004be2:	f04f 0300 	mov.w	r3, #0
 8004be6:	f04f 0400 	mov.w	r4, #0
 8004bea:	0194      	lsls	r4, r2, #6
 8004bec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004bf0:	018b      	lsls	r3, r1, #6
 8004bf2:	1a5b      	subs	r3, r3, r1
 8004bf4:	eb64 0402 	sbc.w	r4, r4, r2
 8004bf8:	f04f 0100 	mov.w	r1, #0
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	00e2      	lsls	r2, r4, #3
 8004c02:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c06:	00d9      	lsls	r1, r3, #3
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4614      	mov	r4, r2
 8004c0c:	195b      	adds	r3, r3, r5
 8004c0e:	eb44 0406 	adc.w	r4, r4, r6
 8004c12:	f04f 0100 	mov.w	r1, #0
 8004c16:	f04f 0200 	mov.w	r2, #0
 8004c1a:	0262      	lsls	r2, r4, #9
 8004c1c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004c20:	0259      	lsls	r1, r3, #9
 8004c22:	460b      	mov	r3, r1
 8004c24:	4614      	mov	r4, r2
 8004c26:	4618      	mov	r0, r3
 8004c28:	4621      	mov	r1, r4
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f04f 0400 	mov.w	r4, #0
 8004c30:	461a      	mov	r2, r3
 8004c32:	4623      	mov	r3, r4
 8004c34:	f7fb fac8 	bl	80001c8 <__aeabi_uldivmod>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	460c      	mov	r4, r1
 8004c3c:	60fb      	str	r3, [r7, #12]
 8004c3e:	e049      	b.n	8004cd4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c40:	4b2f      	ldr	r3, [pc, #188]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	099b      	lsrs	r3, r3, #6
 8004c46:	f04f 0400 	mov.w	r4, #0
 8004c4a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	ea03 0501 	and.w	r5, r3, r1
 8004c56:	ea04 0602 	and.w	r6, r4, r2
 8004c5a:	4629      	mov	r1, r5
 8004c5c:	4632      	mov	r2, r6
 8004c5e:	f04f 0300 	mov.w	r3, #0
 8004c62:	f04f 0400 	mov.w	r4, #0
 8004c66:	0154      	lsls	r4, r2, #5
 8004c68:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c6c:	014b      	lsls	r3, r1, #5
 8004c6e:	4619      	mov	r1, r3
 8004c70:	4622      	mov	r2, r4
 8004c72:	1b49      	subs	r1, r1, r5
 8004c74:	eb62 0206 	sbc.w	r2, r2, r6
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	f04f 0400 	mov.w	r4, #0
 8004c80:	0194      	lsls	r4, r2, #6
 8004c82:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c86:	018b      	lsls	r3, r1, #6
 8004c88:	1a5b      	subs	r3, r3, r1
 8004c8a:	eb64 0402 	sbc.w	r4, r4, r2
 8004c8e:	f04f 0100 	mov.w	r1, #0
 8004c92:	f04f 0200 	mov.w	r2, #0
 8004c96:	00e2      	lsls	r2, r4, #3
 8004c98:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c9c:	00d9      	lsls	r1, r3, #3
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4614      	mov	r4, r2
 8004ca2:	195b      	adds	r3, r3, r5
 8004ca4:	eb44 0406 	adc.w	r4, r4, r6
 8004ca8:	f04f 0100 	mov.w	r1, #0
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	02a2      	lsls	r2, r4, #10
 8004cb2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004cb6:	0299      	lsls	r1, r3, #10
 8004cb8:	460b      	mov	r3, r1
 8004cba:	4614      	mov	r4, r2
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	4621      	mov	r1, r4
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f04f 0400 	mov.w	r4, #0
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	4623      	mov	r3, r4
 8004cca:	f7fb fa7d 	bl	80001c8 <__aeabi_uldivmod>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	460c      	mov	r4, r1
 8004cd2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004cd4:	4b0a      	ldr	r3, [pc, #40]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	0c1b      	lsrs	r3, r3, #16
 8004cda:	f003 0303 	and.w	r3, r3, #3
 8004cde:	3301      	adds	r3, #1
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cec:	60bb      	str	r3, [r7, #8]
      break;
 8004cee:	e002      	b.n	8004cf6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cf0:	4b04      	ldr	r3, [pc, #16]	; (8004d04 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004cf2:	60bb      	str	r3, [r7, #8]
      break;
 8004cf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cf6:	68bb      	ldr	r3, [r7, #8]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d00:	40023800 	.word	0x40023800
 8004d04:	00f42400 	.word	0x00f42400
 8004d08:	007a1200 	.word	0x007a1200

08004d0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d10:	4b03      	ldr	r3, [pc, #12]	; (8004d20 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d12:	681b      	ldr	r3, [r3, #0]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	20000004 	.word	0x20000004

08004d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d28:	f7ff fff0 	bl	8004d0c <HAL_RCC_GetHCLKFreq>
 8004d2c:	4601      	mov	r1, r0
 8004d2e:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	0a9b      	lsrs	r3, r3, #10
 8004d34:	f003 0307 	and.w	r3, r3, #7
 8004d38:	4a03      	ldr	r2, [pc, #12]	; (8004d48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d3a:	5cd3      	ldrb	r3, [r2, r3]
 8004d3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	40023800 	.word	0x40023800
 8004d48:	08007cbc 	.word	0x08007cbc

08004d4c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d105      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d035      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d74:	4b62      	ldr	r3, [pc, #392]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d7a:	f7fc fb79 	bl	8001470 <HAL_GetTick>
 8004d7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d80:	e008      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d82:	f7fc fb75 	bl	8001470 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e0b0      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d94:	4b5b      	ldr	r3, [pc, #364]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1f0      	bne.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	019a      	lsls	r2, r3, #6
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	071b      	lsls	r3, r3, #28
 8004dac:	4955      	ldr	r1, [pc, #340]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004db4:	4b52      	ldr	r3, [pc, #328]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004db6:	2201      	movs	r2, #1
 8004db8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004dba:	f7fc fb59 	bl	8001470 <HAL_GetTick>
 8004dbe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dc0:	e008      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004dc2:	f7fc fb55 	bl	8001470 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e090      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dd4:	4b4b      	ldr	r3, [pc, #300]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0f0      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 8083 	beq.w	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004dee:	2300      	movs	r3, #0
 8004df0:	60fb      	str	r3, [r7, #12]
 8004df2:	4b44      	ldr	r3, [pc, #272]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	4a43      	ldr	r2, [pc, #268]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8004dfe:	4b41      	ldr	r3, [pc, #260]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e06:	60fb      	str	r3, [r7, #12]
 8004e08:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004e0a:	4b3f      	ldr	r3, [pc, #252]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a3e      	ldr	r2, [pc, #248]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e14:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e16:	f7fc fb2b 	bl	8001470 <HAL_GetTick>
 8004e1a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e1c:	e008      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004e1e:	f7fc fb27 	bl	8001470 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d901      	bls.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e062      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e30:	4b35      	ldr	r3, [pc, #212]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d0f0      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e3c:	4b31      	ldr	r3, [pc, #196]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e44:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d02f      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d028      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e5a:	4b2a      	ldr	r3, [pc, #168]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e62:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e64:	4b29      	ldr	r3, [pc, #164]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004e66:	2201      	movs	r2, #1
 8004e68:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e6a:	4b28      	ldr	r3, [pc, #160]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004e70:	4a24      	ldr	r2, [pc, #144]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e76:	4b23      	ldr	r3, [pc, #140]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d114      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004e82:	f7fc faf5 	bl	8001470 <HAL_GetTick>
 8004e86:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e88:	e00a      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e8a:	f7fc faf1 	bl	8001470 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e02a      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea0:	4b18      	ldr	r3, [pc, #96]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0ee      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eb8:	d10d      	bne.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004eba:	4b12      	ldr	r3, [pc, #72]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ece:	490d      	ldr	r1, [pc, #52]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	608b      	str	r3, [r1, #8]
 8004ed4:	e005      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004ed6:	4b0b      	ldr	r3, [pc, #44]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	4a0a      	ldr	r2, [pc, #40]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004edc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004ee0:	6093      	str	r3, [r2, #8]
 8004ee2:	4b08      	ldr	r3, [pc, #32]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ee4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eee:	4905      	ldr	r1, [pc, #20]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3718      	adds	r7, #24
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	42470068 	.word	0x42470068
 8004f04:	40023800 	.word	0x40023800
 8004f08:	40007000 	.word	0x40007000
 8004f0c:	42470e40 	.word	0x42470e40

08004f10 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d13d      	bne.n	8004faa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004f2e:	4b22      	ldr	r3, [pc, #136]	; (8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f36:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d004      	beq.n	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d12f      	bne.n	8004fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004f42:	4b1e      	ldr	r3, [pc, #120]	; (8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004f44:	617b      	str	r3, [r7, #20]
          break;
 8004f46:	e02f      	b.n	8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004f48:	4b1b      	ldr	r3, [pc, #108]	; (8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f54:	d108      	bne.n	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004f56:	4b18      	ldr	r3, [pc, #96]	; (8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f5e:	4a18      	ldr	r2, [pc, #96]	; (8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	e007      	b.n	8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004f68:	4b13      	ldr	r3, [pc, #76]	; (8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f70:	4a14      	ldr	r2, [pc, #80]	; (8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f76:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004f78:	4b0f      	ldr	r3, [pc, #60]	; (8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f7e:	099b      	lsrs	r3, r3, #6
 8004f80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	fb02 f303 	mul.w	r3, r2, r3
 8004f8a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004f8c:	4b0a      	ldr	r3, [pc, #40]	; (8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f92:	0f1b      	lsrs	r3, r3, #28
 8004f94:	f003 0307 	and.w	r3, r3, #7
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9e:	617b      	str	r3, [r7, #20]
          break;
 8004fa0:	e002      	b.n	8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	617b      	str	r3, [r7, #20]
          break;
 8004fa6:	bf00      	nop
        }
      }
      break;
 8004fa8:	bf00      	nop
    }
  }
  return frequency;
 8004faa:	697b      	ldr	r3, [r7, #20]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	371c      	adds	r7, #28
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	40023800 	.word	0x40023800
 8004fbc:	00bb8000 	.word	0x00bb8000
 8004fc0:	007a1200 	.word	0x007a1200
 8004fc4:	00f42400 	.word	0x00f42400

08004fc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e056      	b.n	8005088 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d106      	bne.n	8004ffa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f7fc f83b 	bl	8001070 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005010:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	431a      	orrs	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	431a      	orrs	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	431a      	orrs	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	431a      	orrs	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	69db      	ldr	r3, [r3, #28]
 800503c:	431a      	orrs	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	ea42 0103 	orr.w	r1, r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	430a      	orrs	r2, r1
 8005050:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	0c1b      	lsrs	r3, r3, #16
 8005058:	f003 0104 	and.w	r1, r3, #4
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	430a      	orrs	r2, r1
 8005066:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	69da      	ldr	r2, [r3, #28]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005076:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b088      	sub	sp, #32
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	603b      	str	r3, [r7, #0]
 800509c:	4613      	mov	r3, r2
 800509e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050a0:	2300      	movs	r3, #0
 80050a2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d101      	bne.n	80050b2 <HAL_SPI_Transmit+0x22>
 80050ae:	2302      	movs	r3, #2
 80050b0:	e11e      	b.n	80052f0 <HAL_SPI_Transmit+0x260>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050ba:	f7fc f9d9 	bl	8001470 <HAL_GetTick>
 80050be:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80050c0:	88fb      	ldrh	r3, [r7, #6]
 80050c2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d002      	beq.n	80050d6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80050d0:	2302      	movs	r3, #2
 80050d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80050d4:	e103      	b.n	80052de <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d002      	beq.n	80050e2 <HAL_SPI_Transmit+0x52>
 80050dc:	88fb      	ldrh	r3, [r7, #6]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d102      	bne.n	80050e8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80050e6:	e0fa      	b.n	80052de <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2203      	movs	r2, #3
 80050ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	88fa      	ldrh	r2, [r7, #6]
 8005100:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	88fa      	ldrh	r2, [r7, #6]
 8005106:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800512e:	d107      	bne.n	8005140 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800513e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514a:	2b40      	cmp	r3, #64	; 0x40
 800514c:	d007      	beq.n	800515e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800515c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005166:	d14b      	bne.n	8005200 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d002      	beq.n	8005176 <HAL_SPI_Transmit+0xe6>
 8005170:	8afb      	ldrh	r3, [r7, #22]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d13e      	bne.n	80051f4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517a:	881a      	ldrh	r2, [r3, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005186:	1c9a      	adds	r2, r3, #2
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005190:	b29b      	uxth	r3, r3
 8005192:	3b01      	subs	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800519a:	e02b      	b.n	80051f4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d112      	bne.n	80051d0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ae:	881a      	ldrh	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ba:	1c9a      	adds	r2, r3, #2
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	3b01      	subs	r3, #1
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	86da      	strh	r2, [r3, #54]	; 0x36
 80051ce:	e011      	b.n	80051f4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051d0:	f7fc f94e 	bl	8001470 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d803      	bhi.n	80051e8 <HAL_SPI_Transmit+0x158>
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e6:	d102      	bne.n	80051ee <HAL_SPI_Transmit+0x15e>
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d102      	bne.n	80051f4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80051f2:	e074      	b.n	80052de <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1ce      	bne.n	800519c <HAL_SPI_Transmit+0x10c>
 80051fe:	e04c      	b.n	800529a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d002      	beq.n	800520e <HAL_SPI_Transmit+0x17e>
 8005208:	8afb      	ldrh	r3, [r7, #22]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d140      	bne.n	8005290 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	330c      	adds	r3, #12
 8005218:	7812      	ldrb	r2, [r2, #0]
 800521a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005220:	1c5a      	adds	r2, r3, #1
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800522a:	b29b      	uxth	r3, r3
 800522c:	3b01      	subs	r3, #1
 800522e:	b29a      	uxth	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005234:	e02c      	b.n	8005290 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b02      	cmp	r3, #2
 8005242:	d113      	bne.n	800526c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	330c      	adds	r3, #12
 800524e:	7812      	ldrb	r2, [r2, #0]
 8005250:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005256:	1c5a      	adds	r2, r3, #1
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005260:	b29b      	uxth	r3, r3
 8005262:	3b01      	subs	r3, #1
 8005264:	b29a      	uxth	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	86da      	strh	r2, [r3, #54]	; 0x36
 800526a:	e011      	b.n	8005290 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800526c:	f7fc f900 	bl	8001470 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	429a      	cmp	r2, r3
 800527a:	d803      	bhi.n	8005284 <HAL_SPI_Transmit+0x1f4>
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005282:	d102      	bne.n	800528a <HAL_SPI_Transmit+0x1fa>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d102      	bne.n	8005290 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800528e:	e026      	b.n	80052de <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005294:	b29b      	uxth	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1cd      	bne.n	8005236 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	6839      	ldr	r1, [r7, #0]
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f000 f9b2 	bl	8005608 <SPI_EndRxTxTransaction>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2220      	movs	r2, #32
 80052ae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10a      	bne.n	80052ce <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052b8:	2300      	movs	r3, #0
 80052ba:	613b      	str	r3, [r7, #16]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	613b      	str	r3, [r7, #16]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	613b      	str	r3, [r7, #16]
 80052cc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d002      	beq.n	80052dc <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	77fb      	strb	r3, [r7, #31]
 80052da:	e000      	b.n	80052de <HAL_SPI_Transmit+0x24e>
  }

error:
 80052dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3720      	adds	r7, #32
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	099b      	lsrs	r3, r3, #6
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10f      	bne.n	800533c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	099b      	lsrs	r3, r3, #6
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	d004      	beq.n	800533c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	4798      	blx	r3
    return;
 800533a:	e0d8      	b.n	80054ee <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	085b      	lsrs	r3, r3, #1
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00a      	beq.n	800535e <HAL_SPI_IRQHandler+0x66>
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	09db      	lsrs	r3, r3, #7
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b00      	cmp	r3, #0
 8005352:	d004      	beq.n	800535e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	4798      	blx	r3
    return;
 800535c:	e0c7      	b.n	80054ee <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	095b      	lsrs	r3, r3, #5
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10c      	bne.n	8005384 <HAL_SPI_IRQHandler+0x8c>
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	099b      	lsrs	r3, r3, #6
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d106      	bne.n	8005384 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	0a1b      	lsrs	r3, r3, #8
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	f000 80b5 	beq.w	80054ee <HAL_SPI_IRQHandler+0x1f6>
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	095b      	lsrs	r3, r3, #5
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 80ae 	beq.w	80054ee <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	099b      	lsrs	r3, r3, #6
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d023      	beq.n	80053e6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b03      	cmp	r3, #3
 80053a8:	d011      	beq.n	80053ce <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ae:	f043 0204 	orr.w	r2, r3, #4
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053b6:	2300      	movs	r3, #0
 80053b8:	617b      	str	r3, [r7, #20]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	617b      	str	r3, [r7, #20]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	617b      	str	r3, [r7, #20]
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	e00b      	b.n	80053e6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053ce:	2300      	movs	r3, #0
 80053d0:	613b      	str	r3, [r7, #16]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	613b      	str	r3, [r7, #16]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	613b      	str	r3, [r7, #16]
 80053e2:	693b      	ldr	r3, [r7, #16]
        return;
 80053e4:	e083      	b.n	80054ee <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	095b      	lsrs	r3, r3, #5
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d014      	beq.n	800541c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f6:	f043 0201 	orr.w	r2, r3, #1
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80053fe:	2300      	movs	r3, #0
 8005400:	60fb      	str	r3, [r7, #12]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	60fb      	str	r3, [r7, #12]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	0a1b      	lsrs	r3, r3, #8
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00c      	beq.n	8005442 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542c:	f043 0208 	orr.w	r2, r3, #8
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005434:	2300      	movs	r3, #0
 8005436:	60bb      	str	r3, [r7, #8]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	60bb      	str	r3, [r7, #8]
 8005440:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005446:	2b00      	cmp	r3, #0
 8005448:	d050      	beq.n	80054ec <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005458:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d104      	bne.n	8005476 <HAL_SPI_IRQHandler+0x17e>
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d034      	beq.n	80054e0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 0203 	bic.w	r2, r2, #3
 8005484:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800548a:	2b00      	cmp	r3, #0
 800548c:	d011      	beq.n	80054b2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005492:	4a18      	ldr	r2, [pc, #96]	; (80054f4 <HAL_SPI_IRQHandler+0x1fc>)
 8005494:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800549a:	4618      	mov	r0, r3
 800549c:	f7fc f9d6 	bl	800184c <HAL_DMA_Abort_IT>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d005      	beq.n	80054b2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d016      	beq.n	80054e8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054be:	4a0d      	ldr	r2, [pc, #52]	; (80054f4 <HAL_SPI_IRQHandler+0x1fc>)
 80054c0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fc f9c0 	bl	800184c <HAL_DMA_Abort_IT>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00a      	beq.n	80054e8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80054de:	e003      	b.n	80054e8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 f809 	bl	80054f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80054e6:	e000      	b.n	80054ea <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80054e8:	bf00      	nop
    return;
 80054ea:	bf00      	nop
 80054ec:	bf00      	nop
  }
}
 80054ee:	3720      	adds	r7, #32
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	0800550d 	.word	0x0800550d

080054f8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005518:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f7ff ffe6 	bl	80054f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800552c:	bf00      	nop
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	603b      	str	r3, [r7, #0]
 8005540:	4613      	mov	r3, r2
 8005542:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005544:	e04c      	b.n	80055e0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554c:	d048      	beq.n	80055e0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800554e:	f7fb ff8f 	bl	8001470 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	429a      	cmp	r2, r3
 800555c:	d902      	bls.n	8005564 <SPI_WaitFlagStateUntilTimeout+0x30>
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d13d      	bne.n	80055e0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005572:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800557c:	d111      	bne.n	80055a2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005586:	d004      	beq.n	8005592 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005590:	d107      	bne.n	80055a2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055aa:	d10f      	bne.n	80055cc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055ba:	601a      	str	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e00f      	b.n	8005600 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689a      	ldr	r2, [r3, #8]
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	4013      	ands	r3, r2
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	bf0c      	ite	eq
 80055f0:	2301      	moveq	r3, #1
 80055f2:	2300      	movne	r3, #0
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	461a      	mov	r2, r3
 80055f8:	79fb      	ldrb	r3, [r7, #7]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d1a3      	bne.n	8005546 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b088      	sub	sp, #32
 800560c:	af02      	add	r7, sp, #8
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005614:	4b1b      	ldr	r3, [pc, #108]	; (8005684 <SPI_EndRxTxTransaction+0x7c>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a1b      	ldr	r2, [pc, #108]	; (8005688 <SPI_EndRxTxTransaction+0x80>)
 800561a:	fba2 2303 	umull	r2, r3, r2, r3
 800561e:	0d5b      	lsrs	r3, r3, #21
 8005620:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005624:	fb02 f303 	mul.w	r3, r2, r3
 8005628:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005632:	d112      	bne.n	800565a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	9300      	str	r3, [sp, #0]
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	2200      	movs	r2, #0
 800563c:	2180      	movs	r1, #128	; 0x80
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f7ff ff78 	bl	8005534 <SPI_WaitFlagStateUntilTimeout>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d016      	beq.n	8005678 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800564e:	f043 0220 	orr.w	r2, r3, #32
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e00f      	b.n	800567a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00a      	beq.n	8005676 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	3b01      	subs	r3, #1
 8005664:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005670:	2b80      	cmp	r3, #128	; 0x80
 8005672:	d0f2      	beq.n	800565a <SPI_EndRxTxTransaction+0x52>
 8005674:	e000      	b.n	8005678 <SPI_EndRxTxTransaction+0x70>
        break;
 8005676:	bf00      	nop
  }

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3718      	adds	r7, #24
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	20000004 	.word	0x20000004
 8005688:	165e9f81 	.word	0x165e9f81

0800568c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800568c:	b084      	sub	sp, #16
 800568e:	b580      	push	{r7, lr}
 8005690:	b084      	sub	sp, #16
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
 8005696:	f107 001c 	add.w	r0, r7, #28
 800569a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800569e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d122      	bne.n	80056ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80056b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80056cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d105      	bne.n	80056de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f94a 	bl	8005978 <USB_CoreReset>
 80056e4:	4603      	mov	r3, r0
 80056e6:	73fb      	strb	r3, [r7, #15]
 80056e8:	e01a      	b.n	8005720 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f93e 	bl	8005978 <USB_CoreReset>
 80056fc:	4603      	mov	r3, r0
 80056fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005702:	2b00      	cmp	r3, #0
 8005704:	d106      	bne.n	8005714 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	639a      	str	r2, [r3, #56]	; 0x38
 8005712:	e005      	b.n	8005720 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005718:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005722:	2b01      	cmp	r3, #1
 8005724:	d10b      	bne.n	800573e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f043 0206 	orr.w	r2, r3, #6
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f043 0220 	orr.w	r2, r3, #32
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800573e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005740:	4618      	mov	r0, r3
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800574a:	b004      	add	sp, #16
 800574c:	4770      	bx	lr

0800574e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800574e:	b480      	push	{r7}
 8005750:	b083      	sub	sp, #12
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f043 0201 	orr.w	r2, r3, #1
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f023 0201 	bic.w	r2, r3, #1
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b082      	sub	sp, #8
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	460b      	mov	r3, r1
 800579c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80057aa:	78fb      	ldrb	r3, [r7, #3]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d106      	bne.n	80057be <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	60da      	str	r2, [r3, #12]
 80057bc:	e00b      	b.n	80057d6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80057be:	78fb      	ldrb	r3, [r7, #3]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d106      	bne.n	80057d2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	60da      	str	r2, [r3, #12]
 80057d0:	e001      	b.n	80057d6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e003      	b.n	80057de <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80057d6:	2032      	movs	r0, #50	; 0x32
 80057d8:	f7fb fe56 	bl	8001488 <HAL_Delay>

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
	...

080057e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80057f2:	2300      	movs	r3, #0
 80057f4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	019b      	lsls	r3, r3, #6
 80057fa:	f043 0220 	orr.w	r2, r3, #32
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	3301      	adds	r3, #1
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4a09      	ldr	r2, [pc, #36]	; (8005830 <USB_FlushTxFifo+0x48>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d901      	bls.n	8005814 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e006      	b.n	8005822 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	f003 0320 	and.w	r3, r3, #32
 800581c:	2b20      	cmp	r3, #32
 800581e:	d0f0      	beq.n	8005802 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	00030d40 	.word	0x00030d40

08005834 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800583c:	2300      	movs	r3, #0
 800583e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2210      	movs	r2, #16
 8005844:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	3301      	adds	r3, #1
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4a09      	ldr	r2, [pc, #36]	; (8005874 <USB_FlushRxFifo+0x40>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d901      	bls.n	8005858 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e006      	b.n	8005866 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	f003 0310 	and.w	r3, r3, #16
 8005860:	2b10      	cmp	r3, #16
 8005862:	d0f0      	beq.n	8005846 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	00030d40 	.word	0x00030d40

08005878 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005878:	b480      	push	{r7}
 800587a:	b089      	sub	sp, #36	; 0x24
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	4611      	mov	r1, r2
 8005884:	461a      	mov	r2, r3
 8005886:	460b      	mov	r3, r1
 8005888:	71fb      	strb	r3, [r7, #7]
 800588a:	4613      	mov	r3, r2
 800588c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005896:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800589a:	2b00      	cmp	r3, #0
 800589c:	d11a      	bne.n	80058d4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800589e:	88bb      	ldrh	r3, [r7, #4]
 80058a0:	3303      	adds	r3, #3
 80058a2:	089b      	lsrs	r3, r3, #2
 80058a4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80058a6:	2300      	movs	r3, #0
 80058a8:	61bb      	str	r3, [r7, #24]
 80058aa:	e00f      	b.n	80058cc <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80058ac:	79fb      	ldrb	r3, [r7, #7]
 80058ae:	031a      	lsls	r2, r3, #12
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058b8:	461a      	mov	r2, r3
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	6013      	str	r3, [r2, #0]
      pSrc++;
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	3304      	adds	r3, #4
 80058c4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	3301      	adds	r3, #1
 80058ca:	61bb      	str	r3, [r7, #24]
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d3eb      	bcc.n	80058ac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3724      	adds	r7, #36	; 0x24
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b089      	sub	sp, #36	; 0x24
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	60f8      	str	r0, [r7, #12]
 80058ea:	60b9      	str	r1, [r7, #8]
 80058ec:	4613      	mov	r3, r2
 80058ee:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80058f8:	88fb      	ldrh	r3, [r7, #6]
 80058fa:	3303      	adds	r3, #3
 80058fc:	089b      	lsrs	r3, r3, #2
 80058fe:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005900:	2300      	movs	r3, #0
 8005902:	61bb      	str	r3, [r7, #24]
 8005904:	e00b      	b.n	800591e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	601a      	str	r2, [r3, #0]
    pDest++;
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	3304      	adds	r3, #4
 8005916:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	3301      	adds	r3, #1
 800591c:	61bb      	str	r3, [r7, #24]
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	429a      	cmp	r2, r3
 8005924:	d3ef      	bcc.n	8005906 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005926:	69fb      	ldr	r3, [r7, #28]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3724      	adds	r7, #36	; 0x24
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	4013      	ands	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800594c:	68fb      	ldr	r3, [r7, #12]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800595a:	b480      	push	{r7}
 800595c:	b083      	sub	sp, #12
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	f003 0301 	and.w	r3, r3, #1
}
 800596a:	4618      	mov	r0, r3
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
	...

08005978 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005980:	2300      	movs	r3, #0
 8005982:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	3301      	adds	r3, #1
 8005988:	60fb      	str	r3, [r7, #12]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	4a13      	ldr	r2, [pc, #76]	; (80059dc <USB_CoreReset+0x64>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d901      	bls.n	8005996 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e01b      	b.n	80059ce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	daf2      	bge.n	8005984 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800599e:	2300      	movs	r3, #0
 80059a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f043 0201 	orr.w	r2, r3, #1
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	3301      	adds	r3, #1
 80059b2:	60fb      	str	r3, [r7, #12]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	4a09      	ldr	r2, [pc, #36]	; (80059dc <USB_CoreReset+0x64>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d901      	bls.n	80059c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e006      	b.n	80059ce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d0f0      	beq.n	80059ae <USB_CoreReset+0x36>

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	00030d40 	.word	0x00030d40

080059e0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059e0:	b084      	sub	sp, #16
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b084      	sub	sp, #16
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
 80059ea:	f107 001c 	add.w	r0, r7, #28
 80059ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059fc:	461a      	mov	r2, r3
 80059fe:	2300      	movs	r3, #0
 8005a00:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a06:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a12:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d018      	beq.n	8005a64 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	2b03      	cmp	r3, #3
 8005a36:	d10a      	bne.n	8005a4e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a46:	f043 0304 	orr.w	r3, r3, #4
 8005a4a:	6013      	str	r3, [r2, #0]
 8005a4c:	e014      	b.n	8005a78 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a5c:	f023 0304 	bic.w	r3, r3, #4
 8005a60:	6013      	str	r3, [r2, #0]
 8005a62:	e009      	b.n	8005a78 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a72:	f023 0304 	bic.w	r3, r3, #4
 8005a76:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005a78:	2110      	movs	r1, #16
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7ff feb4 	bl	80057e8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f7ff fed7 	bl	8005834 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005a86:	2300      	movs	r3, #0
 8005a88:	60fb      	str	r3, [r7, #12]
 8005a8a:	e015      	b.n	8005ab8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a98:	461a      	mov	r2, r3
 8005a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a9e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aac:	461a      	mov	r2, r3
 8005aae:	2300      	movs	r3, #0
 8005ab0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	60fb      	str	r3, [r7, #12]
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d3e5      	bcc.n	8005a8c <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f882 	bl	8005bcc <USB_DriveVbus>

  HAL_Delay(200U);
 8005ac8:	20c8      	movs	r0, #200	; 0xc8
 8005aca:	f7fb fcdd 	bl	8001488 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8005ada:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00b      	beq.n	8005b00 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aee:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a14      	ldr	r2, [pc, #80]	; (8005b44 <USB_HostInit+0x164>)
 8005af4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a13      	ldr	r2, [pc, #76]	; (8005b48 <USB_HostInit+0x168>)
 8005afa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005afe:	e009      	b.n	8005b14 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2280      	movs	r2, #128	; 0x80
 8005b04:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a10      	ldr	r2, [pc, #64]	; (8005b4c <USB_HostInit+0x16c>)
 8005b0a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a10      	ldr	r2, [pc, #64]	; (8005b50 <USB_HostInit+0x170>)
 8005b10:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d105      	bne.n	8005b26 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	f043 0210 	orr.w	r2, r3, #16
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	699a      	ldr	r2, [r3, #24]
 8005b2a:	4b0a      	ldr	r3, [pc, #40]	; (8005b54 <USB_HostInit+0x174>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b3e:	b004      	add	sp, #16
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	01000200 	.word	0x01000200
 8005b48:	00e00300 	.word	0x00e00300
 8005b4c:	00600080 	.word	0x00600080
 8005b50:	004000e0 	.word	0x004000e0
 8005b54:	a3200008 	.word	0xa3200008

08005b58 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	460b      	mov	r3, r1
 8005b62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b76:	f023 0303 	bic.w	r3, r3, #3
 8005b7a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	78fb      	ldrb	r3, [r7, #3]
 8005b86:	f003 0303 	and.w	r3, r3, #3
 8005b8a:	68f9      	ldr	r1, [r7, #12]
 8005b8c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005b90:	4313      	orrs	r3, r2
 8005b92:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005b94:	78fb      	ldrb	r3, [r7, #3]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d107      	bne.n	8005baa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005ba6:	6053      	str	r3, [r2, #4]
 8005ba8:	e009      	b.n	8005bbe <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005baa:	78fb      	ldrb	r3, [r7, #3]
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d106      	bne.n	8005bbe <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	f241 7370 	movw	r3, #6000	; 0x1770
 8005bbc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3714      	adds	r7, #20
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005bf0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d109      	bne.n	8005c10 <USB_DriveVbus+0x44>
 8005bfc:	78fb      	ldrb	r3, [r7, #3]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d106      	bne.n	8005c10 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c0e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c1a:	d109      	bne.n	8005c30 <USB_DriveVbus+0x64>
 8005c1c:	78fb      	ldrb	r3, [r7, #3]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d106      	bne.n	8005c30 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c2e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b085      	sub	sp, #20
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	b29b      	uxth	r3, r3
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	4608      	mov	r0, r1
 8005c6a:	4611      	mov	r1, r2
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	4603      	mov	r3, r0
 8005c70:	70fb      	strb	r3, [r7, #3]
 8005c72:	460b      	mov	r3, r1
 8005c74:	70bb      	strb	r3, [r7, #2]
 8005c76:	4613      	mov	r3, r2
 8005c78:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005c82:	78fb      	ldrb	r3, [r7, #3]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c8e:	461a      	mov	r2, r3
 8005c90:	f04f 33ff 	mov.w	r3, #4294967295
 8005c94:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005c96:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005c9a:	2b03      	cmp	r3, #3
 8005c9c:	d87e      	bhi.n	8005d9c <USB_HC_Init+0x13c>
 8005c9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ca4 <USB_HC_Init+0x44>)
 8005ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca4:	08005cb5 	.word	0x08005cb5
 8005ca8:	08005d5f 	.word	0x08005d5f
 8005cac:	08005cb5 	.word	0x08005cb5
 8005cb0:	08005d21 	.word	0x08005d21
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005cb4:	78fb      	ldrb	r3, [r7, #3]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	f240 439d 	movw	r3, #1181	; 0x49d
 8005cc6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005cc8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	da10      	bge.n	8005cf2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005cd0:	78fb      	ldrb	r3, [r7, #3]
 8005cd2:	015a      	lsls	r2, r3, #5
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	78fa      	ldrb	r2, [r7, #3]
 8005ce0:	0151      	lsls	r1, r2, #5
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	440a      	add	r2, r1
 8005ce6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cee:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005cf0:	e057      	b.n	8005da2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d051      	beq.n	8005da2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005cfe:	78fb      	ldrb	r3, [r7, #3]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	78fa      	ldrb	r2, [r7, #3]
 8005d0e:	0151      	lsls	r1, r2, #5
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	440a      	add	r2, r1
 8005d14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d18:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005d1c:	60d3      	str	r3, [r2, #12]
      break;
 8005d1e:	e040      	b.n	8005da2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d20:	78fb      	ldrb	r3, [r7, #3]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	f240 639d 	movw	r3, #1693	; 0x69d
 8005d32:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005d34:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	da34      	bge.n	8005da6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005d3c:	78fb      	ldrb	r3, [r7, #3]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	78fa      	ldrb	r2, [r7, #3]
 8005d4c:	0151      	lsls	r1, r2, #5
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	440a      	add	r2, r1
 8005d52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d5a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005d5c:	e023      	b.n	8005da6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d5e:	78fb      	ldrb	r3, [r7, #3]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	f240 2325 	movw	r3, #549	; 0x225
 8005d70:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005d72:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	da17      	bge.n	8005daa <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005d7a:	78fb      	ldrb	r3, [r7, #3]
 8005d7c:	015a      	lsls	r2, r3, #5
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	4413      	add	r3, r2
 8005d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	78fa      	ldrb	r2, [r7, #3]
 8005d8a:	0151      	lsls	r1, r2, #5
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	440a      	add	r2, r1
 8005d90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d94:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005d98:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005d9a:	e006      	b.n	8005daa <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8005da0:	e004      	b.n	8005dac <USB_HC_Init+0x14c>
      break;
 8005da2:	bf00      	nop
 8005da4:	e002      	b.n	8005dac <USB_HC_Init+0x14c>
      break;
 8005da6:	bf00      	nop
 8005da8:	e000      	b.n	8005dac <USB_HC_Init+0x14c>
      break;
 8005daa:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005db2:	699a      	ldr	r2, [r3, #24]
 8005db4:	78fb      	ldrb	r3, [r7, #3]
 8005db6:	f003 030f 	and.w	r3, r3, #15
 8005dba:	2101      	movs	r1, #1
 8005dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8005dc0:	68b9      	ldr	r1, [r7, #8]
 8005dc2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005dd6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	da03      	bge.n	8005de6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005de2:	613b      	str	r3, [r7, #16]
 8005de4:	e001      	b.n	8005dea <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005de6:	2300      	movs	r3, #0
 8005de8:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005dea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d103      	bne.n	8005dfa <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005df2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005df6:	60fb      	str	r3, [r7, #12]
 8005df8:	e001      	b.n	8005dfe <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005dfe:	787b      	ldrb	r3, [r7, #1]
 8005e00:	059b      	lsls	r3, r3, #22
 8005e02:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005e06:	78bb      	ldrb	r3, [r7, #2]
 8005e08:	02db      	lsls	r3, r3, #11
 8005e0a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e0e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005e10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005e14:	049b      	lsls	r3, r3, #18
 8005e16:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005e1a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005e1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005e1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005e22:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e28:	78fb      	ldrb	r3, [r7, #3]
 8005e2a:	0159      	lsls	r1, r3, #5
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	440b      	add	r3, r1
 8005e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e34:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e3a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005e3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005e40:	2b03      	cmp	r3, #3
 8005e42:	d10f      	bne.n	8005e64 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005e44:	78fb      	ldrb	r3, [r7, #3]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	78fa      	ldrb	r2, [r7, #3]
 8005e54:	0151      	lsls	r1, r2, #5
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	440a      	add	r2, r1
 8005e5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e62:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	371c      	adds	r7, #28
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop

08005e74 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b08c      	sub	sp, #48	; 0x30
 8005e78:	af02      	add	r7, sp, #8
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	785b      	ldrb	r3, [r3, #1]
 8005e8a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005e8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e90:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d028      	beq.n	8005ef0 <USB_HC_StartXfer+0x7c>
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	791b      	ldrb	r3, [r3, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d124      	bne.n	8005ef0 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005ea6:	79fb      	ldrb	r3, [r7, #7]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10b      	bne.n	8005ec4 <USB_HC_StartXfer+0x50>
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	795b      	ldrb	r3, [r3, #5]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d107      	bne.n	8005ec4 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	785b      	ldrb	r3, [r3, #1]
 8005eb8:	4619      	mov	r1, r3
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 fa2e 	bl	800631c <USB_DoPing>
      return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	e112      	b.n	80060ea <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8005ec4:	79fb      	ldrb	r3, [r7, #7]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d112      	bne.n	8005ef0 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	69fa      	ldr	r2, [r7, #28]
 8005eda:	0151      	lsls	r1, r2, #5
 8005edc:	6a3a      	ldr	r2, [r7, #32]
 8005ede:	440a      	add	r2, r1
 8005ee0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ee4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005ee8:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	2200      	movs	r2, #0
 8005eee:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d018      	beq.n	8005f2a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	8912      	ldrh	r2, [r2, #8]
 8005f00:	4413      	add	r3, r2
 8005f02:	3b01      	subs	r3, #1
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	8912      	ldrh	r2, [r2, #8]
 8005f08:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f0c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005f0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005f10:	8b7b      	ldrh	r3, [r7, #26]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d90b      	bls.n	8005f2e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005f16:	8b7b      	ldrh	r3, [r7, #26]
 8005f18:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005f1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	8912      	ldrh	r2, [r2, #8]
 8005f20:	fb02 f203 	mul.w	r2, r2, r3
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	611a      	str	r2, [r3, #16]
 8005f28:	e001      	b.n	8005f2e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	78db      	ldrb	r3, [r3, #3]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d006      	beq.n	8005f44 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005f36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f38:	68ba      	ldr	r2, [r7, #8]
 8005f3a:	8912      	ldrh	r2, [r2, #8]
 8005f3c:	fb02 f203 	mul.w	r2, r2, r3
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f4e:	04d9      	lsls	r1, r3, #19
 8005f50:	4b68      	ldr	r3, [pc, #416]	; (80060f4 <USB_HC_StartXfer+0x280>)
 8005f52:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f54:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	7a9b      	ldrb	r3, [r3, #10]
 8005f5a:	075b      	lsls	r3, r3, #29
 8005f5c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f60:	69f9      	ldr	r1, [r7, #28]
 8005f62:	0148      	lsls	r0, r1, #5
 8005f64:	6a39      	ldr	r1, [r7, #32]
 8005f66:	4401      	add	r1, r0
 8005f68:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f6c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f6e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005f70:	79fb      	ldrb	r3, [r7, #7]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d009      	beq.n	8005f8a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	68d9      	ldr	r1, [r3, #12]
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	015a      	lsls	r2, r3, #5
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	4413      	add	r3, r2
 8005f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f86:	460a      	mov	r2, r1
 8005f88:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005f8a:	6a3b      	ldr	r3, [r7, #32]
 8005f8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	bf0c      	ite	eq
 8005f9a:	2301      	moveq	r3, #1
 8005f9c:	2300      	movne	r3, #0
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	69fa      	ldr	r2, [r7, #28]
 8005fb2:	0151      	lsls	r1, r2, #5
 8005fb4:	6a3a      	ldr	r2, [r7, #32]
 8005fb6:	440a      	add	r2, r1
 8005fb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fbc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005fc0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	6a3b      	ldr	r3, [r7, #32]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	7e7b      	ldrb	r3, [r7, #25]
 8005fd2:	075b      	lsls	r3, r3, #29
 8005fd4:	69f9      	ldr	r1, [r7, #28]
 8005fd6:	0148      	lsls	r0, r1, #5
 8005fd8:	6a39      	ldr	r1, [r7, #32]
 8005fda:	4401      	add	r1, r0
 8005fdc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a41      	ldr	r2, [pc, #260]	; (80060f8 <USB_HC_StartXfer+0x284>)
 8005ff4:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ff6:	4b40      	ldr	r3, [pc, #256]	; (80060f8 <USB_HC_StartXfer+0x284>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ffe:	4a3e      	ldr	r2, [pc, #248]	; (80060f8 <USB_HC_StartXfer+0x284>)
 8006000:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	78db      	ldrb	r3, [r3, #3]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d006      	beq.n	8006018 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800600a:	4b3b      	ldr	r3, [pc, #236]	; (80060f8 <USB_HC_StartXfer+0x284>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006012:	4a39      	ldr	r2, [pc, #228]	; (80060f8 <USB_HC_StartXfer+0x284>)
 8006014:	6013      	str	r3, [r2, #0]
 8006016:	e005      	b.n	8006024 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006018:	4b37      	ldr	r3, [pc, #220]	; (80060f8 <USB_HC_StartXfer+0x284>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006020:	4a35      	ldr	r2, [pc, #212]	; (80060f8 <USB_HC_StartXfer+0x284>)
 8006022:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006024:	4b34      	ldr	r3, [pc, #208]	; (80060f8 <USB_HC_StartXfer+0x284>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800602c:	4a32      	ldr	r2, [pc, #200]	; (80060f8 <USB_HC_StartXfer+0x284>)
 800602e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	6a3b      	ldr	r3, [r7, #32]
 8006036:	4413      	add	r3, r2
 8006038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800603c:	461a      	mov	r2, r3
 800603e:	4b2e      	ldr	r3, [pc, #184]	; (80060f8 <USB_HC_StartXfer+0x284>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8006044:	79fb      	ldrb	r3, [r7, #7]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d14e      	bne.n	80060e8 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	78db      	ldrb	r3, [r3, #3]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d14a      	bne.n	80060e8 <USB_HC_StartXfer+0x274>
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d046      	beq.n	80060e8 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	79db      	ldrb	r3, [r3, #7]
 800605e:	2b03      	cmp	r3, #3
 8006060:	d830      	bhi.n	80060c4 <USB_HC_StartXfer+0x250>
 8006062:	a201      	add	r2, pc, #4	; (adr r2, 8006068 <USB_HC_StartXfer+0x1f4>)
 8006064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006068:	08006079 	.word	0x08006079
 800606c:	0800609d 	.word	0x0800609d
 8006070:	08006079 	.word	0x08006079
 8006074:	0800609d 	.word	0x0800609d
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	3303      	adds	r3, #3
 800607e:	089b      	lsrs	r3, r3, #2
 8006080:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006082:	8afa      	ldrh	r2, [r7, #22]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006088:	b29b      	uxth	r3, r3
 800608a:	429a      	cmp	r2, r3
 800608c:	d91c      	bls.n	80060c8 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	f043 0220 	orr.w	r2, r3, #32
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	619a      	str	r2, [r3, #24]
          }
          break;
 800609a:	e015      	b.n	80060c8 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	3303      	adds	r3, #3
 80060a2:	089b      	lsrs	r3, r3, #2
 80060a4:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80060a6:	8afa      	ldrh	r2, [r7, #22]
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d90a      	bls.n	80060cc <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	619a      	str	r2, [r3, #24]
          }
          break;
 80060c2:	e003      	b.n	80060cc <USB_HC_StartXfer+0x258>

        default:
          break;
 80060c4:	bf00      	nop
 80060c6:	e002      	b.n	80060ce <USB_HC_StartXfer+0x25a>
          break;
 80060c8:	bf00      	nop
 80060ca:	e000      	b.n	80060ce <USB_HC_StartXfer+0x25a>
          break;
 80060cc:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	68d9      	ldr	r1, [r3, #12]
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	785a      	ldrb	r2, [r3, #1]
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	b298      	uxth	r0, r3
 80060dc:	2300      	movs	r3, #0
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	4603      	mov	r3, r0
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f7ff fbc8 	bl	8005878 <USB_WritePacket>
    }
  }

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3728      	adds	r7, #40	; 0x28
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	1ff80000 	.word	0x1ff80000
 80060f8:	200000bc 	.word	0x200000bc

080060fc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	b29b      	uxth	r3, r3
}
 8006112:	4618      	mov	r0, r3
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800611e:	b480      	push	{r7}
 8006120:	b087      	sub	sp, #28
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	460b      	mov	r3, r1
 8006128:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800612e:	78fb      	ldrb	r3, [r7, #3]
 8006130:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006132:	2300      	movs	r3, #0
 8006134:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	4413      	add	r3, r2
 800613e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	0c9b      	lsrs	r3, r3, #18
 8006146:	f003 0303 	and.w	r3, r3, #3
 800614a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d002      	beq.n	8006158 <USB_HC_Halt+0x3a>
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2b02      	cmp	r3, #2
 8006156:	d16c      	bne.n	8006232 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	4413      	add	r3, r2
 8006160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	0151      	lsls	r1, r2, #5
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	440a      	add	r2, r1
 800616e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006172:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006176:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d143      	bne.n	800620c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	4413      	add	r3, r2
 800618c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	0151      	lsls	r1, r2, #5
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	440a      	add	r2, r1
 800619a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800619e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061a2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	0151      	lsls	r1, r2, #5
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	440a      	add	r2, r1
 80061ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061c2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	0151      	lsls	r1, r2, #5
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	440a      	add	r2, r1
 80061da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061e2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	3301      	adds	r3, #1
 80061e8:	617b      	str	r3, [r7, #20]
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061f0:	d81d      	bhi.n	800622e <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006204:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006208:	d0ec      	beq.n	80061e4 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800620a:	e080      	b.n	800630e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	015a      	lsls	r2, r3, #5
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	4413      	add	r3, r2
 8006214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	0151      	lsls	r1, r2, #5
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	440a      	add	r2, r1
 8006222:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006226:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800622a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800622c:	e06f      	b.n	800630e <USB_HC_Halt+0x1f0>
          break;
 800622e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006230:	e06d      	b.n	800630e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	015a      	lsls	r2, r3, #5
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	4413      	add	r3, r2
 800623a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	0151      	lsls	r1, r2, #5
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	440a      	add	r2, r1
 8006248:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800624c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006250:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d143      	bne.n	80062ea <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	4413      	add	r3, r2
 800626a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	0151      	lsls	r1, r2, #5
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	440a      	add	r2, r1
 8006278:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800627c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006280:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	4413      	add	r3, r2
 800628a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	0151      	lsls	r1, r2, #5
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	440a      	add	r2, r1
 8006298:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800629c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062a0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	015a      	lsls	r2, r3, #5
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	4413      	add	r3, r2
 80062aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	0151      	lsls	r1, r2, #5
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	440a      	add	r2, r1
 80062b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062c0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	3301      	adds	r3, #1
 80062c6:	617b      	str	r3, [r7, #20]
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062ce:	d81d      	bhi.n	800630c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062e6:	d0ec      	beq.n	80062c2 <USB_HC_Halt+0x1a4>
 80062e8:	e011      	b.n	800630e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	015a      	lsls	r2, r3, #5
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	4413      	add	r3, r2
 80062f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	0151      	lsls	r1, r2, #5
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	440a      	add	r2, r1
 8006300:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006304:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006308:	6013      	str	r3, [r2, #0]
 800630a:	e000      	b.n	800630e <USB_HC_Halt+0x1f0>
          break;
 800630c:	bf00      	nop
    }
  }

  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	371c      	adds	r7, #28
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800631c:	b480      	push	{r7}
 800631e:	b087      	sub	sp, #28
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	460b      	mov	r3, r1
 8006326:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800632c:	78fb      	ldrb	r3, [r7, #3]
 800632e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006330:	2301      	movs	r3, #1
 8006332:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	04da      	lsls	r2, r3, #19
 8006338:	4b15      	ldr	r3, [pc, #84]	; (8006390 <USB_DoPing+0x74>)
 800633a:	4013      	ands	r3, r2
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	0151      	lsls	r1, r2, #5
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	440a      	add	r2, r1
 8006344:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006348:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800634c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	015a      	lsls	r2, r3, #5
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	4413      	add	r3, r2
 8006356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006364:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800636c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	4413      	add	r3, r2
 8006376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800637a:	461a      	mov	r2, r3
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	371c      	adds	r7, #28
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	1ff80000 	.word	0x1ff80000

08006394 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80063a0:	2300      	movs	r3, #0
 80063a2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f7ff f9e3 	bl	8005770 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80063aa:	2110      	movs	r1, #16
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7ff fa1b 	bl	80057e8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f7ff fa3e 	bl	8005834 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80063b8:	2300      	movs	r3, #0
 80063ba:	613b      	str	r3, [r7, #16]
 80063bc:	e01f      	b.n	80063fe <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063d4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063dc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063e4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f2:	461a      	mov	r2, r3
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	3301      	adds	r3, #1
 80063fc:	613b      	str	r3, [r7, #16]
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	2b0f      	cmp	r3, #15
 8006402:	d9dc      	bls.n	80063be <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006404:	2300      	movs	r3, #0
 8006406:	613b      	str	r3, [r7, #16]
 8006408:	e034      	b.n	8006474 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	4413      	add	r3, r2
 8006412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006420:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006428:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006430:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	015a      	lsls	r2, r3, #5
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	4413      	add	r3, r2
 800643a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800643e:	461a      	mov	r2, r3
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	3301      	adds	r3, #1
 8006448:	617b      	str	r3, [r7, #20]
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006450:	d80c      	bhi.n	800646c <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	4413      	add	r3, r2
 800645a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006464:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006468:	d0ec      	beq.n	8006444 <USB_StopHost+0xb0>
 800646a:	e000      	b.n	800646e <USB_StopHost+0xda>
        break;
 800646c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	3301      	adds	r3, #1
 8006472:	613b      	str	r3, [r7, #16]
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	2b0f      	cmp	r3, #15
 8006478:	d9c7      	bls.n	800640a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006480:	461a      	mov	r2, r3
 8006482:	f04f 33ff 	mov.w	r3, #4294967295
 8006486:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f04f 32ff 	mov.w	r2, #4294967295
 800648e:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f7ff f95c 	bl	800574e <USB_EnableGlobalInt>

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3718      	adds	r7, #24
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 80064a0:	b590      	push	{r4, r7, lr}
 80064a2:	b089      	sub	sp, #36	; 0x24
 80064a4:	af04      	add	r7, sp, #16
 80064a6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 80064a8:	2302      	movs	r3, #2
 80064aa:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 80064ac:	2301      	movs	r3, #1
 80064ae:	2202      	movs	r2, #2
 80064b0:	2102      	movs	r1, #2
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fc3a 	bl	8006d2c <USBH_FindInterface>
 80064b8:	4603      	mov	r3, r0
 80064ba:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 80064bc:	7bbb      	ldrb	r3, [r7, #14]
 80064be:	2bff      	cmp	r3, #255	; 0xff
 80064c0:	f000 812a 	beq.w	8006718 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 80064c4:	7bbb      	ldrb	r3, [r7, #14]
 80064c6:	4619      	mov	r1, r3
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fc13 	bl	8006cf4 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 80064d4:	2050      	movs	r0, #80	; 0x50
 80064d6:	f001 fb09 	bl	8007aec <malloc>
 80064da:	4603      	mov	r3, r0
 80064dc:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80064e8:	7bbb      	ldrb	r3, [r7, #14]
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	211a      	movs	r1, #26
 80064ee:	fb01 f303 	mul.w	r3, r1, r3
 80064f2:	4413      	add	r3, r2
 80064f4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	b25b      	sxtb	r3, r3
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	da15      	bge.n	800652c <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006500:	7bbb      	ldrb	r3, [r7, #14]
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	211a      	movs	r1, #26
 8006506:	fb01 f303 	mul.w	r3, r1, r3
 800650a:	4413      	add	r3, r2
 800650c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006510:	781a      	ldrb	r2, [r3, #0]
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006516:	7bbb      	ldrb	r3, [r7, #14]
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	211a      	movs	r1, #26
 800651c:	fb01 f303 	mul.w	r3, r1, r3
 8006520:	4413      	add	r3, r2
 8006522:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006526:	881a      	ldrh	r2, [r3, #0]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	785b      	ldrb	r3, [r3, #1]
 8006530:	4619      	mov	r1, r3
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 ff9f 	bl	8007476 <USBH_AllocPipe>
 8006538:	4603      	mov	r3, r0
 800653a:	461a      	mov	r2, r3
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	7819      	ldrb	r1, [r3, #0]
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	7858      	ldrb	r0, [r3, #1]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	8952      	ldrh	r2, [r2, #10]
 8006558:	9202      	str	r2, [sp, #8]
 800655a:	2203      	movs	r2, #3
 800655c:	9201      	str	r2, [sp, #4]
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	4623      	mov	r3, r4
 8006562:	4602      	mov	r2, r0
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 ff57 	bl	8007418 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	2200      	movs	r2, #0
 8006570:	4619      	mov	r1, r3
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f001 fa14 	bl	80079a0 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8006578:	2300      	movs	r3, #0
 800657a:	2200      	movs	r2, #0
 800657c:	210a      	movs	r1, #10
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fbd4 	bl	8006d2c <USBH_FindInterface>
 8006584:	4603      	mov	r3, r0
 8006586:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8006588:	7bbb      	ldrb	r3, [r7, #14]
 800658a:	2bff      	cmp	r3, #255	; 0xff
 800658c:	f000 80c4 	beq.w	8006718 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006590:	7bbb      	ldrb	r3, [r7, #14]
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	211a      	movs	r1, #26
 8006596:	fb01 f303 	mul.w	r3, r1, r3
 800659a:	4413      	add	r3, r2
 800659c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	b25b      	sxtb	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	da16      	bge.n	80065d6 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80065a8:	7bbb      	ldrb	r3, [r7, #14]
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	211a      	movs	r1, #26
 80065ae:	fb01 f303 	mul.w	r3, r1, r3
 80065b2:	4413      	add	r3, r2
 80065b4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80065b8:	781a      	ldrb	r2, [r3, #0]
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80065be:	7bbb      	ldrb	r3, [r7, #14]
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	211a      	movs	r1, #26
 80065c4:	fb01 f303 	mul.w	r3, r1, r3
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80065ce:	881a      	ldrh	r2, [r3, #0]
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	835a      	strh	r2, [r3, #26]
 80065d4:	e015      	b.n	8006602 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80065d6:	7bbb      	ldrb	r3, [r7, #14]
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	211a      	movs	r1, #26
 80065dc:	fb01 f303 	mul.w	r3, r1, r3
 80065e0:	4413      	add	r3, r2
 80065e2:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80065e6:	781a      	ldrb	r2, [r3, #0]
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80065ec:	7bbb      	ldrb	r3, [r7, #14]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	211a      	movs	r1, #26
 80065f2:	fb01 f303 	mul.w	r3, r1, r3
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80065fc:	881a      	ldrh	r2, [r3, #0]
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006602:	7bbb      	ldrb	r3, [r7, #14]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	211a      	movs	r1, #26
 8006608:	fb01 f303 	mul.w	r3, r1, r3
 800660c:	4413      	add	r3, r2
 800660e:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	b25b      	sxtb	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	da16      	bge.n	8006648 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800661a:	7bbb      	ldrb	r3, [r7, #14]
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	211a      	movs	r1, #26
 8006620:	fb01 f303 	mul.w	r3, r1, r3
 8006624:	4413      	add	r3, r2
 8006626:	f203 3352 	addw	r3, r3, #850	; 0x352
 800662a:	781a      	ldrb	r2, [r3, #0]
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006630:	7bbb      	ldrb	r3, [r7, #14]
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	211a      	movs	r1, #26
 8006636:	fb01 f303 	mul.w	r3, r1, r3
 800663a:	4413      	add	r3, r2
 800663c:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8006640:	881a      	ldrh	r2, [r3, #0]
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	835a      	strh	r2, [r3, #26]
 8006646:	e015      	b.n	8006674 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006648:	7bbb      	ldrb	r3, [r7, #14]
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	211a      	movs	r1, #26
 800664e:	fb01 f303 	mul.w	r3, r1, r3
 8006652:	4413      	add	r3, r2
 8006654:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006658:	781a      	ldrb	r2, [r3, #0]
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800665e:	7bbb      	ldrb	r3, [r7, #14]
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	211a      	movs	r1, #26
 8006664:	fb01 f303 	mul.w	r3, r1, r3
 8006668:	4413      	add	r3, r2
 800666a:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800666e:	881a      	ldrh	r2, [r3, #0]
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	7b9b      	ldrb	r3, [r3, #14]
 8006678:	4619      	mov	r1, r3
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fefb 	bl	8007476 <USBH_AllocPipe>
 8006680:	4603      	mov	r3, r0
 8006682:	461a      	mov	r2, r3
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	7bdb      	ldrb	r3, [r3, #15]
 800668c:	4619      	mov	r1, r3
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fef1 	bl	8007476 <USBH_AllocPipe>
 8006694:	4603      	mov	r3, r0
 8006696:	461a      	mov	r2, r3
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	7b59      	ldrb	r1, [r3, #13]
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	7b98      	ldrb	r0, [r3, #14]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	8b12      	ldrh	r2, [r2, #24]
 80066b4:	9202      	str	r2, [sp, #8]
 80066b6:	2202      	movs	r2, #2
 80066b8:	9201      	str	r2, [sp, #4]
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	4623      	mov	r3, r4
 80066be:	4602      	mov	r2, r0
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 fea9 	bl	8007418 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	7b19      	ldrb	r1, [r3, #12]
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	7bd8      	ldrb	r0, [r3, #15]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	8b52      	ldrh	r2, [r2, #26]
 80066de:	9202      	str	r2, [sp, #8]
 80066e0:	2202      	movs	r2, #2
 80066e2:	9201      	str	r2, [sp, #4]
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	4623      	mov	r3, r4
 80066e8:	4602      	mov	r2, r0
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fe94 	bl	8007418 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	7b5b      	ldrb	r3, [r3, #13]
 80066fc:	2200      	movs	r2, #0
 80066fe:	4619      	mov	r1, r3
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f001 f94d 	bl	80079a0 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	7b1b      	ldrb	r3, [r3, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	4619      	mov	r1, r3
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f001 f946 	bl	80079a0 <USBH_LL_SetToggle>
      status = USBH_OK;
 8006714:	2300      	movs	r3, #0
 8006716:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8006718:	7bfb      	ldrb	r3, [r7, #15]
}
 800671a:	4618      	mov	r0, r3
 800671c:	3714      	adds	r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	bd90      	pop	{r4, r7, pc}

08006722 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b084      	sub	sp, #16
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00e      	beq.n	800675a <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	4619      	mov	r1, r3
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 fe87 	bl	8007456 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	4619      	mov	r1, r3
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 feaf 	bl	80074b2 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	7b1b      	ldrb	r3, [r3, #12]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00e      	beq.n	8006780 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	7b1b      	ldrb	r3, [r3, #12]
 8006766:	4619      	mov	r1, r3
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 fe74 	bl	8007456 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	7b1b      	ldrb	r3, [r3, #12]
 8006772:	4619      	mov	r1, r3
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 fe9c 	bl	80074b2 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	7b5b      	ldrb	r3, [r3, #13]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00e      	beq.n	80067a6 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	7b5b      	ldrb	r3, [r3, #13]
 800678c:	4619      	mov	r1, r3
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fe61 	bl	8007456 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	7b5b      	ldrb	r3, [r3, #13]
 8006798:	4619      	mov	r1, r3
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fe89 	bl	80074b2 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80067ac:	69db      	ldr	r3, [r3, #28]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00b      	beq.n	80067ca <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80067b8:	69db      	ldr	r3, [r3, #28]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f001 f99e 	bl	8007afc <free>
    phost->pActiveClass->pData = 0U;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80067c6:	2200      	movs	r2, #0
 80067c8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 80067dc:	2302      	movs	r3, #2
 80067de:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80067e6:	69db      	ldr	r3, [r3, #28]
 80067e8:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	3340      	adds	r3, #64	; 0x40
 80067ee:	4619      	mov	r1, r3
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 f8b2 	bl	800695a <GetLineCoding>
 80067f6:	4603      	mov	r3, r0
 80067f8:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 80067fa:	7bfb      	ldrb	r3, [r7, #15]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d105      	bne.n	800680c <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006806:	2102      	movs	r1, #2
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	4798      	blx	r3
  }
  return status;
 800680c:	7bfb      	ldrb	r3, [r7, #15]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
	...

08006818 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006820:	2301      	movs	r3, #1
 8006822:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006824:	2300      	movs	r3, #0
 8006826:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800682e:	69db      	ldr	r3, [r3, #28]
 8006830:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006838:	2b04      	cmp	r3, #4
 800683a:	d877      	bhi.n	800692c <USBH_CDC_Process+0x114>
 800683c:	a201      	add	r2, pc, #4	; (adr r2, 8006844 <USBH_CDC_Process+0x2c>)
 800683e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006842:	bf00      	nop
 8006844:	08006859 	.word	0x08006859
 8006848:	0800685f 	.word	0x0800685f
 800684c:	0800688f 	.word	0x0800688f
 8006850:	08006903 	.word	0x08006903
 8006854:	08006911 	.word	0x08006911
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8006858:	2300      	movs	r3, #0
 800685a:	73fb      	strb	r3, [r7, #15]
    break;
 800685c:	e06d      	b.n	800693a <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006862:	4619      	mov	r1, r3
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 f897 	bl	8006998 <SetLineCoding>
 800686a:	4603      	mov	r3, r0
 800686c:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800686e:	7bbb      	ldrb	r3, [r7, #14]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d104      	bne.n	800687e <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800687c:	e058      	b.n	8006930 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800687e:	7bbb      	ldrb	r3, [r7, #14]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d055      	beq.n	8006930 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	2204      	movs	r2, #4
 8006888:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800688c:	e050      	b.n	8006930 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	3340      	adds	r3, #64	; 0x40
 8006892:	4619      	mov	r1, r3
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f860 	bl	800695a <GetLineCoding>
 800689a:	4603      	mov	r3, r0
 800689c:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800689e:	7bbb      	ldrb	r3, [r7, #14]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d126      	bne.n	80068f2 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068b6:	791b      	ldrb	r3, [r3, #4]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d13b      	bne.n	8006934 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068c6:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d133      	bne.n	8006934 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068d6:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80068d8:	429a      	cmp	r2, r3
 80068da:	d12b      	bne.n	8006934 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068e4:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d124      	bne.n	8006934 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f95a 	bl	8006ba4 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80068f0:	e020      	b.n	8006934 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 80068f2:	7bbb      	ldrb	r3, [r7, #14]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d01d      	beq.n	8006934 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2204      	movs	r2, #4
 80068fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006900:	e018      	b.n	8006934 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f867 	bl	80069d6 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 f8dc 	bl	8006ac6 <CDC_ProcessReception>
    break;
 800690e:	e014      	b.n	800693a <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8006910:	2100      	movs	r1, #0
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fb08 	bl	8006f28 <USBH_ClrFeature>
 8006918:	4603      	mov	r3, r0
 800691a:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 800691c:	7bbb      	ldrb	r3, [r7, #14]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10a      	bne.n	8006938 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 800692a:	e005      	b.n	8006938 <USBH_CDC_Process+0x120>

  default:
    break;
 800692c:	bf00      	nop
 800692e:	e004      	b.n	800693a <USBH_CDC_Process+0x122>
    break;
 8006930:	bf00      	nop
 8006932:	e002      	b.n	800693a <USBH_CDC_Process+0x122>
    break;
 8006934:	bf00      	nop
 8006936:	e000      	b.n	800693a <USBH_CDC_Process+0x122>
    break;
 8006938:	bf00      	nop

  }

  return status;
 800693a:	7bfb      	ldrb	r3, [r7, #15]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	370c      	adds	r7, #12
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b082      	sub	sp, #8
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
 8006962:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	22a1      	movs	r2, #161	; 0xa1
 8006968:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2221      	movs	r2, #33	; 0x21
 800696e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2207      	movs	r2, #7
 8006980:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2207      	movs	r2, #7
 8006986:	4619      	mov	r1, r3
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 faf1 	bl	8006f70 <USBH_CtlReq>
 800698e:	4603      	mov	r3, r0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2221      	movs	r2, #33	; 0x21
 80069a6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2220      	movs	r2, #32
 80069ac:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2207      	movs	r2, #7
 80069be:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	2207      	movs	r2, #7
 80069c4:	4619      	mov	r1, r3
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fad2 	bl	8006f70 <USBH_CtlReq>
 80069cc:	4603      	mov	r3, r0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3708      	adds	r7, #8
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b086      	sub	sp, #24
 80069da:	af02      	add	r7, sp, #8
 80069dc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80069e8:	2300      	movs	r3, #0
 80069ea:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d002      	beq.n	80069fc <CDC_ProcessTransmission+0x26>
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d025      	beq.n	8006a46 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 80069fa:	e060      	b.n	8006abe <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	8b12      	ldrh	r2, [r2, #24]
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d90c      	bls.n	8006a22 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	69d9      	ldr	r1, [r3, #28]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	8b1a      	ldrh	r2, [r3, #24]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	7b58      	ldrb	r0, [r3, #13]
 8006a14:	2301      	movs	r3, #1
 8006a16:	9300      	str	r3, [sp, #0]
 8006a18:	4603      	mov	r3, r0
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fcb9 	bl	8007392 <USBH_BulkSendData>
 8006a20:	e00c      	b.n	8006a3c <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	7b58      	ldrb	r0, [r3, #13]
 8006a30:	2301      	movs	r3, #1
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	4603      	mov	r3, r0
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 fcab 	bl	8007392 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2202      	movs	r2, #2
 8006a40:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006a44:	e03b      	b.n	8006abe <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	7b5b      	ldrb	r3, [r3, #13]
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 ff7d 	bl	800794c <USBH_LL_GetURBState>
 8006a52:	4603      	mov	r3, r0
 8006a54:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8006a56:	7afb      	ldrb	r3, [r7, #11]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d128      	bne.n	8006aae <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	8b12      	ldrh	r2, [r2, #24]
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d90e      	bls.n	8006a86 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	8b12      	ldrh	r2, [r2, #24]
 8006a70:	1a9a      	subs	r2, r3, r2
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	8b12      	ldrh	r2, [r2, #24]
 8006a7e:	441a      	add	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	61da      	str	r2, [r3, #28]
 8006a84:	e002      	b.n	8006a8c <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d004      	beq.n	8006a9e <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006a9c:	e00e      	b.n	8006abc <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f868 	bl	8006b7c <USBH_CDC_TransmitCallback>
    break;
 8006aac:	e006      	b.n	8006abc <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8006aae:	7afb      	ldrb	r3, [r7, #11]
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	d103      	bne.n	8006abc <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006abc:	bf00      	nop
  }
}
 8006abe:	bf00      	nop
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b086      	sub	sp, #24
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006ae2:	2b03      	cmp	r3, #3
 8006ae4:	d002      	beq.n	8006aec <CDC_ProcessReception+0x26>
 8006ae6:	2b04      	cmp	r3, #4
 8006ae8:	d00e      	beq.n	8006b08 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8006aea:	e043      	b.n	8006b74 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	6a19      	ldr	r1, [r3, #32]
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	8b5a      	ldrh	r2, [r3, #26]
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	7b1b      	ldrb	r3, [r3, #12]
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 fc6f 	bl	80073dc <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	2204      	movs	r2, #4
 8006b02:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8006b06:	e035      	b.n	8006b74 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	7b1b      	ldrb	r3, [r3, #12]
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 ff1c 	bl	800794c <USBH_LL_GetURBState>
 8006b14:	4603      	mov	r3, r0
 8006b16:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8006b18:	7cfb      	ldrb	r3, [r7, #19]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d129      	bne.n	8006b72 <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	7b1b      	ldrb	r3, [r3, #12]
 8006b22:	4619      	mov	r1, r3
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 fe7f 	bl	8007828 <USBH_LL_GetLastXferSize>
 8006b2a:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d016      	beq.n	8006b64 <CDC_ProcessReception+0x9e>
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	8b5b      	ldrh	r3, [r3, #26]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d910      	bls.n	8006b64 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	1ad2      	subs	r2, r2, r3
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	6a1a      	ldr	r2, [r3, #32]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	441a      	add	r2, r3
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	2203      	movs	r2, #3
 8006b5e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8006b62:	e006      	b.n	8006b72 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f80f 	bl	8006b90 <USBH_CDC_ReceiveCallback>
    break;
 8006b72:	bf00      	nop
  }
}
 8006b74:	bf00      	nop
 8006b76:	3718      	adds	r7, #24
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]

}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]

}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]

}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d101      	bne.n	8006bd0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006bcc:	2302      	movs	r3, #2
 8006bce:	e019      	b.n	8006c04 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	79fa      	ldrb	r2, [r7, #7]
 8006bd4:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 f80f 	bl	8006c0c <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d003      	beq.n	8006bfc <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f000 fda1 	bl	8007744 <USBH_LL_Init>

  return USBH_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006c18:	e008      	b.n	8006c2c <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	32e0      	adds	r2, #224	; 0xe0
 8006c20:	2100      	movs	r1, #0
 8006c22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	60fb      	str	r3, [r7, #12]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2b0e      	cmp	r3, #14
 8006c30:	d9f3      	bls.n	8006c1a <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006c32:	2300      	movs	r3, #0
 8006c34:	60fb      	str	r3, [r7, #12]
 8006c36:	e009      	b.n	8006c4c <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006c42:	2200      	movs	r2, #0
 8006c44:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	60fb      	str	r3, [r7, #12]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c52:	d3f1      	bcc.n	8006c38 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2240      	movs	r2, #64	; 0x40
 8006c78:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr

08006c9e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	b085      	sub	sp, #20
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
 8006ca6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d017      	beq.n	8006ce2 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10f      	bne.n	8006cdc <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cc2:	1c59      	adds	r1, r3, #1
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	33dc      	adds	r3, #220	; 0xdc
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4413      	add	r3, r2
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	73fb      	strb	r3, [r7, #15]
 8006cda:	e004      	b.n	8006ce6 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006cdc:	2302      	movs	r3, #2
 8006cde:	73fb      	strb	r3, [r7, #15]
 8006ce0:	e001      	b.n	8006ce6 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3714      	adds	r7, #20
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8006d00:	2300      	movs	r3, #0
 8006d02:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8006d0a:	78fa      	ldrb	r2, [r7, #3]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d204      	bcs.n	8006d1a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	78fa      	ldrb	r2, [r7, #3]
 8006d14:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8006d18:	e001      	b.n	8006d1e <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006d1a:	2302      	movs	r3, #2
 8006d1c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3714      	adds	r7, #20
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b087      	sub	sp, #28
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	4608      	mov	r0, r1
 8006d36:	4611      	mov	r1, r2
 8006d38:	461a      	mov	r2, r3
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	70fb      	strb	r3, [r7, #3]
 8006d3e:	460b      	mov	r3, r1
 8006d40:	70bb      	strb	r3, [r7, #2]
 8006d42:	4613      	mov	r3, r2
 8006d44:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006d54:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006d56:	e025      	b.n	8006da4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006d58:	7dfb      	ldrb	r3, [r7, #23]
 8006d5a:	221a      	movs	r2, #26
 8006d5c:	fb02 f303 	mul.w	r3, r2, r3
 8006d60:	3308      	adds	r3, #8
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	4413      	add	r3, r2
 8006d66:	3302      	adds	r3, #2
 8006d68:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	795b      	ldrb	r3, [r3, #5]
 8006d6e:	78fa      	ldrb	r2, [r7, #3]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d002      	beq.n	8006d7a <USBH_FindInterface+0x4e>
 8006d74:	78fb      	ldrb	r3, [r7, #3]
 8006d76:	2bff      	cmp	r3, #255	; 0xff
 8006d78:	d111      	bne.n	8006d9e <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006d7e:	78ba      	ldrb	r2, [r7, #2]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d002      	beq.n	8006d8a <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006d84:	78bb      	ldrb	r3, [r7, #2]
 8006d86:	2bff      	cmp	r3, #255	; 0xff
 8006d88:	d109      	bne.n	8006d9e <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006d8e:	787a      	ldrb	r2, [r7, #1]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d002      	beq.n	8006d9a <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006d94:	787b      	ldrb	r3, [r7, #1]
 8006d96:	2bff      	cmp	r3, #255	; 0xff
 8006d98:	d101      	bne.n	8006d9e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006d9a:	7dfb      	ldrb	r3, [r7, #23]
 8006d9c:	e006      	b.n	8006dac <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006d9e:	7dfb      	ldrb	r3, [r7, #23]
 8006da0:	3301      	adds	r3, #1
 8006da2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006da4:	7dfb      	ldrb	r3, [r7, #23]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d9d6      	bls.n	8006d58 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006daa:	23ff      	movs	r3, #255	; 0xff
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	371c      	adds	r7, #28
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fcfb 	bl	80077bc <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8006dc6:	2101      	movs	r1, #1
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fdd2 	bl	8007972 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	683a      	ldr	r2, [r7, #0]
 8006de6:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8006dea:	bf00      	nop
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b082      	sub	sp, #8
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006e04:	1c5a      	adds	r2, r3, #1
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f804 	bl	8006e1a <USBH_HandleSof>
}
 8006e12:	bf00      	nop
 8006e14:	3708      	adds	r7, #8
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b082      	sub	sp, #8
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	2b0b      	cmp	r3, #11
 8006e2a:	d10a      	bne.n	8006e42 <USBH_HandleSof+0x28>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d005      	beq.n	8006e42 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	4798      	blx	r3
  }
}
 8006e42:	bf00      	nop
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b083      	sub	sp, #12
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8006e5a:	bf00      	nop
}
 8006e5c:	370c      	adds	r7, #12
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b083      	sub	sp, #12
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8006e76:	bf00      	nop
}
 8006e78:	370c      	adds	r7, #12
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b082      	sub	sp, #8
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10f      	bne.n	8006eb4 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00e      	beq.n	8006ec4 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006eac:	2104      	movs	r1, #4
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	4798      	blx	r3
 8006eb2:	e007      	b.n	8006ec4 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d102      	bne.n	8006ec4 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2202      	movs	r2, #2
 8006ec2:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b082      	sub	sp, #8
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 fc8b 	bl	80077f2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	791b      	ldrb	r3, [r3, #4]
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fae5 	bl	80074b2 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	795b      	ldrb	r3, [r3, #5]
 8006eec:	4619      	mov	r1, r3
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fadf 	bl	80074b2 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d005      	beq.n	8006f12 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006f0c:	2105      	movs	r1, #5
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fc52 	bl	80077bc <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2203      	movs	r2, #3
 8006f1c:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	460b      	mov	r3, r1
 8006f32:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	789b      	ldrb	r3, [r3, #2]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d10f      	bne.n	8006f5c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2202      	movs	r2, #2
 8006f40:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006f4e:	78fb      	ldrb	r3, [r7, #3]
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	2100      	movs	r1, #0
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f805 	bl	8006f70 <USBH_CtlReq>
 8006f66:	4603      	mov	r3, r0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3708      	adds	r7, #8
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b086      	sub	sp, #24
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	789b      	ldrb	r3, [r3, #2]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d002      	beq.n	8006f90 <USBH_CtlReq+0x20>
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d00f      	beq.n	8006fae <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8006f8e:	e034      	b.n	8006ffa <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	88fa      	ldrh	r2, [r7, #6]
 8006f9a:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2202      	movs	r2, #2
 8006fa6:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	75fb      	strb	r3, [r7, #23]
    break;
 8006fac:	e025      	b.n	8006ffa <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f000 f828 	bl	8007004 <USBH_HandleControl>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8006fb8:	7dfb      	ldrb	r3, [r7, #23]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d108      	bne.n	8006fd0 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	75fb      	strb	r3, [r7, #23]
    break;
 8006fce:	e013      	b.n	8006ff8 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8006fd0:	7dfb      	ldrb	r3, [r7, #23]
 8006fd2:	2b03      	cmp	r3, #3
 8006fd4:	d108      	bne.n	8006fe8 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	75fb      	strb	r3, [r7, #23]
    break;
 8006fe6:	e007      	b.n	8006ff8 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8006fe8:	7dfb      	ldrb	r3, [r7, #23]
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d104      	bne.n	8006ff8 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	75fb      	strb	r3, [r7, #23]
    break;
 8006ff8:	bf00      	nop
  }
  return status;
 8006ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3718      	adds	r7, #24
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af02      	add	r7, sp, #8
 800700a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800700c:	2301      	movs	r3, #1
 800700e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007010:	2300      	movs	r3, #0
 8007012:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	7e1b      	ldrb	r3, [r3, #24]
 8007018:	3b01      	subs	r3, #1
 800701a:	2b0a      	cmp	r3, #10
 800701c:	f200 814c 	bhi.w	80072b8 <USBH_HandleControl+0x2b4>
 8007020:	a201      	add	r2, pc, #4	; (adr r2, 8007028 <USBH_HandleControl+0x24>)
 8007022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007026:	bf00      	nop
 8007028:	08007055 	.word	0x08007055
 800702c:	0800706f 	.word	0x0800706f
 8007030:	080070d9 	.word	0x080070d9
 8007034:	080070ff 	.word	0x080070ff
 8007038:	08007137 	.word	0x08007137
 800703c:	08007163 	.word	0x08007163
 8007040:	080071b5 	.word	0x080071b5
 8007044:	080071d7 	.word	0x080071d7
 8007048:	08007213 	.word	0x08007213
 800704c:	0800723b 	.word	0x0800723b
 8007050:	08007279 	.word	0x08007279
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f103 0110 	add.w	r1, r3, #16
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	795b      	ldrb	r3, [r3, #5]
 800705e:	461a      	mov	r2, r3
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 f939 	bl	80072d8 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2202      	movs	r2, #2
 800706a:	761a      	strb	r2, [r3, #24]
    break;
 800706c:	e12f      	b.n	80072ce <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	795b      	ldrb	r3, [r3, #5]
 8007072:	4619      	mov	r1, r3
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fc69 	bl	800794c <USBH_LL_GetURBState>
 800707a:	4603      	mov	r3, r0
 800707c:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800707e:	7bbb      	ldrb	r3, [r7, #14]
 8007080:	2b01      	cmp	r3, #1
 8007082:	d11e      	bne.n	80070c2 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	7c1b      	ldrb	r3, [r3, #16]
 8007088:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800708c:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	8adb      	ldrh	r3, [r3, #22]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00a      	beq.n	80070ac <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8007096:	7b7b      	ldrb	r3, [r7, #13]
 8007098:	2b80      	cmp	r3, #128	; 0x80
 800709a:	d103      	bne.n	80070a4 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2203      	movs	r2, #3
 80070a0:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80070a2:	e10b      	b.n	80072bc <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2205      	movs	r2, #5
 80070a8:	761a      	strb	r2, [r3, #24]
    break;
 80070aa:	e107      	b.n	80072bc <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 80070ac:	7b7b      	ldrb	r3, [r7, #13]
 80070ae:	2b80      	cmp	r3, #128	; 0x80
 80070b0:	d103      	bne.n	80070ba <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2209      	movs	r2, #9
 80070b6:	761a      	strb	r2, [r3, #24]
    break;
 80070b8:	e100      	b.n	80072bc <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2207      	movs	r2, #7
 80070be:	761a      	strb	r2, [r3, #24]
    break;
 80070c0:	e0fc      	b.n	80072bc <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80070c2:	7bbb      	ldrb	r3, [r7, #14]
 80070c4:	2b04      	cmp	r3, #4
 80070c6:	d003      	beq.n	80070d0 <USBH_HandleControl+0xcc>
 80070c8:	7bbb      	ldrb	r3, [r7, #14]
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	f040 80f6 	bne.w	80072bc <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	220b      	movs	r2, #11
 80070d4:	761a      	strb	r2, [r3, #24]
    break;
 80070d6:	e0f1      	b.n	80072bc <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80070de:	b29a      	uxth	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6899      	ldr	r1, [r3, #8]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	899a      	ldrh	r2, [r3, #12]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	791b      	ldrb	r3, [r3, #4]
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f930 	bl	8007356 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2204      	movs	r2, #4
 80070fa:	761a      	strb	r2, [r3, #24]
    break;
 80070fc:	e0e7      	b.n	80072ce <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	791b      	ldrb	r3, [r3, #4]
 8007102:	4619      	mov	r1, r3
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 fc21 	bl	800794c <USBH_LL_GetURBState>
 800710a:	4603      	mov	r3, r0
 800710c:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800710e:	7bbb      	ldrb	r3, [r7, #14]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d102      	bne.n	800711a <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2209      	movs	r2, #9
 8007118:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800711a:	7bbb      	ldrb	r3, [r7, #14]
 800711c:	2b05      	cmp	r3, #5
 800711e:	d102      	bne.n	8007126 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8007120:	2303      	movs	r3, #3
 8007122:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007124:	e0cc      	b.n	80072c0 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8007126:	7bbb      	ldrb	r3, [r7, #14]
 8007128:	2b04      	cmp	r3, #4
 800712a:	f040 80c9 	bne.w	80072c0 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	220b      	movs	r2, #11
 8007132:	761a      	strb	r2, [r3, #24]
    break;
 8007134:	e0c4      	b.n	80072c0 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6899      	ldr	r1, [r3, #8]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	899a      	ldrh	r2, [r3, #12]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	7958      	ldrb	r0, [r3, #5]
 8007142:	2301      	movs	r3, #1
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	4603      	mov	r3, r0
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f8df 	bl	800730c <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007154:	b29a      	uxth	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2206      	movs	r2, #6
 800715e:	761a      	strb	r2, [r3, #24]
    break;
 8007160:	e0b5      	b.n	80072ce <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	795b      	ldrb	r3, [r3, #5]
 8007166:	4619      	mov	r1, r3
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fbef 	bl	800794c <USBH_LL_GetURBState>
 800716e:	4603      	mov	r3, r0
 8007170:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8007172:	7bbb      	ldrb	r3, [r7, #14]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d103      	bne.n	8007180 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2207      	movs	r2, #7
 800717c:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800717e:	e0a1      	b.n	80072c4 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8007180:	7bbb      	ldrb	r3, [r7, #14]
 8007182:	2b05      	cmp	r3, #5
 8007184:	d105      	bne.n	8007192 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	220c      	movs	r2, #12
 800718a:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800718c:	2303      	movs	r3, #3
 800718e:	73fb      	strb	r3, [r7, #15]
    break;
 8007190:	e098      	b.n	80072c4 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007192:	7bbb      	ldrb	r3, [r7, #14]
 8007194:	2b02      	cmp	r3, #2
 8007196:	d103      	bne.n	80071a0 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2205      	movs	r2, #5
 800719c:	761a      	strb	r2, [r3, #24]
    break;
 800719e:	e091      	b.n	80072c4 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 80071a0:	7bbb      	ldrb	r3, [r7, #14]
 80071a2:	2b04      	cmp	r3, #4
 80071a4:	f040 808e 	bne.w	80072c4 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	220b      	movs	r2, #11
 80071ac:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 80071ae:	2302      	movs	r3, #2
 80071b0:	73fb      	strb	r3, [r7, #15]
    break;
 80071b2:	e087      	b.n	80072c4 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	791b      	ldrb	r3, [r3, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	2100      	movs	r1, #0
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f8ca 	bl	8007356 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2208      	movs	r2, #8
 80071d2:	761a      	strb	r2, [r3, #24]

    break;
 80071d4:	e07b      	b.n	80072ce <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	791b      	ldrb	r3, [r3, #4]
 80071da:	4619      	mov	r1, r3
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fbb5 	bl	800794c <USBH_LL_GetURBState>
 80071e2:	4603      	mov	r3, r0
 80071e4:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 80071e6:	7bbb      	ldrb	r3, [r7, #14]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d105      	bne.n	80071f8 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	220d      	movs	r2, #13
 80071f0:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 80071f2:	2300      	movs	r3, #0
 80071f4:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80071f6:	e067      	b.n	80072c8 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 80071f8:	7bbb      	ldrb	r3, [r7, #14]
 80071fa:	2b04      	cmp	r3, #4
 80071fc:	d103      	bne.n	8007206 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	220b      	movs	r2, #11
 8007202:	761a      	strb	r2, [r3, #24]
    break;
 8007204:	e060      	b.n	80072c8 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8007206:	7bbb      	ldrb	r3, [r7, #14]
 8007208:	2b05      	cmp	r3, #5
 800720a:	d15d      	bne.n	80072c8 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 800720c:	2303      	movs	r3, #3
 800720e:	73fb      	strb	r3, [r7, #15]
    break;
 8007210:	e05a      	b.n	80072c8 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	795a      	ldrb	r2, [r3, #5]
 8007216:	2301      	movs	r3, #1
 8007218:	9300      	str	r3, [sp, #0]
 800721a:	4613      	mov	r3, r2
 800721c:	2200      	movs	r2, #0
 800721e:	2100      	movs	r1, #0
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f873 	bl	800730c <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800722c:	b29a      	uxth	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	220a      	movs	r2, #10
 8007236:	761a      	strb	r2, [r3, #24]
    break;
 8007238:	e049      	b.n	80072ce <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	795b      	ldrb	r3, [r3, #5]
 800723e:	4619      	mov	r1, r3
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fb83 	bl	800794c <USBH_LL_GetURBState>
 8007246:	4603      	mov	r3, r0
 8007248:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800724a:	7bbb      	ldrb	r3, [r7, #14]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d105      	bne.n	800725c <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8007250:	2300      	movs	r3, #0
 8007252:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	220d      	movs	r2, #13
 8007258:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 800725a:	e037      	b.n	80072cc <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800725c:	7bbb      	ldrb	r3, [r7, #14]
 800725e:	2b02      	cmp	r3, #2
 8007260:	d103      	bne.n	800726a <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2209      	movs	r2, #9
 8007266:	761a      	strb	r2, [r3, #24]
    break;
 8007268:	e030      	b.n	80072cc <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 800726a:	7bbb      	ldrb	r3, [r7, #14]
 800726c:	2b04      	cmp	r3, #4
 800726e:	d12d      	bne.n	80072cc <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	220b      	movs	r2, #11
 8007274:	761a      	strb	r2, [r3, #24]
    break;
 8007276:	e029      	b.n	80072cc <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	7e5b      	ldrb	r3, [r3, #25]
 800727c:	3301      	adds	r3, #1
 800727e:	b2da      	uxtb	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	765a      	strb	r2, [r3, #25]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	7e5b      	ldrb	r3, [r3, #25]
 8007288:	2b02      	cmp	r3, #2
 800728a:	d809      	bhi.n	80072a0 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fab0 	bl	80077f2 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800729e:	e016      	b.n	80072ce <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80072a6:	2106      	movs	r1, #6
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 80072b2:	2302      	movs	r3, #2
 80072b4:	73fb      	strb	r3, [r7, #15]
    break;
 80072b6:	e00a      	b.n	80072ce <USBH_HandleControl+0x2ca>

  default:
    break;
 80072b8:	bf00      	nop
 80072ba:	e008      	b.n	80072ce <USBH_HandleControl+0x2ca>
    break;
 80072bc:	bf00      	nop
 80072be:	e006      	b.n	80072ce <USBH_HandleControl+0x2ca>
    break;
 80072c0:	bf00      	nop
 80072c2:	e004      	b.n	80072ce <USBH_HandleControl+0x2ca>
    break;
 80072c4:	bf00      	nop
 80072c6:	e002      	b.n	80072ce <USBH_HandleControl+0x2ca>
    break;
 80072c8:	bf00      	nop
 80072ca:	e000      	b.n	80072ce <USBH_HandleControl+0x2ca>
    break;
 80072cc:	bf00      	nop
  }
  return status;
 80072ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b088      	sub	sp, #32
 80072dc:	af04      	add	r7, sp, #16
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	4613      	mov	r3, r2
 80072e4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80072e6:	79f9      	ldrb	r1, [r7, #7]
 80072e8:	2300      	movs	r3, #0
 80072ea:	9303      	str	r3, [sp, #12]
 80072ec:	2308      	movs	r3, #8
 80072ee:	9302      	str	r3, [sp, #8]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	9301      	str	r3, [sp, #4]
 80072f4:	2300      	movs	r3, #0
 80072f6:	9300      	str	r3, [sp, #0]
 80072f8:	2300      	movs	r3, #0
 80072fa:	2200      	movs	r2, #0
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f000 faf4 	bl	80078ea <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b088      	sub	sp, #32
 8007310:	af04      	add	r7, sp, #16
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	4611      	mov	r1, r2
 8007318:	461a      	mov	r2, r3
 800731a:	460b      	mov	r3, r1
 800731c:	80fb      	strh	r3, [r7, #6]
 800731e:	4613      	mov	r3, r2
 8007320:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007328:	2b00      	cmp	r3, #0
 800732a:	d001      	beq.n	8007330 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800732c:	2300      	movs	r3, #0
 800732e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007330:	7979      	ldrb	r1, [r7, #5]
 8007332:	7e3b      	ldrb	r3, [r7, #24]
 8007334:	9303      	str	r3, [sp, #12]
 8007336:	88fb      	ldrh	r3, [r7, #6]
 8007338:	9302      	str	r3, [sp, #8]
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	9301      	str	r3, [sp, #4]
 800733e:	2301      	movs	r3, #1
 8007340:	9300      	str	r3, [sp, #0]
 8007342:	2300      	movs	r3, #0
 8007344:	2200      	movs	r2, #0
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f000 facf 	bl	80078ea <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b088      	sub	sp, #32
 800735a:	af04      	add	r7, sp, #16
 800735c:	60f8      	str	r0, [r7, #12]
 800735e:	60b9      	str	r1, [r7, #8]
 8007360:	4611      	mov	r1, r2
 8007362:	461a      	mov	r2, r3
 8007364:	460b      	mov	r3, r1
 8007366:	80fb      	strh	r3, [r7, #6]
 8007368:	4613      	mov	r3, r2
 800736a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800736c:	7979      	ldrb	r1, [r7, #5]
 800736e:	2300      	movs	r3, #0
 8007370:	9303      	str	r3, [sp, #12]
 8007372:	88fb      	ldrh	r3, [r7, #6]
 8007374:	9302      	str	r3, [sp, #8]
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	9301      	str	r3, [sp, #4]
 800737a:	2301      	movs	r3, #1
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	2300      	movs	r3, #0
 8007380:	2201      	movs	r2, #1
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f000 fab1 	bl	80078ea <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007388:	2300      	movs	r3, #0

}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b088      	sub	sp, #32
 8007396:	af04      	add	r7, sp, #16
 8007398:	60f8      	str	r0, [r7, #12]
 800739a:	60b9      	str	r1, [r7, #8]
 800739c:	4611      	mov	r1, r2
 800739e:	461a      	mov	r2, r3
 80073a0:	460b      	mov	r3, r1
 80073a2:	80fb      	strh	r3, [r7, #6]
 80073a4:	4613      	mov	r3, r2
 80073a6:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d001      	beq.n	80073b6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80073b2:	2300      	movs	r3, #0
 80073b4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80073b6:	7979      	ldrb	r1, [r7, #5]
 80073b8:	7e3b      	ldrb	r3, [r7, #24]
 80073ba:	9303      	str	r3, [sp, #12]
 80073bc:	88fb      	ldrh	r3, [r7, #6]
 80073be:	9302      	str	r3, [sp, #8]
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	9301      	str	r3, [sp, #4]
 80073c4:	2301      	movs	r3, #1
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	2302      	movs	r3, #2
 80073ca:	2200      	movs	r2, #0
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f000 fa8c 	bl	80078ea <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3710      	adds	r7, #16
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b088      	sub	sp, #32
 80073e0:	af04      	add	r7, sp, #16
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	4611      	mov	r1, r2
 80073e8:	461a      	mov	r2, r3
 80073ea:	460b      	mov	r3, r1
 80073ec:	80fb      	strh	r3, [r7, #6]
 80073ee:	4613      	mov	r3, r2
 80073f0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80073f2:	7979      	ldrb	r1, [r7, #5]
 80073f4:	2300      	movs	r3, #0
 80073f6:	9303      	str	r3, [sp, #12]
 80073f8:	88fb      	ldrh	r3, [r7, #6]
 80073fa:	9302      	str	r3, [sp, #8]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	9301      	str	r3, [sp, #4]
 8007400:	2301      	movs	r3, #1
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	2302      	movs	r3, #2
 8007406:	2201      	movs	r2, #1
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f000 fa6e 	bl	80078ea <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af04      	add	r7, sp, #16
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	4608      	mov	r0, r1
 8007422:	4611      	mov	r1, r2
 8007424:	461a      	mov	r2, r3
 8007426:	4603      	mov	r3, r0
 8007428:	70fb      	strb	r3, [r7, #3]
 800742a:	460b      	mov	r3, r1
 800742c:	70bb      	strb	r3, [r7, #2]
 800742e:	4613      	mov	r3, r2
 8007430:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8007432:	7878      	ldrb	r0, [r7, #1]
 8007434:	78ba      	ldrb	r2, [r7, #2]
 8007436:	78f9      	ldrb	r1, [r7, #3]
 8007438:	8b3b      	ldrh	r3, [r7, #24]
 800743a:	9302      	str	r3, [sp, #8]
 800743c:	7d3b      	ldrb	r3, [r7, #20]
 800743e:	9301      	str	r3, [sp, #4]
 8007440:	7c3b      	ldrb	r3, [r7, #16]
 8007442:	9300      	str	r3, [sp, #0]
 8007444:	4603      	mov	r3, r0
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fa01 	bl	800784e <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 800744c:	2300      	movs	r3, #0

}
 800744e:	4618      	mov	r0, r3
 8007450:	3708      	adds	r7, #8
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b082      	sub	sp, #8
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
 800745e:	460b      	mov	r3, r1
 8007460:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8007462:	78fb      	ldrb	r3, [r7, #3]
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fa20 	bl	80078ac <USBH_LL_ClosePipe>

  return USBH_OK;
 800746c:	2300      	movs	r3, #0

}
 800746e:	4618      	mov	r0, r3
 8007470:	3708      	adds	r7, #8
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b084      	sub	sp, #16
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	460b      	mov	r3, r1
 8007480:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f831 	bl	80074ea <USBH_GetFreePipe>
 8007488:	4603      	mov	r3, r0
 800748a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800748c:	89fb      	ldrh	r3, [r7, #14]
 800748e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007492:	4293      	cmp	r3, r2
 8007494:	d007      	beq.n	80074a6 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8007496:	78fb      	ldrb	r3, [r7, #3]
 8007498:	89fa      	ldrh	r2, [r7, #14]
 800749a:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	32e0      	adds	r2, #224	; 0xe0
 80074a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 80074a6:	89fb      	ldrh	r3, [r7, #14]
 80074a8:	b2db      	uxtb	r3, r3
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b083      	sub	sp, #12
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	460b      	mov	r3, r1
 80074bc:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 80074be:	78fb      	ldrb	r3, [r7, #3]
 80074c0:	2b0a      	cmp	r3, #10
 80074c2:	d80b      	bhi.n	80074dc <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 80074c4:	78fa      	ldrb	r2, [r7, #3]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	32e0      	adds	r2, #224	; 0xe0
 80074ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ce:	78fa      	ldrb	r2, [r7, #3]
 80074d0:	f3c3 010e 	ubfx	r1, r3, #0, #15
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	32e0      	adds	r2, #224	; 0xe0
 80074d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b085      	sub	sp, #20
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80074f2:	2300      	movs	r3, #0
 80074f4:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80074f6:	2300      	movs	r3, #0
 80074f8:	73fb      	strb	r3, [r7, #15]
 80074fa:	e00e      	b.n	800751a <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80074fc:	7bfa      	ldrb	r2, [r7, #15]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	32e0      	adds	r2, #224	; 0xe0
 8007502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007506:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d102      	bne.n	8007514 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800750e:	7bfb      	ldrb	r3, [r7, #15]
 8007510:	b29b      	uxth	r3, r3
 8007512:	e007      	b.n	8007524 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8007514:	7bfb      	ldrb	r3, [r7, #15]
 8007516:	3301      	adds	r3, #1
 8007518:	73fb      	strb	r3, [r7, #15]
 800751a:	7bfb      	ldrb	r3, [r7, #15]
 800751c:	2b0a      	cmp	r3, #10
 800751e:	d9ed      	bls.n	80074fc <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8007520:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007524:	4618      	mov	r0, r3
 8007526:	3714      	adds	r7, #20
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007534:	2201      	movs	r2, #1
 8007536:	490e      	ldr	r1, [pc, #56]	; (8007570 <MX_USB_HOST_Init+0x40>)
 8007538:	480e      	ldr	r0, [pc, #56]	; (8007574 <MX_USB_HOST_Init+0x44>)
 800753a:	f7ff fb3d 	bl	8006bb8 <USBH_Init>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d001      	beq.n	8007548 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007544:	f7f9 fcb4 	bl	8000eb0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007548:	490b      	ldr	r1, [pc, #44]	; (8007578 <MX_USB_HOST_Init+0x48>)
 800754a:	480a      	ldr	r0, [pc, #40]	; (8007574 <MX_USB_HOST_Init+0x44>)
 800754c:	f7ff fba7 	bl	8006c9e <USBH_RegisterClass>
 8007550:	4603      	mov	r3, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d001      	beq.n	800755a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007556:	f7f9 fcab 	bl	8000eb0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800755a:	4806      	ldr	r0, [pc, #24]	; (8007574 <MX_USB_HOST_Init+0x44>)
 800755c:	f7ff fc2c 	bl	8006db8 <USBH_Start>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d001      	beq.n	800756a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007566:	f7f9 fca3 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800756a:	bf00      	nop
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	0800757d 	.word	0x0800757d
 8007574:	2000827c 	.word	0x2000827c
 8007578:	20000010 	.word	0x20000010

0800757c <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	460b      	mov	r3, r1
 8007586:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007588:	78fb      	ldrb	r3, [r7, #3]
 800758a:	3b01      	subs	r3, #1
 800758c:	2b04      	cmp	r3, #4
 800758e:	d819      	bhi.n	80075c4 <USBH_UserProcess+0x48>
 8007590:	a201      	add	r2, pc, #4	; (adr r2, 8007598 <USBH_UserProcess+0x1c>)
 8007592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007596:	bf00      	nop
 8007598:	080075c5 	.word	0x080075c5
 800759c:	080075b5 	.word	0x080075b5
 80075a0:	080075c5 	.word	0x080075c5
 80075a4:	080075bd 	.word	0x080075bd
 80075a8:	080075ad 	.word	0x080075ad
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80075ac:	4b09      	ldr	r3, [pc, #36]	; (80075d4 <USBH_UserProcess+0x58>)
 80075ae:	2203      	movs	r2, #3
 80075b0:	701a      	strb	r2, [r3, #0]
  break;
 80075b2:	e008      	b.n	80075c6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80075b4:	4b07      	ldr	r3, [pc, #28]	; (80075d4 <USBH_UserProcess+0x58>)
 80075b6:	2202      	movs	r2, #2
 80075b8:	701a      	strb	r2, [r3, #0]
  break;
 80075ba:	e004      	b.n	80075c6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80075bc:	4b05      	ldr	r3, [pc, #20]	; (80075d4 <USBH_UserProcess+0x58>)
 80075be:	2201      	movs	r2, #1
 80075c0:	701a      	strb	r2, [r3, #0]
  break;
 80075c2:	e000      	b.n	80075c6 <USBH_UserProcess+0x4a>

  default:
  break;
 80075c4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80075c6:	bf00      	nop
 80075c8:	370c      	adds	r7, #12
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	200000c0 	.word	0x200000c0

080075d8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b08a      	sub	sp, #40	; 0x28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075e0:	f107 0314 	add.w	r3, r7, #20
 80075e4:	2200      	movs	r2, #0
 80075e6:	601a      	str	r2, [r3, #0]
 80075e8:	605a      	str	r2, [r3, #4]
 80075ea:	609a      	str	r2, [r3, #8]
 80075ec:	60da      	str	r2, [r3, #12]
 80075ee:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075f8:	d147      	bne.n	800768a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075fa:	2300      	movs	r3, #0
 80075fc:	613b      	str	r3, [r7, #16]
 80075fe:	4b25      	ldr	r3, [pc, #148]	; (8007694 <HAL_HCD_MspInit+0xbc>)
 8007600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007602:	4a24      	ldr	r2, [pc, #144]	; (8007694 <HAL_HCD_MspInit+0xbc>)
 8007604:	f043 0301 	orr.w	r3, r3, #1
 8007608:	6313      	str	r3, [r2, #48]	; 0x30
 800760a:	4b22      	ldr	r3, [pc, #136]	; (8007694 <HAL_HCD_MspInit+0xbc>)
 800760c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760e:	f003 0301 	and.w	r3, r3, #1
 8007612:	613b      	str	r3, [r7, #16]
 8007614:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007616:	f44f 7300 	mov.w	r3, #512	; 0x200
 800761a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800761c:	2300      	movs	r3, #0
 800761e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007620:	2300      	movs	r3, #0
 8007622:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007624:	f107 0314 	add.w	r3, r7, #20
 8007628:	4619      	mov	r1, r3
 800762a:	481b      	ldr	r0, [pc, #108]	; (8007698 <HAL_HCD_MspInit+0xc0>)
 800762c:	f7fa fb6a 	bl	8001d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007630:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007636:	2302      	movs	r3, #2
 8007638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800763a:	2300      	movs	r3, #0
 800763c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800763e:	2300      	movs	r3, #0
 8007640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007642:	230a      	movs	r3, #10
 8007644:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007646:	f107 0314 	add.w	r3, r7, #20
 800764a:	4619      	mov	r1, r3
 800764c:	4812      	ldr	r0, [pc, #72]	; (8007698 <HAL_HCD_MspInit+0xc0>)
 800764e:	f7fa fb59 	bl	8001d04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007652:	4b10      	ldr	r3, [pc, #64]	; (8007694 <HAL_HCD_MspInit+0xbc>)
 8007654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007656:	4a0f      	ldr	r2, [pc, #60]	; (8007694 <HAL_HCD_MspInit+0xbc>)
 8007658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800765c:	6353      	str	r3, [r2, #52]	; 0x34
 800765e:	2300      	movs	r3, #0
 8007660:	60fb      	str	r3, [r7, #12]
 8007662:	4b0c      	ldr	r3, [pc, #48]	; (8007694 <HAL_HCD_MspInit+0xbc>)
 8007664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007666:	4a0b      	ldr	r2, [pc, #44]	; (8007694 <HAL_HCD_MspInit+0xbc>)
 8007668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800766c:	6453      	str	r3, [r2, #68]	; 0x44
 800766e:	4b09      	ldr	r3, [pc, #36]	; (8007694 <HAL_HCD_MspInit+0xbc>)
 8007670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007676:	60fb      	str	r3, [r7, #12]
 8007678:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800767a:	2200      	movs	r2, #0
 800767c:	2100      	movs	r1, #0
 800767e:	2043      	movs	r0, #67	; 0x43
 8007680:	f7f9 ffff 	bl	8001682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007684:	2043      	movs	r0, #67	; 0x43
 8007686:	f7fa f818 	bl	80016ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800768a:	bf00      	nop
 800768c:	3728      	adds	r7, #40	; 0x28
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	40023800 	.word	0x40023800
 8007698:	40020000 	.word	0x40020000

0800769c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7ff fba3 	bl	8006df6 <USBH_LL_IncTimer>
}
 80076b0:	bf00      	nop
 80076b2:	3708      	adds	r7, #8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7ff fbdb 	bl	8006e82 <USBH_LL_Connect>
}
 80076cc:	bf00      	nop
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7ff fbf3 	bl	8006ece <USBH_LL_Disconnect>
}
 80076e8:	bf00      	nop
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	460b      	mov	r3, r1
 80076fa:	70fb      	strb	r3, [r7, #3]
 80076fc:	4613      	mov	r3, r2
 80076fe:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800771a:	4618      	mov	r0, r3
 800771c:	f7ff fb95 	bl	8006e4a <USBH_LL_PortEnabled>
} 
 8007720:	bf00      	nop
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007736:	4618      	mov	r0, r3
 8007738:	f7ff fb95 	bl	8006e66 <USBH_LL_PortDisabled>
} 
 800773c:	bf00      	nop
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8007752:	2b01      	cmp	r3, #1
 8007754:	d12a      	bne.n	80077ac <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007756:	4a18      	ldr	r2, [pc, #96]	; (80077b8 <USBH_LL_Init+0x74>)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a15      	ldr	r2, [pc, #84]	; (80077b8 <USBH_LL_Init+0x74>)
 8007762:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007766:	4b14      	ldr	r3, [pc, #80]	; (80077b8 <USBH_LL_Init+0x74>)
 8007768:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800776c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800776e:	4b12      	ldr	r3, [pc, #72]	; (80077b8 <USBH_LL_Init+0x74>)
 8007770:	2208      	movs	r2, #8
 8007772:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007774:	4b10      	ldr	r3, [pc, #64]	; (80077b8 <USBH_LL_Init+0x74>)
 8007776:	2201      	movs	r2, #1
 8007778:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800777a:	4b0f      	ldr	r3, [pc, #60]	; (80077b8 <USBH_LL_Init+0x74>)
 800777c:	2200      	movs	r2, #0
 800777e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007780:	4b0d      	ldr	r3, [pc, #52]	; (80077b8 <USBH_LL_Init+0x74>)
 8007782:	2202      	movs	r2, #2
 8007784:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007786:	4b0c      	ldr	r3, [pc, #48]	; (80077b8 <USBH_LL_Init+0x74>)
 8007788:	2200      	movs	r2, #0
 800778a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800778c:	480a      	ldr	r0, [pc, #40]	; (80077b8 <USBH_LL_Init+0x74>)
 800778e:	f7fa fc6c 	bl	800206a <HAL_HCD_Init>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d001      	beq.n	800779c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007798:	f7f9 fb8a 	bl	8000eb0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800779c:	4806      	ldr	r0, [pc, #24]	; (80077b8 <USBH_LL_Init+0x74>)
 800779e:	f7fb f859 	bl	8002854 <HAL_HCD_GetCurrentFrame>
 80077a2:	4603      	mov	r3, r0
 80077a4:	4619      	mov	r1, r3
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7ff fb16 	bl	8006dd8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3708      	adds	r7, #8
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	20008648 	.word	0x20008648

080077bc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077c4:	2300      	movs	r3, #0
 80077c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80077c8:	2300      	movs	r3, #0
 80077ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7fa ffd4 	bl	8002780 <HAL_HCD_Start>
 80077d8:	4603      	mov	r3, r0
 80077da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80077dc:	7bfb      	ldrb	r3, [r7, #15]
 80077de:	4618      	mov	r0, r3
 80077e0:	f000 f912 	bl	8007a08 <USBH_Get_USB_Status>
 80077e4:	4603      	mov	r3, r0
 80077e6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80077e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b084      	sub	sp, #16
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007808:	4618      	mov	r0, r3
 800780a:	f7fa ffdc 	bl	80027c6 <HAL_HCD_Stop>
 800780e:	4603      	mov	r3, r0
 8007810:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007812:	7bfb      	ldrb	r3, [r7, #15]
 8007814:	4618      	mov	r0, r3
 8007816:	f000 f8f7 	bl	8007a08 <USBH_Get_USB_Status>
 800781a:	4603      	mov	r3, r0
 800781c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800781e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	460b      	mov	r3, r1
 8007832:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800783a:	78fa      	ldrb	r2, [r7, #3]
 800783c:	4611      	mov	r1, r2
 800783e:	4618      	mov	r0, r3
 8007840:	f7fa fff3 	bl	800282a <HAL_HCD_HC_GetXferCount>
 8007844:	4603      	mov	r3, r0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3708      	adds	r7, #8
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800784e:	b590      	push	{r4, r7, lr}
 8007850:	b089      	sub	sp, #36	; 0x24
 8007852:	af04      	add	r7, sp, #16
 8007854:	6078      	str	r0, [r7, #4]
 8007856:	4608      	mov	r0, r1
 8007858:	4611      	mov	r1, r2
 800785a:	461a      	mov	r2, r3
 800785c:	4603      	mov	r3, r0
 800785e:	70fb      	strb	r3, [r7, #3]
 8007860:	460b      	mov	r3, r1
 8007862:	70bb      	strb	r3, [r7, #2]
 8007864:	4613      	mov	r3, r2
 8007866:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007868:	2300      	movs	r3, #0
 800786a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800786c:	2300      	movs	r3, #0
 800786e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8007876:	787c      	ldrb	r4, [r7, #1]
 8007878:	78ba      	ldrb	r2, [r7, #2]
 800787a:	78f9      	ldrb	r1, [r7, #3]
 800787c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800787e:	9302      	str	r3, [sp, #8]
 8007880:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007884:	9301      	str	r3, [sp, #4]
 8007886:	f897 3020 	ldrb.w	r3, [r7, #32]
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	4623      	mov	r3, r4
 800788e:	f7fa fc4e 	bl	800212e <HAL_HCD_HC_Init>
 8007892:	4603      	mov	r3, r0
 8007894:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007896:	7bfb      	ldrb	r3, [r7, #15]
 8007898:	4618      	mov	r0, r3
 800789a:	f000 f8b5 	bl	8007a08 <USBH_Get_USB_Status>
 800789e:	4603      	mov	r3, r0
 80078a0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80078a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3714      	adds	r7, #20
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd90      	pop	{r4, r7, pc}

080078ac <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	460b      	mov	r3, r1
 80078b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078b8:	2300      	movs	r3, #0
 80078ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80078bc:	2300      	movs	r3, #0
 80078be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80078c6:	78fa      	ldrb	r2, [r7, #3]
 80078c8:	4611      	mov	r1, r2
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7fa fcc7 	bl	800225e <HAL_HCD_HC_Halt>
 80078d0:	4603      	mov	r3, r0
 80078d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80078d4:	7bfb      	ldrb	r3, [r7, #15]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f000 f896 	bl	8007a08 <USBH_Get_USB_Status>
 80078dc:	4603      	mov	r3, r0
 80078de:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80078e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80078ea:	b590      	push	{r4, r7, lr}
 80078ec:	b089      	sub	sp, #36	; 0x24
 80078ee:	af04      	add	r7, sp, #16
 80078f0:	6078      	str	r0, [r7, #4]
 80078f2:	4608      	mov	r0, r1
 80078f4:	4611      	mov	r1, r2
 80078f6:	461a      	mov	r2, r3
 80078f8:	4603      	mov	r3, r0
 80078fa:	70fb      	strb	r3, [r7, #3]
 80078fc:	460b      	mov	r3, r1
 80078fe:	70bb      	strb	r3, [r7, #2]
 8007900:	4613      	mov	r3, r2
 8007902:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007904:	2300      	movs	r3, #0
 8007906:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007908:	2300      	movs	r3, #0
 800790a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8007912:	787c      	ldrb	r4, [r7, #1]
 8007914:	78ba      	ldrb	r2, [r7, #2]
 8007916:	78f9      	ldrb	r1, [r7, #3]
 8007918:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800791c:	9303      	str	r3, [sp, #12]
 800791e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007920:	9302      	str	r3, [sp, #8]
 8007922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007924:	9301      	str	r3, [sp, #4]
 8007926:	f897 3020 	ldrb.w	r3, [r7, #32]
 800792a:	9300      	str	r3, [sp, #0]
 800792c:	4623      	mov	r3, r4
 800792e:	f7fa fcb9 	bl	80022a4 <HAL_HCD_HC_SubmitRequest>
 8007932:	4603      	mov	r3, r0
 8007934:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007936:	7bfb      	ldrb	r3, [r7, #15]
 8007938:	4618      	mov	r0, r3
 800793a:	f000 f865 	bl	8007a08 <USBH_Get_USB_Status>
 800793e:	4603      	mov	r3, r0
 8007940:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007942:	7bbb      	ldrb	r3, [r7, #14]
}
 8007944:	4618      	mov	r0, r3
 8007946:	3714      	adds	r7, #20
 8007948:	46bd      	mov	sp, r7
 800794a:	bd90      	pop	{r4, r7, pc}

0800794c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	460b      	mov	r3, r1
 8007956:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800795e:	78fa      	ldrb	r2, [r7, #3]
 8007960:	4611      	mov	r1, r2
 8007962:	4618      	mov	r0, r3
 8007964:	f7fa ff4c 	bl	8002800 <HAL_HCD_HC_GetURBState>
 8007968:	4603      	mov	r3, r0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b082      	sub	sp, #8
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
 800797a:	460b      	mov	r3, r1
 800797c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8007984:	2b01      	cmp	r3, #1
 8007986:	d103      	bne.n	8007990 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007988:	78fb      	ldrb	r3, [r7, #3]
 800798a:	4618      	mov	r0, r3
 800798c:	f000 f868 	bl	8007a60 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007990:	20c8      	movs	r0, #200	; 0xc8
 8007992:	f7f9 fd79 	bl	8001488 <HAL_Delay>
  return USBH_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3708      	adds	r7, #8
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	460b      	mov	r3, r1
 80079aa:	70fb      	strb	r3, [r7, #3]
 80079ac:	4613      	mov	r3, r2
 80079ae:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079b6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80079b8:	78fa      	ldrb	r2, [r7, #3]
 80079ba:	68f9      	ldr	r1, [r7, #12]
 80079bc:	4613      	mov	r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	4413      	add	r3, r2
 80079c2:	00db      	lsls	r3, r3, #3
 80079c4:	440b      	add	r3, r1
 80079c6:	333b      	adds	r3, #59	; 0x3b
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00a      	beq.n	80079e4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80079ce:	78fa      	ldrb	r2, [r7, #3]
 80079d0:	68f9      	ldr	r1, [r7, #12]
 80079d2:	4613      	mov	r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4413      	add	r3, r2
 80079d8:	00db      	lsls	r3, r3, #3
 80079da:	440b      	add	r3, r1
 80079dc:	3350      	adds	r3, #80	; 0x50
 80079de:	78ba      	ldrb	r2, [r7, #2]
 80079e0:	701a      	strb	r2, [r3, #0]
 80079e2:	e009      	b.n	80079f8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80079e4:	78fa      	ldrb	r2, [r7, #3]
 80079e6:	68f9      	ldr	r1, [r7, #12]
 80079e8:	4613      	mov	r3, r2
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	4413      	add	r3, r2
 80079ee:	00db      	lsls	r3, r3, #3
 80079f0:	440b      	add	r3, r1
 80079f2:	3351      	adds	r3, #81	; 0x51
 80079f4:	78ba      	ldrb	r2, [r7, #2]
 80079f6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3714      	adds	r7, #20
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
	...

08007a08 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	4603      	mov	r3, r0
 8007a10:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a12:	2300      	movs	r3, #0
 8007a14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007a16:	79fb      	ldrb	r3, [r7, #7]
 8007a18:	2b03      	cmp	r3, #3
 8007a1a:	d817      	bhi.n	8007a4c <USBH_Get_USB_Status+0x44>
 8007a1c:	a201      	add	r2, pc, #4	; (adr r2, 8007a24 <USBH_Get_USB_Status+0x1c>)
 8007a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a22:	bf00      	nop
 8007a24:	08007a35 	.word	0x08007a35
 8007a28:	08007a3b 	.word	0x08007a3b
 8007a2c:	08007a41 	.word	0x08007a41
 8007a30:	08007a47 	.word	0x08007a47
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007a34:	2300      	movs	r3, #0
 8007a36:	73fb      	strb	r3, [r7, #15]
    break;
 8007a38:	e00b      	b.n	8007a52 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007a3a:	2302      	movs	r3, #2
 8007a3c:	73fb      	strb	r3, [r7, #15]
    break;
 8007a3e:	e008      	b.n	8007a52 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007a40:	2301      	movs	r3, #1
 8007a42:	73fb      	strb	r3, [r7, #15]
    break;
 8007a44:	e005      	b.n	8007a52 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007a46:	2302      	movs	r3, #2
 8007a48:	73fb      	strb	r3, [r7, #15]
    break;
 8007a4a:	e002      	b.n	8007a52 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	73fb      	strb	r3, [r7, #15]
    break;
 8007a50:	bf00      	nop
  }
  return usb_status;
 8007a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3714      	adds	r7, #20
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	4603      	mov	r3, r0
 8007a68:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8007a6a:	79fb      	ldrb	r3, [r7, #7]
 8007a6c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007a6e:	79fb      	ldrb	r3, [r7, #7]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d102      	bne.n	8007a7a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8007a74:	2301      	movs	r3, #1
 8007a76:	73fb      	strb	r3, [r7, #15]
 8007a78:	e001      	b.n	8007a7e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007a7e:	7bfb      	ldrb	r3, [r7, #15]
 8007a80:	461a      	mov	r2, r3
 8007a82:	2101      	movs	r1, #1
 8007a84:	4803      	ldr	r0, [pc, #12]	; (8007a94 <MX_DriverVbusFS+0x34>)
 8007a86:	f7fa fad7 	bl	8002038 <HAL_GPIO_WritePin>
}
 8007a8a:	bf00      	nop
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	40020800 	.word	0x40020800

08007a98 <__errno>:
 8007a98:	4b01      	ldr	r3, [pc, #4]	; (8007aa0 <__errno+0x8>)
 8007a9a:	6818      	ldr	r0, [r3, #0]
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	20000030 	.word	0x20000030

08007aa4 <__libc_init_array>:
 8007aa4:	b570      	push	{r4, r5, r6, lr}
 8007aa6:	4e0d      	ldr	r6, [pc, #52]	; (8007adc <__libc_init_array+0x38>)
 8007aa8:	4c0d      	ldr	r4, [pc, #52]	; (8007ae0 <__libc_init_array+0x3c>)
 8007aaa:	1ba4      	subs	r4, r4, r6
 8007aac:	10a4      	asrs	r4, r4, #2
 8007aae:	2500      	movs	r5, #0
 8007ab0:	42a5      	cmp	r5, r4
 8007ab2:	d109      	bne.n	8007ac8 <__libc_init_array+0x24>
 8007ab4:	4e0b      	ldr	r6, [pc, #44]	; (8007ae4 <__libc_init_array+0x40>)
 8007ab6:	4c0c      	ldr	r4, [pc, #48]	; (8007ae8 <__libc_init_array+0x44>)
 8007ab8:	f000 f8ea 	bl	8007c90 <_init>
 8007abc:	1ba4      	subs	r4, r4, r6
 8007abe:	10a4      	asrs	r4, r4, #2
 8007ac0:	2500      	movs	r5, #0
 8007ac2:	42a5      	cmp	r5, r4
 8007ac4:	d105      	bne.n	8007ad2 <__libc_init_array+0x2e>
 8007ac6:	bd70      	pop	{r4, r5, r6, pc}
 8007ac8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007acc:	4798      	blx	r3
 8007ace:	3501      	adds	r5, #1
 8007ad0:	e7ee      	b.n	8007ab0 <__libc_init_array+0xc>
 8007ad2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ad6:	4798      	blx	r3
 8007ad8:	3501      	adds	r5, #1
 8007ada:	e7f2      	b.n	8007ac2 <__libc_init_array+0x1e>
 8007adc:	08007cd4 	.word	0x08007cd4
 8007ae0:	08007cd4 	.word	0x08007cd4
 8007ae4:	08007cd4 	.word	0x08007cd4
 8007ae8:	08007cd8 	.word	0x08007cd8

08007aec <malloc>:
 8007aec:	4b02      	ldr	r3, [pc, #8]	; (8007af8 <malloc+0xc>)
 8007aee:	4601      	mov	r1, r0
 8007af0:	6818      	ldr	r0, [r3, #0]
 8007af2:	f000 b861 	b.w	8007bb8 <_malloc_r>
 8007af6:	bf00      	nop
 8007af8:	20000030 	.word	0x20000030

08007afc <free>:
 8007afc:	4b02      	ldr	r3, [pc, #8]	; (8007b08 <free+0xc>)
 8007afe:	4601      	mov	r1, r0
 8007b00:	6818      	ldr	r0, [r3, #0]
 8007b02:	f000 b80b 	b.w	8007b1c <_free_r>
 8007b06:	bf00      	nop
 8007b08:	20000030 	.word	0x20000030

08007b0c <memset>:
 8007b0c:	4402      	add	r2, r0
 8007b0e:	4603      	mov	r3, r0
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d100      	bne.n	8007b16 <memset+0xa>
 8007b14:	4770      	bx	lr
 8007b16:	f803 1b01 	strb.w	r1, [r3], #1
 8007b1a:	e7f9      	b.n	8007b10 <memset+0x4>

08007b1c <_free_r>:
 8007b1c:	b538      	push	{r3, r4, r5, lr}
 8007b1e:	4605      	mov	r5, r0
 8007b20:	2900      	cmp	r1, #0
 8007b22:	d045      	beq.n	8007bb0 <_free_r+0x94>
 8007b24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b28:	1f0c      	subs	r4, r1, #4
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	bfb8      	it	lt
 8007b2e:	18e4      	addlt	r4, r4, r3
 8007b30:	f000 f8ac 	bl	8007c8c <__malloc_lock>
 8007b34:	4a1f      	ldr	r2, [pc, #124]	; (8007bb4 <_free_r+0x98>)
 8007b36:	6813      	ldr	r3, [r2, #0]
 8007b38:	4610      	mov	r0, r2
 8007b3a:	b933      	cbnz	r3, 8007b4a <_free_r+0x2e>
 8007b3c:	6063      	str	r3, [r4, #4]
 8007b3e:	6014      	str	r4, [r2, #0]
 8007b40:	4628      	mov	r0, r5
 8007b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b46:	f000 b8a2 	b.w	8007c8e <__malloc_unlock>
 8007b4a:	42a3      	cmp	r3, r4
 8007b4c:	d90c      	bls.n	8007b68 <_free_r+0x4c>
 8007b4e:	6821      	ldr	r1, [r4, #0]
 8007b50:	1862      	adds	r2, r4, r1
 8007b52:	4293      	cmp	r3, r2
 8007b54:	bf04      	itt	eq
 8007b56:	681a      	ldreq	r2, [r3, #0]
 8007b58:	685b      	ldreq	r3, [r3, #4]
 8007b5a:	6063      	str	r3, [r4, #4]
 8007b5c:	bf04      	itt	eq
 8007b5e:	1852      	addeq	r2, r2, r1
 8007b60:	6022      	streq	r2, [r4, #0]
 8007b62:	6004      	str	r4, [r0, #0]
 8007b64:	e7ec      	b.n	8007b40 <_free_r+0x24>
 8007b66:	4613      	mov	r3, r2
 8007b68:	685a      	ldr	r2, [r3, #4]
 8007b6a:	b10a      	cbz	r2, 8007b70 <_free_r+0x54>
 8007b6c:	42a2      	cmp	r2, r4
 8007b6e:	d9fa      	bls.n	8007b66 <_free_r+0x4a>
 8007b70:	6819      	ldr	r1, [r3, #0]
 8007b72:	1858      	adds	r0, r3, r1
 8007b74:	42a0      	cmp	r0, r4
 8007b76:	d10b      	bne.n	8007b90 <_free_r+0x74>
 8007b78:	6820      	ldr	r0, [r4, #0]
 8007b7a:	4401      	add	r1, r0
 8007b7c:	1858      	adds	r0, r3, r1
 8007b7e:	4282      	cmp	r2, r0
 8007b80:	6019      	str	r1, [r3, #0]
 8007b82:	d1dd      	bne.n	8007b40 <_free_r+0x24>
 8007b84:	6810      	ldr	r0, [r2, #0]
 8007b86:	6852      	ldr	r2, [r2, #4]
 8007b88:	605a      	str	r2, [r3, #4]
 8007b8a:	4401      	add	r1, r0
 8007b8c:	6019      	str	r1, [r3, #0]
 8007b8e:	e7d7      	b.n	8007b40 <_free_r+0x24>
 8007b90:	d902      	bls.n	8007b98 <_free_r+0x7c>
 8007b92:	230c      	movs	r3, #12
 8007b94:	602b      	str	r3, [r5, #0]
 8007b96:	e7d3      	b.n	8007b40 <_free_r+0x24>
 8007b98:	6820      	ldr	r0, [r4, #0]
 8007b9a:	1821      	adds	r1, r4, r0
 8007b9c:	428a      	cmp	r2, r1
 8007b9e:	bf04      	itt	eq
 8007ba0:	6811      	ldreq	r1, [r2, #0]
 8007ba2:	6852      	ldreq	r2, [r2, #4]
 8007ba4:	6062      	str	r2, [r4, #4]
 8007ba6:	bf04      	itt	eq
 8007ba8:	1809      	addeq	r1, r1, r0
 8007baa:	6021      	streq	r1, [r4, #0]
 8007bac:	605c      	str	r4, [r3, #4]
 8007bae:	e7c7      	b.n	8007b40 <_free_r+0x24>
 8007bb0:	bd38      	pop	{r3, r4, r5, pc}
 8007bb2:	bf00      	nop
 8007bb4:	200000c4 	.word	0x200000c4

08007bb8 <_malloc_r>:
 8007bb8:	b570      	push	{r4, r5, r6, lr}
 8007bba:	1ccd      	adds	r5, r1, #3
 8007bbc:	f025 0503 	bic.w	r5, r5, #3
 8007bc0:	3508      	adds	r5, #8
 8007bc2:	2d0c      	cmp	r5, #12
 8007bc4:	bf38      	it	cc
 8007bc6:	250c      	movcc	r5, #12
 8007bc8:	2d00      	cmp	r5, #0
 8007bca:	4606      	mov	r6, r0
 8007bcc:	db01      	blt.n	8007bd2 <_malloc_r+0x1a>
 8007bce:	42a9      	cmp	r1, r5
 8007bd0:	d903      	bls.n	8007bda <_malloc_r+0x22>
 8007bd2:	230c      	movs	r3, #12
 8007bd4:	6033      	str	r3, [r6, #0]
 8007bd6:	2000      	movs	r0, #0
 8007bd8:	bd70      	pop	{r4, r5, r6, pc}
 8007bda:	f000 f857 	bl	8007c8c <__malloc_lock>
 8007bde:	4a21      	ldr	r2, [pc, #132]	; (8007c64 <_malloc_r+0xac>)
 8007be0:	6814      	ldr	r4, [r2, #0]
 8007be2:	4621      	mov	r1, r4
 8007be4:	b991      	cbnz	r1, 8007c0c <_malloc_r+0x54>
 8007be6:	4c20      	ldr	r4, [pc, #128]	; (8007c68 <_malloc_r+0xb0>)
 8007be8:	6823      	ldr	r3, [r4, #0]
 8007bea:	b91b      	cbnz	r3, 8007bf4 <_malloc_r+0x3c>
 8007bec:	4630      	mov	r0, r6
 8007bee:	f000 f83d 	bl	8007c6c <_sbrk_r>
 8007bf2:	6020      	str	r0, [r4, #0]
 8007bf4:	4629      	mov	r1, r5
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	f000 f838 	bl	8007c6c <_sbrk_r>
 8007bfc:	1c43      	adds	r3, r0, #1
 8007bfe:	d124      	bne.n	8007c4a <_malloc_r+0x92>
 8007c00:	230c      	movs	r3, #12
 8007c02:	6033      	str	r3, [r6, #0]
 8007c04:	4630      	mov	r0, r6
 8007c06:	f000 f842 	bl	8007c8e <__malloc_unlock>
 8007c0a:	e7e4      	b.n	8007bd6 <_malloc_r+0x1e>
 8007c0c:	680b      	ldr	r3, [r1, #0]
 8007c0e:	1b5b      	subs	r3, r3, r5
 8007c10:	d418      	bmi.n	8007c44 <_malloc_r+0x8c>
 8007c12:	2b0b      	cmp	r3, #11
 8007c14:	d90f      	bls.n	8007c36 <_malloc_r+0x7e>
 8007c16:	600b      	str	r3, [r1, #0]
 8007c18:	50cd      	str	r5, [r1, r3]
 8007c1a:	18cc      	adds	r4, r1, r3
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	f000 f836 	bl	8007c8e <__malloc_unlock>
 8007c22:	f104 000b 	add.w	r0, r4, #11
 8007c26:	1d23      	adds	r3, r4, #4
 8007c28:	f020 0007 	bic.w	r0, r0, #7
 8007c2c:	1ac3      	subs	r3, r0, r3
 8007c2e:	d0d3      	beq.n	8007bd8 <_malloc_r+0x20>
 8007c30:	425a      	negs	r2, r3
 8007c32:	50e2      	str	r2, [r4, r3]
 8007c34:	e7d0      	b.n	8007bd8 <_malloc_r+0x20>
 8007c36:	428c      	cmp	r4, r1
 8007c38:	684b      	ldr	r3, [r1, #4]
 8007c3a:	bf16      	itet	ne
 8007c3c:	6063      	strne	r3, [r4, #4]
 8007c3e:	6013      	streq	r3, [r2, #0]
 8007c40:	460c      	movne	r4, r1
 8007c42:	e7eb      	b.n	8007c1c <_malloc_r+0x64>
 8007c44:	460c      	mov	r4, r1
 8007c46:	6849      	ldr	r1, [r1, #4]
 8007c48:	e7cc      	b.n	8007be4 <_malloc_r+0x2c>
 8007c4a:	1cc4      	adds	r4, r0, #3
 8007c4c:	f024 0403 	bic.w	r4, r4, #3
 8007c50:	42a0      	cmp	r0, r4
 8007c52:	d005      	beq.n	8007c60 <_malloc_r+0xa8>
 8007c54:	1a21      	subs	r1, r4, r0
 8007c56:	4630      	mov	r0, r6
 8007c58:	f000 f808 	bl	8007c6c <_sbrk_r>
 8007c5c:	3001      	adds	r0, #1
 8007c5e:	d0cf      	beq.n	8007c00 <_malloc_r+0x48>
 8007c60:	6025      	str	r5, [r4, #0]
 8007c62:	e7db      	b.n	8007c1c <_malloc_r+0x64>
 8007c64:	200000c4 	.word	0x200000c4
 8007c68:	200000c8 	.word	0x200000c8

08007c6c <_sbrk_r>:
 8007c6c:	b538      	push	{r3, r4, r5, lr}
 8007c6e:	4c06      	ldr	r4, [pc, #24]	; (8007c88 <_sbrk_r+0x1c>)
 8007c70:	2300      	movs	r3, #0
 8007c72:	4605      	mov	r5, r0
 8007c74:	4608      	mov	r0, r1
 8007c76:	6023      	str	r3, [r4, #0]
 8007c78:	f7f9 fb28 	bl	80012cc <_sbrk>
 8007c7c:	1c43      	adds	r3, r0, #1
 8007c7e:	d102      	bne.n	8007c86 <_sbrk_r+0x1a>
 8007c80:	6823      	ldr	r3, [r4, #0]
 8007c82:	b103      	cbz	r3, 8007c86 <_sbrk_r+0x1a>
 8007c84:	602b      	str	r3, [r5, #0]
 8007c86:	bd38      	pop	{r3, r4, r5, pc}
 8007c88:	2000890c 	.word	0x2000890c

08007c8c <__malloc_lock>:
 8007c8c:	4770      	bx	lr

08007c8e <__malloc_unlock>:
 8007c8e:	4770      	bx	lr

08007c90 <_init>:
 8007c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c92:	bf00      	nop
 8007c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c96:	bc08      	pop	{r3}
 8007c98:	469e      	mov	lr, r3
 8007c9a:	4770      	bx	lr

08007c9c <_fini>:
 8007c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9e:	bf00      	nop
 8007ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ca2:	bc08      	pop	{r3}
 8007ca4:	469e      	mov	lr, r3
 8007ca6:	4770      	bx	lr
